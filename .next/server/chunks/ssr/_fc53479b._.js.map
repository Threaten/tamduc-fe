{"version":3,"sources":["turbopack:///[project]/node_modules/graphql/language/tokenKind.mjs","turbopack:///[project]/node_modules/graphql/jsutils/inspect.mjs","turbopack:///[project]/node_modules/graphql/language/kinds.mjs","turbopack:///[project]/node_modules/tslib/tslib.es6.mjs","turbopack:///[project]/node_modules/graphql/language/directiveLocation.mjs","turbopack:///[project]/node_modules/graphql/jsutils/devAssert.mjs","turbopack:///[project]/node_modules/graphql/jsutils/invariant.mjs","../src/helpers.ts","turbopack:///[project]/node_modules/@apollo/src/core/QueryInfo.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/valueToObjectRepresentation.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/getOperationDefinition.ts","turbopack:///[project]/node_modules/@apollo/src/masking/utils.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/removeDirectivesFromDocument.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/isDocumentNode.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/globals/global.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/getQueryDefinition.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/getMemoryInternals.ts","turbopack:///[project]/node_modules/@apollo/src/link/http/checkFetcher.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/getStoreKeyName.ts","turbopack:///[project]/node_modules/@apollo/src/core/ObservableQuery.ts","turbopack:///[project]/node_modules/@apollo/src/errors/CombinedProtocolErrors.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/makeUniqueId.ts","turbopack:///[project]/node_modules/@apollo/src/cache/inmemory/writeToStore.ts","turbopack:///[project]/node_modules/@apollo/src/errors/LinkError.ts","turbopack:///[project]/node_modules/@apollo/src/incremental/handlers/notImplemented.ts","turbopack:///[project]/node_modules/@apollo/src/cache/inmemory/readFromStore.ts","turbopack:///[project]/node_modules/@apollo/src/cache/inmemory/entityStore.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/getFragmentQueryDocument.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/DeepMerger.ts","turbopack:///[project]/node_modules/@apollo/src/errors/ServerError.ts","turbopack:///[project]/node_modules/@apollo/src/core/ApolloClient.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/mergeDeepArray.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/maybeDeepFreeze.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/getFragmentDefinition.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/getFragmentFromSelection.ts","turbopack:///[project]/node_modules/@apollo/src/version.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/getMainDefinition.ts","turbopack:///[project]/node_modules/@apollo/src/core/QueryManager.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/mergeOptions.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/deepFreeze.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/getDefaultValues.ts","turbopack:///[project]/node_modules/@apollo/src/cache/inmemory/inMemoryCache.ts","turbopack:///[project]/node_modules/@apollo/src/errors/ServerParseError.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/storeKeyNameFromField.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/cloneDeep.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/caches.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/hasDirectives.ts","turbopack:///[project]/node_modules/@apollo/src/masking/maskFragment.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/checkDocument.ts","turbopack:///[project]/node_modules/@apollo/src/cache/core/types/common.ts","turbopack:///[project]/node_modules/@apollo/src/masking/maskOperation.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/stringifyForDisplay.ts","turbopack:///[project]/node_modules/@apollo/src/masking/maskDefinition.ts","turbopack:///[project]/node_modules/@apollo/src/cache/core/cache.ts","turbopack:///[project]/node_modules/@apollo/src/link/http/parseAndCheckHttpResponse.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/shouldInclude.ts","turbopack:///[project]/node_modules/@apollo/src/cache/inmemory/key-extractor.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/argumentsObjectFromField.ts","turbopack:///[project]/node_modules/@apollo/src/errors/CombinedGraphQLErrors.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/graphql/DocumentTransform.ts","turbopack:///[project]/node_modules/graphql/language/location.mjs","turbopack:///[project]/node_modules/graphql/jsutils/instanceOf.mjs","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/filterMap.ts","turbopack:///[project]/node_modules/@apollo/src/link/client-awareness/ClientAwarenessLink.ts","../src/entry.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/graphql/print.ts","../src/dep.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/invariant/index.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/hasForcedResolvers.ts","turbopack:///[project]/node_modules/@apollo/src/link/http/selectURI.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/canonicalStringify.ts","turbopack:///[project]/node_modules/@apollo/src/cache/inmemory/policies.ts","turbopack:///[project]/node_modules/@apollo/src/link/http/BaseHttpLink.ts","turbopack:///[project]/node_modules/@apollo/src/link/core/ApolloLink.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/equalByQuery.ts","../src/index.ts","turbopack:///[project]/node_modules/@apollo/src/cache/inmemory/helpers.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/index.production.ts","turbopack:///[project]/node_modules/@apollo/src/cache/inmemory/reactiveVars.ts","turbopack:///[project]/node_modules/graphql/language/printString.mjs","turbopack:///[project]/node_modules/graphql/language/ast.mjs","turbopack:///[project]/node_modules/graphql/jsutils/isObjectLike.mjs","turbopack:///[project]/node_modules/@apollo/src/link/utils/createOperation.ts","turbopack:///[project]/node_modules/graphql/language/printLocation.mjs","turbopack:///[project]/node_modules/graphql/error/syntaxError.mjs","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/getFragmentDefinitions.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/internal/getOperationName.ts","turbopack:///[project]/node_modules/graphql/error/GraphQLError.mjs","turbopack:///[project]/node_modules/graphql/language/characterClasses.mjs","turbopack:///[project]/node_modules/graphql/language/printer.mjs","turbopack:///[project]/lib/api/queries.ts","turbopack:///[project]/node_modules/graphql/language/visitor.mjs","turbopack:///[project]/node_modules/graphql/language/blockString.mjs","turbopack:///[project]/node_modules/@apollo/src/link/http/selectHttpOptionsAndBody.ts","turbopack:///[project]/node_modules/graphql/language/source.mjs","turbopack:///[project]/node_modules/graphql/language/lexer.mjs","../src/slot.ts","turbopack:///[project]/node_modules/graphql/language/parser.mjs","turbopack:///[project]/node_modules/@apollo/src/utilities/graphql/storeUtils.ts","turbopack:///[project]/node_modules/@apollo/src/link/http/rewriteURIForGET.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/caching/sizes.ts","turbopack:///[project]/node_modules/@apollo/src/link/http/HttpLink.ts","../src/weak.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/graphql/transform.ts","turbopack:///[project]/node_modules/@apollo/src/errors/UnconventionalError.ts","../src/strong.ts","turbopack:///[project]/node_modules/@apollo/src/utilities/graphql/operations.ts"],"sourcesContent":["/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind;\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n\nexport { TokenKind };\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n","const MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n","/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind;\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n\nexport { Kind };\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n","/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nexport { DirectiveLocation };\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n","export function devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n","export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n",null,"import { equal } from \"@wry/equality\";\nimport type { DocumentNode, FormattedExecutionResult } from \"graphql\";\n\nimport type { ApolloCache, Cache } from \"@apollo/client/cache\";\nimport type { IgnoreModifier } from \"@apollo/client/cache\";\nimport type { Incremental } from \"@apollo/client/incremental\";\nimport type { ApolloLink } from \"@apollo/client/link\";\nimport type { Unmasked } from \"@apollo/client/masking\";\nimport type { DeepPartial } from \"@apollo/client/utilities\";\nimport {\n  getOperationName,\n  graphQLResultHasError,\n} from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport type { ApolloClient } from \"./ApolloClient.js\";\nimport type { ObservableQuery } from \"./ObservableQuery.js\";\nimport type { QueryManager } from \"./QueryManager.js\";\nimport type {\n  DataValue,\n  DefaultContext,\n  InternalRefetchQueriesInclude,\n  MutationQueryReducer,\n  MutationUpdaterFunction,\n  NormalizedExecutionResult,\n  OnQueryUpdated,\n  OperationVariables,\n  TypedDocumentNode,\n} from \"./types.js\";\nimport type { ErrorPolicy } from \"./watchQueryOptions.js\";\n\ntype UpdateQueries<TData> = ApolloClient.MutateOptions<\n  TData,\n  any,\n  any\n>[\"updateQueries\"];\n\nconst IGNORE = {} as IgnoreModifier;\n\nexport const enum CacheWriteBehavior {\n  FORBID,\n  OVERWRITE,\n  MERGE,\n}\n\ninterface LastWrite {\n  result: FormattedExecutionResult<any>;\n  variables: ApolloClient.WatchQueryOptions[\"variables\"];\n  dmCount: number | undefined;\n}\n\nconst destructiveMethodCounts = new WeakMap<ApolloCache, number>();\n\ninterface OperationInfo<\n  TData,\n  TVariables extends OperationVariables,\n  AllowedCacheWriteBehavior = CacheWriteBehavior,\n> {\n  document: DocumentNode | TypedDocumentNode<TData, TVariables>;\n  variables: TVariables;\n  errorPolicy: ErrorPolicy;\n  cacheWriteBehavior: AllowedCacheWriteBehavior;\n}\n\nfunction wrapDestructiveCacheMethod(\n  cache: ApolloCache,\n  methodName: \"evict\" | \"modify\" | \"reset\"\n) {\n  const original = cache[methodName];\n  if (typeof original === \"function\") {\n    // @ts-expect-error this is just too generic to be typed correctly\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(\n        cache,\n        // The %1e15 allows the count to wrap around to 0 safely every\n        // quadrillion evictions, so there's no risk of overflow. To be\n        // clear, this is more of a pedantic principle than something\n        // that matters in any conceivable practical scenario.\n        (destructiveMethodCounts.get(cache)! + 1) % 1e15\n      );\n      // @ts-expect-error this is just too generic to be typed correctly\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nconst queryInfoIds = new WeakMap<QueryManager, number>();\n\n// A QueryInfo object represents a single network request, either initiated\n// from the QueryManager or from an ObservableQuery.\n// It will only ever be used for a single network call.\n// It is responsible for reporting results to the cache, merging and in a no-cache\n// scenario accumulating the response.\nexport class QueryInfo<\n  TData,\n  TVariables extends OperationVariables = OperationVariables,\n  TCache extends ApolloCache = ApolloCache,\n> {\n  // TODO remove soon - this should be able to be handled by cancelling old operations before starting new ones\n  lastRequestId = 1;\n\n  private cache: TCache;\n  private queryManager: Pick<\n    QueryManager,\n    | \"getObservableQueries\"\n    | \"refetchQueries\"\n    | \"getDocumentInfo\"\n    | \"broadcastQueries\"\n    | \"incrementalHandler\"\n  >;\n  public readonly id: string;\n  private readonly observableQuery?: ObservableQuery<any, any>;\n  private incremental?: Incremental.IncrementalRequest<\n    Record<string, unknown>,\n    DataValue.Complete<TData> | DataValue.Streaming<TData>\n  >;\n\n  constructor(\n    queryManager: QueryManager,\n    observableQuery?: ObservableQuery<any, any>\n  ) {\n    const cache = (this.cache = queryManager.cache as TCache);\n    const id = (queryInfoIds.get(queryManager) || 0) + 1;\n    queryInfoIds.set(queryManager, id);\n    this.id = id + \"\";\n    this.observableQuery = observableQuery;\n    this.queryManager = queryManager;\n\n    // Track how often cache.evict is called, since we want eviction to\n    // override the feud-stopping logic in the markQueryResult method, by\n    // causing shouldWrite to return true. Wrapping the cache.evict method\n    // is a bit of a hack, but it saves us from having to make eviction\n    // counting an official part of the ApolloCache API.\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  /**\n   * @internal\n   * For feud-preventing behaviour, `lastWrite` should be shared by all `QueryInfo` instances of an `ObservableQuery`.\n   * In the case of a standalone `QueryInfo`, we will keep a local version.\n   */\n  public _lastWrite?: LastWrite;\n  private get lastWrite(): LastWrite | undefined {\n    return (this.observableQuery || this)._lastWrite as LastWrite | undefined;\n  }\n  private set lastWrite(value: LastWrite | undefined) {\n    (this.observableQuery || this)._lastWrite = value;\n  }\n\n  public resetLastWrite() {\n    this.lastWrite = void 0;\n  }\n\n  private shouldWrite(\n    result: FormattedExecutionResult<any>,\n    variables: ApolloClient.WatchQueryOptions[\"variables\"]\n  ) {\n    const { lastWrite } = this;\n    return !(\n      lastWrite &&\n      // If cache.evict has been called since the last time we wrote this\n      // data into the cache, there's a chance writing this result into\n      // the cache will repair what was evicted.\n      lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n      equal(variables, lastWrite.variables) &&\n      equal(result.data, lastWrite.result.data)\n    );\n  }\n\n  get hasNext() {\n    return this.incremental ? this.incremental.hasNext : false;\n  }\n\n  private maybeHandleIncrementalResult(\n    cacheData: TData | DeepPartial<TData> | undefined | null,\n    incoming: ApolloLink.Result<TData>,\n    query: DocumentNode\n  ): FormattedExecutionResult<\n    DataValue.Complete<TData> | DataValue.Streaming<TData>\n  > {\n    const { incrementalHandler } = this.queryManager;\n\n    if (incrementalHandler.isIncrementalResult(incoming)) {\n      this.incremental ||= incrementalHandler.startRequest<\n        TData & Record<string, unknown>\n      >({\n        query,\n      }) as Incremental.IncrementalRequest<\n        Record<string, unknown>,\n        DataValue.Complete<TData> | DataValue.Streaming<TData>\n      >;\n\n      return this.incremental.handle(cacheData, incoming);\n    }\n    return incoming;\n  }\n\n  public markQueryResult(\n    incoming: ApolloLink.Result<TData>,\n    {\n      document: query,\n      variables,\n      errorPolicy,\n      cacheWriteBehavior,\n    }: OperationInfo<TData, TVariables>\n  ): FormattedExecutionResult<\n    DataValue.Complete<TData> | DataValue.Streaming<TData>\n  > {\n    const diffOptions = {\n      query,\n      variables,\n      returnPartialData: true,\n      optimistic: true,\n    };\n\n    // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n    // requests. To allow future notify timeouts, diff and dirty are reset as well.\n    this.observableQuery?.[\"resetNotifications\"]();\n\n    const skipCache = cacheWriteBehavior === CacheWriteBehavior.FORBID;\n    const lastDiff =\n      skipCache ? undefined : this.cache.diff<TData>(diffOptions);\n\n    let result = this.maybeHandleIncrementalResult(\n      lastDiff?.result,\n      incoming,\n      query\n    );\n    if (skipCache) {\n      return result;\n    }\n\n    if (shouldWriteResult(result, errorPolicy)) {\n      // Using a transaction here so we have a chance to read the result\n      // back from the cache before the watch callback fires as a result\n      // of writeQuery, so we can store the new diff quietly and ignore\n      // it when we receive it redundantly from the watch callback.\n      this.cache.batch({\n        onWatchUpdated: (\n          // all additional options on ObservableQuery.CacheWatchOptions are\n          // optional so we can use the type here\n          watch: ObservableQuery.CacheWatchOptions,\n          diff\n        ) => {\n          if (watch.watcher === this.observableQuery) {\n            // see comment on `lastOwnDiff` for explanation\n            watch.lastOwnDiff = diff;\n          }\n        },\n        update: (cache) => {\n          if (this.shouldWrite(result, variables)) {\n            cache.writeQuery({\n              query,\n              data: result.data as Unmasked<any>,\n              variables,\n              overwrite: cacheWriteBehavior === CacheWriteBehavior.OVERWRITE,\n            });\n\n            this.lastWrite = {\n              result,\n              variables,\n              dmCount: destructiveMethodCounts.get(this.cache),\n            };\n          } else {\n            // If result is the same as the last result we received from\n            // the network (and the variables match too), avoid writing\n            // result into the cache again. The wisdom of skipping this\n            // cache write is far from obvious, since any cache write\n            // could be the one that puts the cache back into a desired\n            // state, fixing corruption or missing data. However, if we\n            // always write every network result into the cache, we enable\n            // feuds between queries competing to update the same data in\n            // incompatible ways, which can lead to an endless cycle of\n            // cache broadcasts and useless network requests. As with any\n            // feud, eventually one side must step back from the brink,\n            // letting the other side(s) have the last word(s). There may\n            // be other points where we could break this cycle, such as\n            // silencing the broadcast for cache.writeQuery (not a good\n            // idea, since it just delays the feud a bit) or somehow\n            // avoiding the network request that just happened (also bad,\n            // because the server could return useful new data). All\n            // options considered, skipping this cache write seems to be\n            // the least damaging place to break the cycle, because it\n            // reflects the intuition that we recently wrote this exact\n            // result into the cache, so the cache *should* already/still\n            // contain this data. If some other query has clobbered that\n            // data in the meantime, that's too bad, but there will be no\n            // winners if every query blindly reverts to its own version\n            // of the data. This approach also gives the network a chance\n            // to return new data, which will be written into the cache as\n            // usual, notifying only those queries that are directly\n            // affected by the cache updates, as usual. In the future, an\n            // even more sophisticated cache could perhaps prevent or\n            // mitigate the clobbering somehow, but that would make this\n            // particular cache write even less important, and thus\n            // skipping it would be even safer than it is today.\n            if (lastDiff && lastDiff.complete) {\n              // Reuse data from the last good (complete) diff that we\n              // received, when possible.\n              result = { ...result, data: lastDiff.result };\n              return;\n            }\n            // If the previous this.diff was incomplete, fall through to\n            // re-reading the latest data with cache.diff, below.\n          }\n\n          const diff = cache.diff<TData>(diffOptions);\n\n          // If we're allowed to write to the cache, and we can read a\n          // complete result from the cache, update result.data to be the\n          // result from the cache, rather than the raw network result.\n          // Set without setDiff to avoid triggering a notify call, since\n          // we have other ways of notifying for this result.\n          if (diff.complete) {\n            result = { ...result, data: diff.result };\n          }\n        },\n      });\n    } else {\n      this.lastWrite = void 0;\n    }\n\n    return result;\n  }\n\n  public markMutationResult(\n    incoming: ApolloLink.Result<TData>,\n    mutation: OperationInfo<\n      TData,\n      TVariables,\n      CacheWriteBehavior.FORBID | CacheWriteBehavior.MERGE\n    > & {\n      context?: DefaultContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TCache>;\n      awaitRefetchQueries?: boolean;\n      refetchQueries?:\n        | ((\n            result: NormalizedExecutionResult<Unmasked<TData>>\n          ) => InternalRefetchQueriesInclude)\n        | InternalRefetchQueriesInclude;\n      removeOptimistic?: string;\n      onQueryUpdated?: OnQueryUpdated<any>;\n      keepRootFields?: boolean;\n    },\n    cache = this.cache\n  ): Promise<\n    FormattedExecutionResult<\n      DataValue.Complete<TData> | DataValue.Streaming<TData>\n    >\n  > {\n    const cacheWrites: Cache.WriteOptions[] = [];\n    const skipCache = mutation.cacheWriteBehavior === CacheWriteBehavior.FORBID;\n\n    let result = this.maybeHandleIncrementalResult(\n      skipCache ? undefined : (\n        cache.diff<TData>({\n          id: \"ROOT_MUTATION\",\n          // The cache complains if passed a mutation where it expects a\n          // query, so we transform mutations and subscriptions to queries\n          // (only once, thanks to this.transformCache).\n          query: this.queryManager.getDocumentInfo(mutation.document).asQuery,\n          variables: mutation.variables,\n          optimistic: false,\n          returnPartialData: true,\n        }).result\n      ),\n      incoming,\n      mutation.document\n    );\n\n    if (mutation.errorPolicy === \"ignore\") {\n      result = { ...result, errors: [] };\n    }\n\n    if (graphQLResultHasError(result) && mutation.errorPolicy === \"none\") {\n      return Promise.resolve(result);\n    }\n\n    const getResultWithDataState = () =>\n      ({\n        ...result,\n        dataState: this.hasNext ? \"streaming\" : \"complete\",\n      }) as NormalizedExecutionResult<Unmasked<TData>>;\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      cacheWrites.push({\n        result: result.data,\n        dataId: \"ROOT_MUTATION\",\n        query: mutation.document,\n        variables: mutation.variables,\n      });\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        this.queryManager\n          .getObservableQueries(\"all\")\n          .forEach((observableQuery) => {\n            const queryName = observableQuery && observableQuery.queryName;\n            if (\n              !queryName ||\n              !Object.hasOwnProperty.call(updateQueries, queryName)\n            ) {\n              return;\n            }\n            const updater = updateQueries[queryName];\n            const { query: document, variables } = observableQuery;\n\n            // Read the current query result from the store.\n            const { result: currentQueryResult, complete } =\n              observableQuery.getCacheDiff({ optimistic: false });\n\n            if (complete && currentQueryResult) {\n              // Run our reducer using the current query result and the mutation result.\n              const nextQueryResult = (updater as MutationQueryReducer<any>)(\n                currentQueryResult,\n                {\n                  mutationResult: getResultWithDataState(),\n                  queryName: (document && getOperationName(document)) || void 0,\n                  queryVariables: variables!,\n                }\n              );\n\n              // Write the modified result back into the store if we got a new result.\n              if (nextQueryResult) {\n                cacheWrites.push({\n                  result: nextQueryResult,\n                  dataId: \"ROOT_QUERY\",\n                  query: document!,\n                  variables,\n                });\n              }\n            }\n          });\n      }\n    }\n\n    let refetchQueries = mutation.refetchQueries;\n    if (typeof refetchQueries === \"function\") {\n      refetchQueries = refetchQueries(getResultWithDataState());\n    }\n\n    if (\n      cacheWrites.length > 0 ||\n      (refetchQueries || \"\").length > 0 ||\n      mutation.update ||\n      mutation.onQueryUpdated ||\n      mutation.removeOptimistic\n    ) {\n      const results: any[] = [];\n\n      this.queryManager\n        .refetchQueries({\n          updateCache: (cache) => {\n            if (!skipCache) {\n              cacheWrites.forEach((write) => cache.write(write));\n            }\n\n            // If the mutation has some writes associated with it then we need to\n            // apply those writes to the store by running this reducer again with\n            // a write action.\n            const { update } = mutation;\n            // Determine whether result is a SingleExecutionResult,\n            // or the final ExecutionPatchResult.\n\n            if (update) {\n              if (!skipCache) {\n                // Re-read the ROOT_MUTATION data we just wrote into the cache\n                // (the first cache.write call in the cacheWrites.forEach loop\n                // above), so field read functions have a chance to run for\n                // fields within mutation result objects.\n                const diff = cache.diff<TData>({\n                  id: \"ROOT_MUTATION\",\n                  // The cache complains if passed a mutation where it expects a\n                  // query, so we transform mutations and subscriptions to queries\n                  // (only once, thanks to this.transformCache).\n                  query: this.queryManager.getDocumentInfo(mutation.document)\n                    .asQuery,\n                  variables: mutation.variables,\n                  optimistic: false,\n                  returnPartialData: true,\n                });\n\n                if (diff.complete) {\n                  result = {\n                    ...result,\n                    data: diff.result,\n                  };\n                }\n              }\n\n              // If we've received the whole response, call the update function.\n              if (!this.hasNext) {\n                update(\n                  cache as TCache,\n                  result as FormattedExecutionResult<Unmasked<TData>>,\n                  {\n                    context: mutation.context,\n                    variables: mutation.variables,\n                  }\n                );\n              }\n            }\n\n            // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n            // shallow to allow rolling back optimistic evictions.\n            if (!skipCache && !mutation.keepRootFields && !this.hasNext) {\n              cache.modify({\n                id: \"ROOT_MUTATION\",\n                fields(value, { fieldName, DELETE }) {\n                  return fieldName === \"__typename\" ? value : DELETE;\n                },\n              });\n            }\n          },\n\n          include: refetchQueries,\n\n          // Write the final mutation.result to the root layer of the cache.\n          optimistic: false,\n\n          // Remove the corresponding optimistic layer at the same time as we\n          // write the final non-optimistic result.\n          removeOptimistic: mutation.removeOptimistic,\n\n          // Let the caller of client.mutate optionally determine the refetching\n          // behavior for watched queries after the mutation.update function runs.\n          // If no onQueryUpdated function was provided for this mutation, pass\n          // null instead of undefined to disable the default refetching behavior.\n          onQueryUpdated: mutation.onQueryUpdated || null,\n        })\n        .forEach((result) => results.push(result));\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results).then(() => result);\n      }\n    }\n\n    return Promise.resolve(result);\n  }\n\n  public markMutationOptimistic(\n    optimisticResponse: any,\n    mutation: OperationInfo<\n      TData,\n      TVariables,\n      CacheWriteBehavior.FORBID | CacheWriteBehavior.MERGE\n    > & {\n      context?: DefaultContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TCache>;\n      keepRootFields?: boolean;\n    }\n  ) {\n    const data =\n      typeof optimisticResponse === \"function\" ?\n        optimisticResponse(mutation.variables, { IGNORE })\n      : optimisticResponse;\n\n    if (data === IGNORE) {\n      return false;\n    }\n\n    this.cache.recordOptimisticTransaction((cache) => {\n      try {\n        this.markMutationResult({ data }, mutation, cache as TCache);\n      } catch (error) {\n        invariant.error(error);\n      }\n    }, this.id);\n\n    return true;\n  }\n\n  public markSubscriptionResult(\n    result: FormattedExecutionResult<TData>,\n    {\n      document,\n      variables,\n      errorPolicy,\n      cacheWriteBehavior,\n    }: OperationInfo<\n      TData,\n      TVariables,\n      CacheWriteBehavior.FORBID | CacheWriteBehavior.MERGE\n    >\n  ) {\n    if (cacheWriteBehavior !== CacheWriteBehavior.FORBID) {\n      if (shouldWriteResult(result, errorPolicy)) {\n        this.cache.write({\n          query: document,\n          result: result.data as any,\n          dataId: \"ROOT_SUBSCRIPTION\",\n          variables: variables,\n        });\n      }\n\n      this.queryManager.broadcastQueries();\n    }\n  }\n}\n\nfunction shouldWriteResult<T>(\n  result: FormattedExecutionResult<T>,\n  errorPolicy: ErrorPolicy = \"none\"\n) {\n  const ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n  let writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}\n","import type { EnumValueNode, NameNode, ValueNode } from \"graphql\";\nimport { Kind } from \"graphql\";\n\nimport { newInvariantError } from \"@apollo/client/utilities/invariant\";\n\n/** @internal */\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object\n) {\n  if (value.kind === Kind.INT || value.kind === Kind.FLOAT) {\n    argObj[name.value] = Number(value.value);\n  } else if (value.kind === Kind.BOOLEAN || value.kind === Kind.STRING) {\n    argObj[name.value] = value.value;\n  } else if (value.kind === Kind.OBJECT) {\n    const nestedArgObj = {};\n    value.fields.map((obj) =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables)\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (value.kind === Kind.VARIABLE) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (value.kind === Kind.LIST) {\n    argObj[name.value] = value.values.map((listValue) => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (value.kind === Kind.ENUM) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (value.kind === Kind.NULL) {\n    argObj[name.value] = null;\n  } else {\n    throw newInvariantError(\n      `The inline argument \"%s\" of kind \"%s\"` +\n        \"is not supported. Use variables instead of inline arguments to \" +\n        \"overcome this limitation.\",\n      name.value,\n      (value as any).kind\n    );\n  }\n}\n","import type { DocumentNode, OperationDefinitionNode } from \"graphql\";\n\nimport { checkDocument } from \"./checkDocument.js\";\n\n/** @internal */\nexport function getOperationDefinition(\n  doc: DocumentNode\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    (definition): definition is OperationDefinitionNode =>\n      definition.kind === \"OperationDefinition\"\n  )[0];\n}\n","import type { FragmentSpreadNode } from \"graphql\";\nimport { Kind } from \"graphql\";\nimport { Slot } from \"optimism\";\n\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\n// Contextual slot that allows us to disable accessor warnings on fields when in\n// migrate mode.\n/** @internal */\nexport const disableWarningsSlot = new Slot<boolean>();\n\nexport function getFragmentMaskMode(\n  fragment: FragmentSpreadNode\n): \"mask\" | \"migrate\" | \"unmask\" {\n  const directive = fragment.directives?.find(\n    ({ name }) => name.value === \"unmask\"\n  );\n\n  if (!directive) {\n    return \"mask\";\n  }\n\n  const modeArg = directive.arguments?.find(\n    ({ name }) => name.value === \"mode\"\n  );\n\n  if (__DEV__) {\n    if (modeArg) {\n      if (modeArg.value.kind === Kind.VARIABLE) {\n        invariant.warn(\"@unmask 'mode' argument does not support variables.\");\n      } else if (modeArg.value.kind !== Kind.STRING) {\n        invariant.warn(\"@unmask 'mode' argument must be of type string.\");\n      } else if (modeArg.value.value !== \"migrate\") {\n        invariant.warn(\n          \"@unmask 'mode' argument does not recognize value '%s'.\",\n          modeArg.value.value\n        );\n      }\n    }\n  }\n\n  if (\n    modeArg &&\n    \"value\" in modeArg.value &&\n    modeArg.value.value === \"migrate\"\n  ) {\n    return \"migrate\";\n  }\n\n  return \"unmask\";\n}\n","import type {\n  ASTNode,\n  ASTVisitFn,\n  DirectiveNode,\n  DocumentNode,\n  FieldNode,\n  FragmentDefinitionNode,\n  FragmentSpreadNode,\n  InlineFragmentNode,\n  OperationDefinitionNode,\n} from \"graphql\";\nimport { Kind, visit } from \"graphql\";\n\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport { checkDocument } from \"./checkDocument.js\";\nimport { createFragmentMap } from \"./createFragmentMap.js\";\nimport { getFragmentDefinition } from \"./getFragmentDefinition.js\";\nimport { getFragmentDefinitions } from \"./getFragmentDefinitions.js\";\nimport { getOperationDefinition } from \"./getOperationDefinition.js\";\nimport { isArray } from \"./isArray.js\";\nimport { isNonEmptyArray } from \"./isNonEmptyArray.js\";\nimport type { FragmentMap } from \"./types/FragmentMap.js\";\n\n// https://github.com/graphql/graphql-js/blob/8d7c8fccf5a9846a50785de04abda58a7eb13fc0/src/language/visitor.ts#L20-L23\ninterface EnterLeaveVisitor<TVisitedNode extends ASTNode> {\n  readonly enter?: ASTVisitFn<TVisitedNode>;\n  readonly leave?: ASTVisitFn<TVisitedNode>;\n}\n\ntype RemoveDirectiveConfig = {\n  name?: string;\n  test?: (node: DirectiveNode) => boolean;\n  remove?: boolean;\n};\n\n/** @internal */\nexport function removeDirectivesFromDocument(\n  directives: RemoveDirectiveConfig[],\n  doc: DocumentNode\n): DocumentNode | null {\n  checkDocument(doc);\n\n  // Passing empty strings to makeInUseGetterFunction means we handle anonymous\n  // operations as if their names were \"\". Anonymous fragment definitions are\n  // not supposed to be possible, but the same default naming strategy seems\n  // appropriate for that case as well.\n  const getInUseByOperationName = makeInUseGetterFunction<string>(\"\");\n  const getInUseByFragmentName = makeInUseGetterFunction<string>(\"\");\n  const getInUse = (\n    ancestors: readonly (ASTNode | readonly ASTNode[])[]\n  ): InternalInUseInfo | null => {\n    for (\n      let p = 0, ancestor: ASTNode | readonly ASTNode[];\n      p < ancestors.length && (ancestor = ancestors[p]);\n      ++p\n    ) {\n      if (isArray(ancestor)) continue;\n      if (ancestor.kind === Kind.OPERATION_DEFINITION) {\n        // If an operation is anonymous, we use the empty string as its key.\n        return getInUseByOperationName(ancestor.name && ancestor.name.value);\n      }\n      if (ancestor.kind === Kind.FRAGMENT_DEFINITION) {\n        return getInUseByFragmentName(ancestor.name.value);\n      }\n    }\n    invariant.error(`Could not find operation or fragment`);\n    return null;\n  };\n\n  let operationCount = 0;\n  for (let i = doc.definitions.length - 1; i >= 0; --i) {\n    if (doc.definitions[i].kind === Kind.OPERATION_DEFINITION) {\n      ++operationCount;\n    }\n  }\n\n  const directiveMatcher = getDirectiveMatcher(directives);\n  const shouldRemoveField = (nodeDirectives: FieldNode[\"directives\"]) =>\n    isNonEmptyArray(nodeDirectives) &&\n    nodeDirectives\n      .map(directiveMatcher)\n      .some(\n        (config: RemoveDirectiveConfig | undefined) => config && config.remove\n      );\n\n  const originalFragmentDefsByPath = new Map<string, FragmentDefinitionNode>();\n\n  // Any time the first traversal of the document below makes a change like\n  // removing a fragment (by returning null), this variable should be set to\n  // true. Once it becomes true, it should never be set to false again. If this\n  // variable remains false throughout the traversal, then we can return the\n  // original doc immediately without any modifications.\n  let firstVisitMadeChanges = false;\n\n  const fieldOrInlineFragmentVisitor: EnterLeaveVisitor<\n    FieldNode | InlineFragmentNode\n  > = {\n    enter(node) {\n      if (shouldRemoveField(node.directives)) {\n        firstVisitMadeChanges = true;\n        return null;\n      }\n    },\n  };\n\n  const docWithoutDirectiveSubtrees = visit(doc, {\n    // These two AST node types share the same implementation, defined above.\n    Field: fieldOrInlineFragmentVisitor,\n    InlineFragment: fieldOrInlineFragmentVisitor,\n\n    VariableDefinition: {\n      enter() {\n        // VariableDefinition nodes do not count as variables in use, though\n        // they do contain Variable nodes that might be visited below. To avoid\n        // counting variable declarations as usages, we skip visiting the\n        // contents of this VariableDefinition node by returning false.\n        return false;\n      },\n    },\n\n    Variable: {\n      enter(node, _key, _parent, _path, ancestors) {\n        const inUse = getInUse(ancestors);\n        if (inUse) {\n          inUse.variables.add(node.name.value);\n        }\n      },\n    },\n\n    FragmentSpread: {\n      enter(node, _key, _parent, _path, ancestors) {\n        if (shouldRemoveField(node.directives)) {\n          firstVisitMadeChanges = true;\n          return null;\n        }\n        const inUse = getInUse(ancestors);\n        if (inUse) {\n          inUse.fragmentSpreads.add(node.name.value);\n        }\n        // We might like to remove this FragmentSpread by returning null here if\n        // the corresponding FragmentDefinition node is also going to be removed\n        // by the logic below, but we can't control the relative order of those\n        // events, so we have to postpone the removal of dangling FragmentSpread\n        // nodes until after the current visit of the document has finished.\n      },\n    },\n\n    FragmentDefinition: {\n      enter(node, _key, _parent, path) {\n        originalFragmentDefsByPath.set(JSON.stringify(path), node);\n      },\n      leave(node, _key, _parent, path) {\n        const originalNode = originalFragmentDefsByPath.get(\n          JSON.stringify(path)\n        );\n        if (node === originalNode) {\n          // If the FragmentNode received by this leave function is identical to\n          // the one received by the corresponding enter function (above), then\n          // the visitor must not have made any changes within this\n          // FragmentDefinition node. This fragment definition may still be\n          // removed if there are no ...spread references to it, but it won't be\n          // removed just because it has only a __typename field.\n          return node;\n        }\n\n        if (\n          // This logic applies only if the document contains one or more\n          // operations, since removing all fragments from a document containing\n          // only fragments makes the document useless.\n          operationCount > 0 &&\n          node.selectionSet.selections.every(\n            (selection) =>\n              selection.kind === Kind.FIELD &&\n              selection.name.value === \"__typename\"\n          )\n        ) {\n          // This is a somewhat opinionated choice: if a FragmentDefinition ends\n          // up having no fields other than __typename, we remove the whole\n          // fragment definition, and later prune ...spread references to it.\n          getInUseByFragmentName(node.name.value).removed = true;\n          firstVisitMadeChanges = true;\n          return null;\n        }\n      },\n    },\n\n    Directive: {\n      leave(node) {\n        // If a matching directive is found, remove the directive itself. Note\n        // that this does not remove the target (field, argument, etc) of the\n        // directive, but only the directive itself.\n        if (directiveMatcher(node)) {\n          firstVisitMadeChanges = true;\n          return null;\n        }\n      },\n    },\n  });\n\n  if (!firstVisitMadeChanges) {\n    // If our first pass did not change anything about the document, then there\n    // is no cleanup we need to do, and we can return the original doc.\n    return doc;\n  }\n\n  // Utility for making sure inUse.transitiveVars is recursively populated.\n  // Because this logic assumes inUse.fragmentSpreads has been completely\n  // populated and inUse.removed has been set if appropriate,\n  // populateTransitiveVars must be called after that information has been\n  // collected by the first traversal of the document.\n  const populateTransitiveVars = (inUse: InternalInUseInfo) => {\n    if (!inUse.transitiveVars) {\n      inUse.transitiveVars = new Set(inUse.variables);\n      if (!inUse.removed) {\n        inUse.fragmentSpreads.forEach((childFragmentName) => {\n          populateTransitiveVars(\n            getInUseByFragmentName(childFragmentName)\n          ).transitiveVars!.forEach((varName) => {\n            inUse.transitiveVars!.add(varName);\n          });\n        });\n      }\n    }\n    return inUse;\n  };\n\n  // Since we've been keeping track of fragment spreads used by particular\n  // operations and fragment definitions, we now need to compute the set of all\n  // spreads used (transitively) by any operations in the document.\n  const allFragmentNamesUsed = new Set<string>();\n  docWithoutDirectiveSubtrees.definitions.forEach((def) => {\n    if (def.kind === Kind.OPERATION_DEFINITION) {\n      populateTransitiveVars(\n        getInUseByOperationName(def.name && def.name.value)\n      ).fragmentSpreads.forEach((childFragmentName) => {\n        allFragmentNamesUsed.add(childFragmentName);\n      });\n    } else if (\n      def.kind === Kind.FRAGMENT_DEFINITION &&\n      // If there are no operations in the document, then all fragment\n      // definitions count as usages of their own fragment names. This heuristic\n      // prevents accidentally removing all fragment definitions from the\n      // document just because it contains no operations that use the fragments.\n      operationCount === 0 &&\n      !getInUseByFragmentName(def.name.value).removed\n    ) {\n      allFragmentNamesUsed.add(def.name.value);\n    }\n  });\n  // Now that we have added all fragment spreads used by operations to the\n  // allFragmentNamesUsed set, we can complete the set by transitively adding\n  // all fragment spreads used by those fragments, and so on.\n  allFragmentNamesUsed.forEach((fragmentName) => {\n    // Once all the childFragmentName strings added here have been seen already,\n    // the top-level allFragmentNamesUsed.forEach loop will terminate.\n    populateTransitiveVars(\n      getInUseByFragmentName(fragmentName)\n    ).fragmentSpreads.forEach((childFragmentName) => {\n      allFragmentNamesUsed.add(childFragmentName);\n    });\n  });\n\n  const fragmentWillBeRemoved = (fragmentName: string) =>\n    !!(\n      // A fragment definition will be removed if there are no spreads that refer\n      // to it, or the fragment was explicitly removed because it had no fields\n      // other than __typename.\n      (\n        !allFragmentNamesUsed.has(fragmentName) ||\n        getInUseByFragmentName(fragmentName).removed\n      )\n    );\n\n  const enterVisitor: EnterLeaveVisitor<\n    FragmentSpreadNode | FragmentDefinitionNode\n  > = {\n    enter(node) {\n      if (fragmentWillBeRemoved(node.name.value)) {\n        return null;\n      }\n    },\n  };\n\n  return nullIfDocIsEmpty(\n    visit(docWithoutDirectiveSubtrees, {\n      // If the fragment is going to be removed, then leaving any dangling\n      // FragmentSpread nodes with the same name would be a mistake.\n      FragmentSpread: enterVisitor,\n\n      // This is where the fragment definition is actually removed.\n      FragmentDefinition: enterVisitor,\n\n      OperationDefinition: {\n        leave(node) {\n          // Upon leaving each operation in the depth-first AST traversal, prune\n          // any variables that are declared by the operation but unused within.\n          if (node.variableDefinitions) {\n            const usedVariableNames = populateTransitiveVars(\n              // If an operation is anonymous, we use the empty string as its key.\n              getInUseByOperationName(node.name && node.name.value)\n            ).transitiveVars!;\n\n            // According to the GraphQL spec, all variables declared by an\n            // operation must either be used by that operation or used by some\n            // fragment included transitively into that operation:\n            // https://spec.graphql.org/draft/#sec-All-Variables-Used\n            //\n            // To stay on the right side of this validation rule, if/when we\n            // remove the last $var references from an operation or its fragments,\n            // we must also remove the corresponding $var declaration from the\n            // enclosing operation. This pruning applies only to operations and\n            // not fragment definitions, at the moment. Fragments may be able to\n            // declare variables eventually, but today they can only consume them.\n            if (usedVariableNames.size < node.variableDefinitions.length) {\n              return {\n                ...node,\n                variableDefinitions: node.variableDefinitions.filter((varDef) =>\n                  usedVariableNames.has(varDef.variable.name.value)\n                ),\n              };\n            }\n          }\n        },\n      },\n    })\n  );\n}\n\n// Helper interface and function used by removeDirectivesFromDocument to keep\n// track of variable references and fragments spreads found within a given\n// operation or fragment definition.\ninterface InternalInUseInfo {\n  variables: Set<string>;\n  fragmentSpreads: Set<string>;\n  // Set to true when we deliberately remove a fragment definition, so we can\n  // make sure also to remove dangling ...spreads that refer to it.\n  removed?: boolean;\n  // Populated by the populateTransitiveVars helper function below.\n  transitiveVars?: Set<string>;\n}\n\nfunction makeInUseGetterFunction<TKey>(defaultKey: TKey) {\n  const map = new Map<TKey, InternalInUseInfo>();\n\n  return function inUseGetterFunction(\n    key: TKey = defaultKey\n  ): InternalInUseInfo {\n    let inUse = map.get(key);\n    if (!inUse) {\n      map.set(\n        key,\n        (inUse = {\n          // Variable and fragment spread names used directly within this\n          // operation or fragment definition, as identified by key. These sets\n          // will be populated during the first traversal of the document in\n          // removeDirectivesFromDocument below.\n          variables: new Set(),\n          fragmentSpreads: new Set(),\n        })\n      );\n    }\n    return inUse;\n  };\n}\n\ntype GetDirectiveConfig = {\n  name?: string;\n  test?: (node: DirectiveNode) => boolean;\n};\n\nfunction getDirectiveMatcher(\n  configs: (RemoveDirectiveConfig | GetDirectiveConfig)[]\n) {\n  const names = new Map<string, RemoveDirectiveConfig | GetDirectiveConfig>();\n\n  const tests = new Map<\n    (directive: DirectiveNode) => boolean,\n    RemoveDirectiveConfig | GetDirectiveConfig\n  >();\n\n  configs.forEach((directive) => {\n    if (directive) {\n      if (directive.name) {\n        names.set(directive.name, directive);\n      } else if (directive.test) {\n        tests.set(directive.test, directive);\n      }\n    }\n  });\n\n  return (directive: DirectiveNode) => {\n    let config = names.get(directive.name.value);\n    if (!config && tests.size) {\n      tests.forEach((testConfig, test) => {\n        if (test(directive)) {\n          config = testConfig;\n        }\n      });\n    }\n    return config;\n  };\n}\n\nfunction isEmpty(\n  op: OperationDefinitionNode | FragmentDefinitionNode,\n  fragmentMap: FragmentMap\n): boolean {\n  return (\n    !op ||\n    op.selectionSet.selections.every(\n      (selection) =>\n        selection.kind === Kind.FRAGMENT_SPREAD &&\n        isEmpty(fragmentMap[selection.name.value], fragmentMap)\n    )\n  );\n}\n\nfunction nullIfDocIsEmpty(doc: DocumentNode) {\n  return (\n      isEmpty(\n        getOperationDefinition(doc) || getFragmentDefinition(doc),\n        createFragmentMap(getFragmentDefinitions(doc))\n      )\n    ) ?\n      null\n    : doc;\n}\n","import type { DocumentNode } from \"graphql\";\n\nimport { isNonNullObject } from \"./isNonNullObject.js\";\n\n/** @internal */\nexport function isDocumentNode(value: unknown): value is DocumentNode {\n  return (\n    isNonNullObject(value) &&\n    (value as DocumentNode).kind === \"Document\" &&\n    Array.isArray((value as DocumentNode).definitions)\n  );\n}\n","import { maybe } from \"./maybe.js\";\n\nexport default (maybe(() => globalThis) ||\n  maybe(() => window) ||\n  maybe(() => self) ||\n  maybe(() => global) ||\n  // We don't expect the Function constructor ever to be invoked at runtime, as\n  // long as at least one of globalThis, window, self, or global is defined, so\n  // we are under no obligation to make it easy for static analysis tools to\n  // detect syntactic usage of the Function constructor. If you think you can\n  // improve your static analysis to detect this obfuscation, think again. This\n  // is an arms race you cannot win, at least not in JavaScript.\n  maybe(function () {\n    return maybe.constructor(\"return this\")();\n  })) as typeof globalThis & Window;\n","import type { DocumentNode, OperationDefinitionNode } from \"graphql\";\n\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport { getOperationDefinition } from \"./getOperationDefinition.js\";\n\n/** @internal */\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc)!;\n\n  invariant(\n    queryDef && queryDef.operation === \"query\",\n    \"Must contain a query definition.\"\n  );\n\n  return queryDef;\n}\n","import type { OptimisticWrapperFunction } from \"optimism\";\n\nimport type {\n  ApolloCache,\n  ApolloLink,\n  DocumentTransform,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport type { ApolloClient } from \"@apollo/client\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\n\nimport type { CacheSizes } from \"../caching/sizes.js\";\nimport { cacheSizes, defaultCacheSizes } from \"../caching/sizes.js\";\n\nconst globalCaches: {\n  print?: () => number;\n  canonicalStringify?: () => number;\n} = {};\n\nexport function registerGlobalCache(\n  name: keyof typeof globalCaches,\n  getSize: () => number\n) {\n  globalCaches[name] = getSize;\n}\n\n/**\n * Transformative helper type to turn a function of the form\n *\n * ```ts\n * (this: any) => R;\n * ```\n *\n * into a function of the form\n *\n * ```ts\n * () => R;\n * ```\n *\n * preserving the return type, but removing the `this` parameter.\n *\n * @remarks\n *\n * Further down in the definitions of `_getApolloClientMemoryInternals`,\n * `_getApolloCacheMemoryInternals` and `_getInMemoryCacheMemoryInternals`,\n * having the `this` parameter annotation is extremely useful for type checking\n * inside the function.\n *\n * If this is preserved in the exported types, though, it leads to a situation\n * where `ApolloCache.getMemoryInternals` is a function that requires a `this`\n * of the type `ApolloCache`, while the extending class `InMemoryCache` has a\n * `getMemoryInternals` function that requires a `this` of the type\n * `InMemoryCache`.\n * This is not compatible with TypeScript's inheritence system (although it is\n * perfectly correct), and so TypeScript will complain loudly.\n *\n * We still want to define our functions with the `this` annotation, though,\n * and have the return type inferred.\n * (This requirement for return type inference here makes it impossible to use\n * a function overload that is more explicit on the inner overload than it is\n * on the external overload.)\n *\n * So in the end, we use this helper to remove the `this` annotation from the\n * exported function types, while keeping it in the internal implementation.\n */\ntype RemoveThis<T> = T extends (this: any) => infer R ? () => R : never;\n\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport const getApolloClientMemoryInternals =\n  __DEV__ ?\n    (_getApolloClientMemoryInternals as RemoveThis<\n      typeof _getApolloClientMemoryInternals\n    >)\n  : undefined;\n\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport const getInMemoryCacheMemoryInternals =\n  __DEV__ ?\n    (_getInMemoryCacheMemoryInternals as RemoveThis<\n      typeof _getInMemoryCacheMemoryInternals\n    >)\n  : undefined;\n\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport const getApolloCacheMemoryInternals =\n  __DEV__ ?\n    (_getApolloCacheMemoryInternals as RemoveThis<\n      typeof _getApolloCacheMemoryInternals\n    >)\n  : undefined;\n\nfunction getCurrentCacheSizes() {\n  // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n  const defaults: Record<keyof CacheSizes, number> = {\n    canonicalStringify: defaultCacheSizes[\"canonicalStringify\"],\n    checkDocument: defaultCacheSizes[\"checkDocument\"],\n    print: defaultCacheSizes[\"print\"],\n    \"documentTransform.cache\": defaultCacheSizes[\"documentTransform.cache\"],\n    \"queryManager.getDocumentInfo\":\n      defaultCacheSizes[\"queryManager.getDocumentInfo\"],\n    \"PersistedQueryLink.persistedQueryHashes\":\n      defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"],\n    \"fragmentRegistry.transform\":\n      defaultCacheSizes[\"fragmentRegistry.transform\"],\n    \"fragmentRegistry.lookup\": defaultCacheSizes[\"fragmentRegistry.lookup\"],\n    \"fragmentRegistry.findFragmentSpreads\":\n      defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"],\n    \"cache.fragmentQueryDocuments\":\n      defaultCacheSizes[\"cache.fragmentQueryDocuments\"],\n    \"removeTypenameFromVariables.getVariableDefinitions\":\n      defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"],\n    \"inMemoryCache.maybeBroadcastWatch\":\n      defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"],\n    \"inMemoryCache.executeSelectionSet\":\n      defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"],\n    \"inMemoryCache.executeSubSelectedArray\":\n      defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"],\n  };\n  return Object.fromEntries(\n    Object.entries(defaults).map(([k, v]) => [\n      k,\n      cacheSizes[k as keyof CacheSizes] || v,\n    ])\n  );\n}\n\nfunction _getApolloClientMemoryInternals(this: ApolloClient) {\n  if (!__DEV__) throw new Error(\"only supported in development mode\");\n\n  return {\n    limits: getCurrentCacheSizes(),\n    sizes: {\n      print: globalCaches.print?.(),\n      canonicalStringify: globalCaches.canonicalStringify?.(),\n      links: linkInfo(this.link),\n      queryManager: {\n        getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n        documentTransforms: transformInfo(\n          this[\"queryManager\"].documentTransform\n        ),\n      },\n      ...(this.cache.getMemoryInternals?.() as Partial<\n        ReturnType<typeof _getApolloCacheMemoryInternals>\n      > &\n        Partial<ReturnType<typeof _getInMemoryCacheMemoryInternals>>),\n    },\n  };\n}\n\nfunction _getApolloCacheMemoryInternals(this: ApolloCache) {\n  return {\n    cache: {\n      fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"]),\n    },\n  };\n}\n\nfunction _getInMemoryCacheMemoryInternals(this: InMemoryCache) {\n  const fragments = this.config.fragments as\n    | undefined\n    | {\n        findFragmentSpreads?: Function;\n        transform?: Function;\n        lookup?: Function;\n      };\n\n  return {\n    ..._getApolloCacheMemoryInternals.apply(this as any),\n    addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]),\n    inMemoryCache: {\n      executeSelectionSet: getWrapperInformation(\n        this[\"storeReader\"][\"executeSelectionSet\"]\n      ),\n      executeSubSelectedArray: getWrapperInformation(\n        this[\"storeReader\"][\"executeSubSelectedArray\"]\n      ),\n      maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"]),\n    },\n    fragmentRegistry: {\n      findFragmentSpreads: getWrapperInformation(\n        fragments?.findFragmentSpreads\n      ),\n      lookup: getWrapperInformation(fragments?.lookup),\n      transform: getWrapperInformation(fragments?.transform),\n    },\n  };\n}\n\nfunction isWrapper(f?: Function): f is OptimisticWrapperFunction<any, any> {\n  return !!f && \"dirtyKey\" in f;\n}\n\nfunction getWrapperInformation(f?: Function) {\n  return isWrapper(f) ? f.size : undefined;\n}\n\nfunction isDefined<T>(value: T | undefined | null): value is T {\n  return value != null;\n}\n\nfunction transformInfo(transform?: DocumentTransform) {\n  return recurseTransformInfo(transform).map((cache) => ({ cache }));\n}\n\nfunction recurseTransformInfo(transform?: DocumentTransform): number[] {\n  return transform ?\n      [\n        getWrapperInformation(transform?.[\"performWork\"]),\n        ...recurseTransformInfo(transform?.[\"left\"]),\n        ...recurseTransformInfo(transform?.[\"right\"]),\n      ].filter(isDefined)\n    : [];\n}\n\nfunction linkInfo(link?: ApolloLink): unknown[] {\n  return link ?\n      [\n        link?.getMemoryInternals?.(),\n        ...linkInfo(link?.left),\n        ...linkInfo(link?.right),\n      ].filter(isDefined)\n    : [];\n}\n","import { invariant } from \"@apollo/client/utilities/invariant\";\n\nexport const checkFetcher = (fetcher: typeof fetch | undefined) => {\n  invariant(\n    fetcher || typeof fetch !== \"undefined\",\n    `\n\"fetch\" has not been found globally and no fetcher has been \\\nconfigured. To fix this, install a fetch package (like \\\nhttps://www.npmjs.com/package/cross-fetch), instantiate the \\\nfetcher, and pass it into your HttpLink constructor. For example:\n\nimport fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink } from '@apollo/client';\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: '/graphql', fetch })\n});\n    `\n  );\n};\n","import { canonicalStringify } from \"./canonicalStringify.js\";\n\ntype Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  \"connection\",\n  \"include\",\n  \"skip\",\n  \"client\",\n  \"rest\",\n  \"export\",\n  \"nonreactive\",\n];\n\n// Default stable JSON.stringify implementation used by getStoreKeyName. Can be\n// updated/replaced with something better by calling\n// getStoreKeyName.setStringify(newStringifyFunction).\nlet storeKeyNameStringify: (value: any) => string = canonicalStringify;\n\n/** @internal */\nexport const getStoreKeyName = Object.assign(\n  function (\n    fieldName: string,\n    args?: Record<string, any> | null,\n    directives?: Directives\n  ): string {\n    if (\n      args &&\n      directives &&\n      directives[\"connection\"] &&\n      directives[\"connection\"][\"key\"]\n    ) {\n      if (\n        directives[\"connection\"][\"filter\"] &&\n        (directives[\"connection\"][\"filter\"] as string[]).length > 0\n      ) {\n        const filterKeys =\n          directives[\"connection\"][\"filter\"] ?\n            (directives[\"connection\"][\"filter\"] as string[])\n          : [];\n        filterKeys.sort();\n\n        const filteredArgs = {} as { [key: string]: any };\n        filterKeys.forEach((key) => {\n          filteredArgs[key] = args[key];\n        });\n\n        const stringifiedArgs: string = storeKeyNameStringify(filteredArgs);\n        if (stringifiedArgs !== \"{}\") {\n          return `${directives[\"connection\"][\"key\"]}(${stringifiedArgs})`;\n        }\n      }\n      return directives[\"connection\"][\"key\"];\n    }\n\n    let completeFieldName: string = fieldName;\n\n    if (args) {\n      // We can't use `JSON.stringify` here since it's non-deterministic,\n      // and can lead to different store key names being created even though\n      // the `args` object used during creation has the same properties/values.\n      const stringifiedArgs: string = storeKeyNameStringify(args);\n      if (stringifiedArgs !== \"{}\") {\n        completeFieldName += `(${stringifiedArgs})`;\n      }\n    }\n\n    if (directives) {\n      Object.keys(directives).forEach((key) => {\n        if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n        if (directives[key] && Object.keys(directives[key]).length) {\n          completeFieldName += `@${key}(${storeKeyNameStringify(\n            directives[key]\n          )})`;\n        } else {\n          completeFieldName += `@${key}`;\n        }\n      });\n    }\n\n    return completeFieldName;\n  },\n  {\n    setStringify(s: typeof storeKeyNameStringify) {\n      const previous = storeKeyNameStringify;\n      storeKeyNameStringify = s;\n      return previous;\n    },\n  }\n);\n","import { equal } from \"@wry/equality\";\nimport type { DocumentNode } from \"graphql\";\nimport type {\n  InteropObservable,\n  MonoTypeOperatorFunction,\n  Observer,\n  OperatorFunction,\n  Subscribable,\n  Subscription,\n} from \"rxjs\";\nimport { BehaviorSubject, Observable, share, Subject, tap } from \"rxjs\";\n\nimport type { Cache, MissingFieldError } from \"@apollo/client/cache\";\nimport type { MissingTree } from \"@apollo/client/cache\";\nimport type { MaybeMasked, Unmasked } from \"@apollo/client/masking\";\nimport type { DeepPartial } from \"@apollo/client/utilities\";\nimport { isNetworkRequestInFlight } from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport {\n  compact,\n  equalByQuery,\n  filterMap,\n  getOperationDefinition,\n  getOperationName,\n  getQueryDefinition,\n  preventUnhandledRejection,\n  toQueryResult,\n} from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport type { ApolloClient } from \"./ApolloClient.js\";\nimport { NetworkStatus } from \"./networkStatus.js\";\nimport type { QueryManager } from \"./QueryManager.js\";\nimport type {\n  DataState,\n  DefaultContext,\n  ErrorLike,\n  GetDataState,\n  OperationVariables,\n  QueryNotification,\n  TypedDocumentNode,\n} from \"./types.js\";\nimport type {\n  ErrorPolicy,\n  NextFetchPolicyContext,\n  RefetchWritePolicy,\n  SubscribeToMoreUpdateQueryFn,\n  UpdateQueryMapFn,\n  UpdateQueryOptions,\n  WatchQueryFetchPolicy,\n} from \"./watchQueryOptions.js\";\n\nconst { assign, hasOwnProperty } = Object;\n\ninterface TrackedOperation {\n  /**\n   * This NetworkStatus will be used to override the current networkStatus\n   */\n  override?: NetworkStatus;\n  /**\n   * Will abort tracking the operation from this ObservableQuery and remove it from `activeOperations`\n   */\n  abort: () => void;\n  /**\n   * `query` that was used by the `ObservableQuery` as the \"main query\" at the time the operation was started\n   * This is not necessarily the same query as the query the operation itself is doing.\n   */\n  query: DocumentNode;\n  variables: OperationVariables;\n}\n\nconst uninitialized: ObservableQuery.Result<any> = {\n  loading: true,\n  networkStatus: NetworkStatus.loading,\n  data: undefined,\n  dataState: \"empty\",\n  partial: true,\n};\n\nconst empty: ObservableQuery.Result<any> = {\n  loading: false,\n  networkStatus: NetworkStatus.ready,\n  data: undefined,\n  dataState: \"empty\",\n  partial: true,\n};\n\nconst enum EmitBehavior {\n  /**\n   * Emit will be calculated by the normal rules. (`undefined` will be treated the same as this)\n   */\n  default = 0,\n  /**\n   * This result should always be emitted, even if the result is equal to the\n   * previous result. (e.g. the first value after a `refetch`)\n   */\n  force = 1,\n  /**\n   * Never emit this result, it is only used to update `currentResult`.\n   */\n  never = 2,\n  /**\n   * This is a result carrying only a \"network status change\"/loading state update,\n   * emit according to the `notifyOnNetworkStatusChange` option.\n   */\n  networkStatusChange = 3,\n}\ninterface Meta {\n  shouldEmit?: EmitBehavior;\n  /** can be used to override `ObservableQuery.options.fetchPolicy` for this notification */\n  fetchPolicy?: WatchQueryFetchPolicy;\n}\n\nexport declare namespace ObservableQuery {\n  export type Options<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  > = {\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#fetchPolicy:member} */\n    fetchPolicy: WatchQueryFetchPolicy;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#nextFetchPolicy:member} */\n    nextFetchPolicy?:\n      | WatchQueryFetchPolicy\n      | ((\n          this: ApolloClient.WatchQueryOptions<TData, TVariables>,\n          currentFetchPolicy: WatchQueryFetchPolicy,\n          context: NextFetchPolicyContext<TData, TVariables>\n        ) => WatchQueryFetchPolicy);\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#initialFetchPolicy:member} */\n    initialFetchPolicy: WatchQueryFetchPolicy;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#refetchWritePolicy:member} */\n    refetchWritePolicy?: RefetchWritePolicy;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#errorPolicy:member} */\n    errorPolicy?: ErrorPolicy;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#context:member} */\n    context?: DefaultContext;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#pollInterval:member} */\n    pollInterval?: number;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#notifyOnNetworkStatusChange:member} */\n    notifyOnNetworkStatusChange?: boolean;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#returnPartialData:member} */\n    returnPartialData?: boolean;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#skipPollAttempt:member} */\n    skipPollAttempt?: () => boolean;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#query:member} */\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#variables:member} */\n    variables: TVariables;\n  };\n\n  export type FetchMoreOptions<\n    TData,\n    TVariables extends OperationVariables,\n    TFetchData = TData,\n    TFetchVars extends OperationVariables = TVariables,\n  > = {\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#query:member} */\n    query?: DocumentNode | TypedDocumentNode<TFetchData, TFetchVars>;\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#variables:member} */\n    variables?: Partial<NoInfer<TFetchVars>>;\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#errorPolicy:member} */\n    errorPolicy?: ErrorPolicy;\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#context:member} */\n    context?: DefaultContext;\n    updateQuery?: (\n      previousQueryResult: Unmasked<TData>,\n      options: {\n        fetchMoreResult: Unmasked<TFetchData>;\n        variables: TFetchVars;\n      }\n    ) => Unmasked<TData>;\n  };\n\n  export interface SubscribeToMoreOptions<\n    // eslint-disable-next-line local-rules/tdata-tvariables-order\n    TData = unknown,\n    TSubscriptionVariables extends OperationVariables = OperationVariables,\n    TSubscriptionData = TData,\n    TVariables extends OperationVariables = TSubscriptionVariables,\n  > {\n    document:\n      | DocumentNode\n      | TypedDocumentNode<TSubscriptionData, TSubscriptionVariables>;\n    variables?: TSubscriptionVariables;\n    updateQuery?: SubscribeToMoreUpdateQueryFn<\n      TData,\n      TVariables,\n      TSubscriptionData\n    >;\n    onError?: (error: ErrorLike) => void;\n    context?: DefaultContext;\n  }\n\n  /**\n   * @internal\n   * This describes the `WatchOptions` used by `ObservableQuery` to\n   * subscribe to the cache.\n   */\n  interface CacheWatchOptions<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  > extends Cache.WatchOptions<TData, TVariables> {\n    /**\n     * @internal\n     * We cannot suppress the broadcast completely, since that would\n     * result in external updates to be lost if we go from\n     * (external A) -> (own B) -> (external C) when A and C have the same\n     * value.\n     * Without the `own B` being broadcast, the `cache.watch` would swallow\n     * C.\n     * So instead we track the last \"own diff\" and suppress further processing\n     * in the callback.\n     */\n    lastOwnDiff?: Cache.DiffResult<TData>;\n  }\n\n  export type Result<\n    TData,\n    TStates extends\n      DataState<TData>[\"dataState\"] = DataState<TData>[\"dataState\"],\n  > = {\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#error:member} */\n    error?: ErrorLike;\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#loading:member} */\n    loading: boolean;\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#networkStatus:member} */\n    networkStatus: NetworkStatus;\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#partial:member} */\n    partial: boolean;\n  } & GetDataState<TData, TStates>;\n\n  /**\n   * Promise returned by `reobserve` and `refetch` methods.\n   *\n   * By default, if the `ObservableQuery` is not interested in the result\n   * of this operation anymore, the network operation will be cancelled.\n   *\n   * This has an additional `retain` method that can be used to keep the\n   * network operation running until it is finished nonetheless.\n   */\n  interface ResultPromise<T> extends Promise<T> {\n    /**\n     * Kepp the network operation running until it is finished, even if\n     * `ObservableQuery` unsubscribed from the operation.\n     */\n    retain(): this;\n  }\n\n  export namespace DocumentationTypes {\n    type OperatorFunctionChain<From, To> = [];\n    interface ObservableMethods<TData, OperatorResult> {\n      /** {@inheritDoc @apollo/client!ObservableQuery#pipe:member} */\n      pipe(\n        ...operators: OperatorFunctionChain<\n          ObservableQuery.Result<TData>,\n          OperatorResult\n        >\n      ): Observable<OperatorResult>;\n\n      /** {@inheritDoc @apollo/client!ObservableQuery#subscribe:member} */\n      subscribe(\n        observerOrNext:\n          | Partial<Observer<ObservableQuery.Result<MaybeMasked<TData>>>>\n          | ((value: ObservableQuery.Result<MaybeMasked<TData>>) => void)\n      ): Subscription;\n    }\n  }\n}\n\ninterface SubjectValue<TData, TVariables extends OperationVariables> {\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n  variables: TVariables;\n  result: ObservableQuery.Result<TData>;\n  meta: Meta;\n}\n\nexport class ObservableQuery<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >\n  implements\n    Subscribable<ObservableQuery.Result<MaybeMasked<TData>>>,\n    InteropObservable<ObservableQuery.Result<MaybeMasked<TData>>>\n{\n  public readonly options: ObservableQuery.Options<TData, TVariables>;\n  public readonly queryName?: string;\n\n  /** @internal will be read and written from `QueryInfo` */\n  public _lastWrite?: unknown;\n\n  // The `query` computed property will always reflect the document transformed\n  // by the last run query. `this.options.query` will always reflect the raw\n  // untransformed query to ensure document transforms with runtime conditionals\n  // are run on the original document.\n  public get query(): TypedDocumentNode<TData, TVariables> {\n    return this.lastQuery;\n  }\n\n  /**\n   * An object containing the variables that were provided for the query.\n   */\n  public get variables(): TVariables {\n    return this.options.variables;\n  }\n\n  private unsubscribeFromCache?: {\n    (): void;\n    query: TypedDocumentNode<TData, TVariables>;\n    variables: TVariables;\n  };\n  private input!: Subject<\n    QueryNotification.Value<TData> & {\n      query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n      variables: TVariables;\n      meta: Meta;\n    }\n  >;\n  private subject!: BehaviorSubject<\n    SubjectValue<MaybeMasked<TData>, TVariables>\n  >;\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager;\n  private subscriptions = new Set<Subscription>();\n\n  /**\n   * If an `ObservableQuery` is created with a `network-only` fetch policy,\n   * it should actually start receiving cache updates, but not before it has\n   * received the first result from the network.\n   */\n  private waitForNetworkResult: boolean;\n  private lastQuery: DocumentNode;\n\n  private linkSubscription?: Subscription;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  private get networkStatus(): NetworkStatus {\n    return this.subject.getValue().result.networkStatus;\n  }\n\n  constructor({\n    queryManager,\n    options,\n    transformedQuery = queryManager.transform(options.query),\n  }: {\n    queryManager: QueryManager;\n    options: ApolloClient.WatchQueryOptions<TData, TVariables>;\n    transformedQuery?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    queryId?: string;\n  }) {\n    this.queryManager = queryManager;\n\n    // active state\n    this.waitForNetworkResult = options.fetchPolicy === \"network-only\";\n    this.isTornDown = false;\n\n    this.subscribeToMore = this.subscribeToMore.bind(this);\n    this.maskResult = this.maskResult.bind(this);\n\n    const {\n      watchQuery: { fetchPolicy: defaultFetchPolicy = \"cache-first\" } = {},\n    } = queryManager.defaultOptions;\n\n    const {\n      fetchPolicy = defaultFetchPolicy,\n      // Make sure we don't store \"standby\" as the initialFetchPolicy.\n      initialFetchPolicy = fetchPolicy === \"standby\" ? defaultFetchPolicy : (\n        fetchPolicy\n      ),\n    } = options;\n\n    this.lastQuery = transformedQuery;\n\n    this.options = {\n      ...options,\n\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy,\n\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy,\n      variables: this.getVariablesWithDefaults(options.variables),\n    };\n\n    this.initializeObservablesQueue();\n\n    this[\"@@observable\"] = () => this;\n    if (Symbol.observable) {\n      this[Symbol.observable] = () => this;\n    }\n\n    const opDef = getOperationDefinition(this.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n  }\n\n  private initializeObservablesQueue() {\n    this.subject = new BehaviorSubject<\n      SubjectValue<MaybeMasked<TData>, TVariables>\n    >({\n      query: this.query,\n      variables: this.variables,\n      result: uninitialized,\n      meta: {},\n    });\n    const observable = this.subject.pipe(\n      tap({\n        subscribe: () => {\n          if (!this.subject.observed) {\n            this.reobserve();\n\n            // TODO: See if we can rework updatePolling to better handle this.\n            // reobserve calls updatePolling but this `subscribe` callback is\n            // called before the subject is subscribed to so `updatePolling`\n            // can't accurately detect if there is an active subscription.\n            // Calling it again here ensures that it can detect if it can poll\n            setTimeout(() => this.updatePolling());\n          }\n        },\n        unsubscribe: () => {\n          if (!this.subject.observed) {\n            this.tearDownQuery();\n          }\n        },\n      }),\n      filterMap(\n        (\n          { query, variables, result: current, meta },\n          context: {\n            previous?: ObservableQuery.Result<TData>;\n            previousVariables?: TVariables;\n          }\n        ) => {\n          const { shouldEmit } = meta;\n\n          if (current === uninitialized) {\n            // reset internal state after `ObservableQuery.reset()`\n            context.previous = undefined;\n            context.previousVariables = undefined;\n          }\n          if (\n            this.options.fetchPolicy === \"standby\" ||\n            shouldEmit === EmitBehavior.never\n          )\n            return;\n          if (shouldEmit === EmitBehavior.force) return emit();\n\n          const { previous, previousVariables } = context;\n\n          if (previous) {\n            const documentInfo = this.queryManager.getDocumentInfo(query);\n            const dataMasking = this.queryManager.dataMasking;\n            const maskedQuery =\n              dataMasking ? documentInfo.nonReactiveQuery : query;\n\n            const resultIsEqual =\n              dataMasking || documentInfo.hasNonreactiveDirective ?\n                equalByQuery(maskedQuery, previous, current, variables)\n              : equal(previous, current);\n\n            if (resultIsEqual && equal(previousVariables, variables)) {\n              return;\n            }\n          }\n\n          if (\n            shouldEmit === EmitBehavior.networkStatusChange &&\n            (!this.options.notifyOnNetworkStatusChange ||\n              equal(previous, current))\n          ) {\n            return;\n          }\n          return emit();\n\n          function emit() {\n            context.previous = current;\n            context.previousVariables = variables;\n            return current;\n          }\n        },\n        () => ({})\n      )\n    );\n\n    this.pipe = observable.pipe.bind(observable);\n    this.subscribe = observable.subscribe.bind(observable);\n\n    this.input = new Subject();\n    // we want to feed many streams into `this.subject`, but none of them should\n    // be able to close `this.input`\n    this.input.complete = () => {};\n    this.input.pipe(this.operator).subscribe(this.subject);\n  }\n\n  // We can't use Observable['subscribe'] here as the type as it conflicts with\n  // the ability to infer T from Subscribable<T>. This limits the surface area\n  // to the non-deprecated signature which works properly with type inference.\n  /**\n   * Subscribes to the `ObservableQuery`.\n   * @param observerOrNext - Either an RxJS `Observer` with some or all callback methods,\n   * or the `next` handler that is called for each value emitted from the subscribed Observable.\n   * @returns A subscription reference to the registered handlers.\n   */\n  public subscribe!: (\n    observerOrNext:\n      | Partial<Observer<ObservableQuery.Result<MaybeMasked<TData>>>>\n      | ((value: ObservableQuery.Result<MaybeMasked<TData>>) => void)\n  ) => Subscription;\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   *\n   * @example\n   *\n   * ```ts\n   * import { filter, map } from 'rxjs';\n   *\n   * observableQuery\n   *   .pipe(\n   *     filter(...),\n   *     map(...),\n   *   )\n   *   .subscribe(x => console.log(x));\n   * ```\n   *\n   * @returns The Observable result of all the operators having been called\n   * in the order they were passed in.\n   */\n  public pipe!: Observable<ObservableQuery.Result<MaybeMasked<TData>>>[\"pipe\"];\n\n  public [Symbol.observable]!: () => Subscribable<\n    ObservableQuery.Result<MaybeMasked<TData>>\n  >;\n  public [\"@@observable\"]: () => Subscribable<\n    ObservableQuery.Result<MaybeMasked<TData>>\n  >;\n\n  /**\n   * @internal\n   */\n  public getCacheDiff({ optimistic = true } = {}) {\n    return this.queryManager.cache.diff<TData>({\n      query: this.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic,\n    });\n  }\n\n  private getInitialResult(\n    initialFetchPolicy?: WatchQueryFetchPolicy\n  ): ObservableQuery.Result<MaybeMasked<TData>> {\n    const fetchPolicy =\n      this.queryManager.prioritizeCacheValues ?\n        \"cache-first\"\n      : initialFetchPolicy || this.options.fetchPolicy;\n\n    const cacheResult = (): ObservableQuery.Result<TData> => {\n      const diff = this.getCacheDiff();\n      // TODO: queryInfo.getDiff should handle this since cache.diff returns a\n      // null when returnPartialData is false\n      const data =\n        this.options.returnPartialData || diff.complete ?\n          (diff.result as TData) ?? undefined\n        : undefined;\n\n      return this.maskResult({\n        data,\n        dataState:\n          diff.complete ? \"complete\"\n          : data === undefined ? \"empty\"\n          : \"partial\",\n        loading: !diff.complete,\n        networkStatus:\n          diff.complete ? NetworkStatus.ready : NetworkStatus.loading,\n        partial: !diff.complete,\n      } as ObservableQuery.Result<TData>);\n    };\n\n    switch (fetchPolicy) {\n      case \"cache-only\": {\n        return {\n          ...cacheResult(),\n          loading: false,\n          networkStatus: NetworkStatus.ready,\n        };\n      }\n      case \"cache-first\":\n        return cacheResult();\n      case \"cache-and-network\":\n        return {\n          ...cacheResult(),\n          loading: true,\n          networkStatus: NetworkStatus.loading,\n        };\n      case \"standby\":\n        return empty;\n\n      default:\n        return uninitialized;\n    }\n  }\n\n  private resubscribeCache() {\n    const { variables, fetchPolicy } = this.options;\n    const query = this.query;\n\n    const shouldUnsubscribe =\n      fetchPolicy === \"standby\" ||\n      fetchPolicy === \"no-cache\" ||\n      this.waitForNetworkResult;\n\n    const shouldResubscribe =\n      !isEqualQuery({ query, variables }, this.unsubscribeFromCache) &&\n      !this.waitForNetworkResult;\n\n    if (shouldUnsubscribe || shouldResubscribe) {\n      this.unsubscribeFromCache?.();\n    }\n\n    if (shouldUnsubscribe || !shouldResubscribe) {\n      return;\n    }\n\n    const watch: ObservableQuery.CacheWatchOptions<TData, TVariables> = {\n      query,\n      variables,\n      optimistic: true,\n      watcher: this,\n      callback: (diff) => {\n        const info = this.queryManager.getDocumentInfo(query);\n        if (info.hasClientExports || info.hasForcedResolvers) {\n          // If this is not set to something different than `diff`, we will\n          // not be notified about future cache changes with an equal `diff`.\n          // That would be the case if we are working with client-only fields\n          // that are forced or with `exports` fields that might change, causing\n          // local resovlers to return a new result.\n          // This is based on an implementation detail of `InMemoryCache`, which\n          // is not optimal - but the only alternative to this would be to\n          // resubscribe to the cache asynchonouly, which would bear the risk of\n          // missing further synchronous updates.\n          watch.lastDiff = undefined;\n        }\n        if (watch.lastOwnDiff === diff) {\n          // skip cache updates that were caused by our own writes\n          return;\n        }\n\n        const { result: previousResult } = this.subject.getValue();\n\n        if (\n          !diff.complete &&\n          // If we are trying to deliver an incomplete cache result, we avoid\n          // reporting it if the query has errored, otherwise we let the broadcast try\n          // and repair the partial result by refetching the query. This check avoids\n          // a situation where a query that errors and another succeeds with\n          // overlapping data does not report the partial data result to the errored\n          // query.\n          //\n          // See https://github.com/apollographql/apollo-client/issues/11400 for more\n          // information on this issue.\n          (previousResult.error ||\n            // Prevent to schedule a notify directly after the `ObservableQuery`\n            // has been `reset` (which will set the `previousResult` to `uninitialized` or `empty`)\n            // as in those cases, `resetCache` will manually call `refetch` with more intentional timing.\n            previousResult === uninitialized ||\n            previousResult === empty)\n        ) {\n          return;\n        }\n\n        if (!equal(previousResult.data, diff.result)) {\n          this.scheduleNotify();\n        }\n      },\n    };\n    const cancelWatch = this.queryManager.cache.watch(watch);\n\n    this.unsubscribeFromCache = Object.assign(\n      () => {\n        this.unsubscribeFromCache = undefined;\n        cancelWatch();\n      },\n      { query, variables }\n    );\n  }\n\n  private stableLastResult?: ObservableQuery.Result<MaybeMasked<TData>>;\n  public getCurrentResult(): ObservableQuery.Result<MaybeMasked<TData>> {\n    const { result: current } = this.subject.getValue();\n    let value =\n      (\n        // if the `current` result is in an error state, we will always return that\n        // error state, even if we have no observers\n        current.networkStatus === NetworkStatus.error ||\n        // if we have observers, we are watching the cache and\n        // this.subject.getValue() will always be up to date\n        this.hasObservers() ||\n        // if we are using a `no-cache` fetch policy in which case this\n        // `ObservableQuery` cannot have been updated from the outside - in\n        // that case, we prefer to keep the current value\n        this.options.fetchPolicy === \"no-cache\"\n      ) ?\n        current\n        // otherwise, the `current` value might be outdated due to missed\n        // external updates - calculate it again\n      : this.getInitialResult();\n\n    if (value === uninitialized) {\n      value = this.getInitialResult();\n    }\n    if (!equal(this.stableLastResult, value)) {\n      this.stableLastResult = value;\n    }\n    return this.stableLastResult!;\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * Returns a `ResultPromise` with an additional `.retain()` method. Calling\n   * `.retain()` keeps the network operation running even if the `ObservableQuery`\n   * no longer requires the result.\n   *\n   * Note: `refetch()` guarantees that a value will be emitted from the\n   * observable, even if the result is deep equal to the previous value.\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(\n    variables?: Partial<TVariables>\n  ): ObservableQuery.ResultPromise<ApolloClient.QueryResult<TData>> {\n    const { fetchPolicy } = this.options;\n\n    const reobserveOptions: Partial<\n      ObservableQuery.Options<TData, TVariables>\n    > = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    if (fetchPolicy === \"no-cache\") {\n      reobserveOptions.fetchPolicy = \"no-cache\";\n    } else {\n      reobserveOptions.fetchPolicy = \"network-only\";\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some((v) => v.variable.name.value === \"variables\")) {\n        invariant.warn(\n          `Called refetch(%o) for query %o, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`,\n          variables,\n          queryDef.name?.value || queryDef\n        );\n      }\n    }\n\n    if (variables && !equal(this.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables =\n        this.getVariablesWithDefaults({ ...this.variables, ...variables });\n    }\n\n    this._lastWrite = undefined;\n    return this._reobserve(reobserveOptions, {\n      newNetworkStatus: NetworkStatus.refetch,\n    });\n  }\n\n  /**\n   * A function that helps you fetch the next set of results for a [paginated list field](https://www.apollographql.com/docs/react/pagination/core-api/).\n   */\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars extends OperationVariables = TVariables,\n  >(\n    options: ObservableQuery.FetchMoreOptions<\n      TData,\n      TVariables,\n      TFetchData,\n      TFetchVars\n    >\n  ): Promise<ApolloClient.QueryResult<TFetchData>>;\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars extends OperationVariables = TVariables,\n  >({\n    query,\n    variables,\n    context,\n    errorPolicy,\n    updateQuery,\n  }: ObservableQuery.FetchMoreOptions<\n    TData,\n    TVariables,\n    TFetchData,\n    TFetchVars\n  >): Promise<ApolloClient.QueryResult<TFetchData>> {\n    invariant(\n      this.options.fetchPolicy !== \"cache-only\",\n      \"Cannot execute `fetchMore` for 'cache-only' query '%s'. Please use a different fetch policy.\",\n      getOperationName(this.query, \"(anonymous)\")\n    );\n    const combinedOptions = {\n      ...compact(\n        this.options,\n        { errorPolicy: \"none\" },\n        {\n          query,\n          context,\n          errorPolicy,\n        }\n      ),\n      variables: (query ? variables : (\n        {\n          ...this.variables,\n          ...variables,\n        }\n      )) as TFetchVars,\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n      notifyOnNetworkStatusChange: this.options.notifyOnNetworkStatusChange,\n    } as ApolloClient.QueryOptions<TFetchData, TFetchVars>;\n\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n\n    // If a temporary query is passed to `fetchMore`, we don't want to store\n    // it as the last query result since it may be an optimized query for\n    // pagination. We will however run the transforms on the original document\n    // as well as the document passed in `fetchMoreOptions` to ensure the cache\n    // uses the most up-to-date document which may rely on runtime conditionals.\n    this.lastQuery =\n      query ?\n        this.transformDocument(this.options.query)\n      : combinedOptions.query;\n\n    let wasUpdated = false;\n\n    const isCached = this.options.fetchPolicy !== \"no-cache\";\n\n    if (!isCached) {\n      invariant(\n        updateQuery,\n        \"You must provide an `updateQuery` function when using `fetchMore` with a `no-cache` fetch policy.\"\n      );\n    }\n\n    const { finalize, pushNotification } = this.pushOperation(\n      NetworkStatus.fetchMore\n    );\n    pushNotification(\n      {\n        source: \"newNetworkStatus\",\n        kind: \"N\",\n        value: {},\n      },\n      { shouldEmit: EmitBehavior.networkStatusChange }\n    );\n    return this.queryManager\n      .fetchQuery(combinedOptions, NetworkStatus.fetchMore)\n      .then((fetchMoreResult) => {\n        // disable the `fetchMore` override that is currently active\n        // the next updates caused by this should not be `fetchMore` anymore,\n        // but `ready` or whatever other calculated loading state is currently\n        // appropriate\n        finalize();\n\n        if (isCached) {\n          // Performing this cache update inside a cache.batch transaction ensures\n          // any affected cache.watch watchers are notified at most once about any\n          // updates. Most watchers will be using the QueryInfo class, which\n          // responds to notifications by calling reobserveCacheFirst to deliver\n          // fetchMore cache results back to this ObservableQuery.\n          this.queryManager.cache.batch({\n            update: (cache) => {\n              if (updateQuery) {\n                cache.updateQuery(\n                  {\n                    query: this.query,\n                    variables: this.variables,\n                    returnPartialData: true,\n                    optimistic: false,\n                  },\n                  (previous) =>\n                    updateQuery(previous! as any, {\n                      fetchMoreResult: fetchMoreResult.data as any,\n                      variables: combinedOptions.variables as TFetchVars,\n                    })\n                );\n              } else {\n                // If we're using a field policy instead of updateQuery, the only\n                // thing we need to do is write the new data to the cache using\n                // combinedOptions.variables (instead of this.variables, which is\n                // what this.updateQuery uses, because it works by abusing the\n                // original field value, keyed by the original variables).\n                cache.writeQuery({\n                  query: combinedOptions.query,\n                  variables: combinedOptions.variables,\n                  data: fetchMoreResult.data as Unmasked<any>,\n                });\n              }\n            },\n\n            onWatchUpdated: (watch) => {\n              if (watch.watcher === this) {\n                wasUpdated = true;\n              }\n            },\n          });\n        } else {\n          // There is a possibility `lastResult` may not be set when\n          // `fetchMore` is called which would cause this to crash. This should\n          // only happen if we haven't previously reported a result. We don't\n          // quite know what the right behavior should be here since this block\n          // of code runs after the fetch result has executed on the network.\n          // We plan to let it crash in the meantime.\n          //\n          // If we get bug reports due to the `data` property access on\n          // undefined, this should give us a real-world scenario that we can\n          // use to test against and determine the right behavior. If we do end\n          // up changing this behavior, this may require, for example, an\n          // adjustment to the types on `updateQuery` since that function\n          // expects that the first argument always contains previous result\n          // data, but not `undefined`.\n          const lastResult = this.getCurrentResult();\n          const data = updateQuery!(lastResult.data as Unmasked<TData>, {\n            fetchMoreResult: fetchMoreResult.data as Unmasked<TFetchData>,\n            variables: combinedOptions.variables as TFetchVars,\n          });\n          // was reportResult\n          pushNotification({\n            kind: \"N\",\n            value: {\n              ...lastResult,\n              networkStatus: NetworkStatus.ready,\n              // will be overwritten anyways, just here for types sake\n              loading: false,\n              data: data as any,\n              dataState:\n                lastResult.dataState === \"streaming\" ? \"streaming\" : \"complete\",\n            },\n            source: \"network\",\n          });\n        }\n\n        return this.maskResult(fetchMoreResult);\n      })\n      .finally(() => {\n        // call `finalize` a second time in case the `.then` case above was not reached\n        finalize();\n\n        // In case the cache writes above did not generate a broadcast\n        // notification (which would have been intercepted by onWatchUpdated),\n        // likely because the written data were the same as what was already in\n        // the cache, we still want fetchMore to deliver its final loading:false\n        // result with the unchanged data.\n        if (isCached && !wasUpdated) {\n          pushNotification(\n            {\n              kind: \"N\",\n              source: \"newNetworkStatus\",\n              value: {},\n            },\n            { shouldEmit: EmitBehavior.force }\n          );\n        }\n      });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  /**\n   * A function that enables you to execute a [subscription](https://www.apollographql.com/docs/react/data/subscriptions/), usually to subscribe to specific fields that were included in the query.\n   *\n   * This function returns _another_ function that you can call to terminate the subscription.\n   */\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables extends OperationVariables = TVariables,\n  >(\n    options: ObservableQuery.SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData,\n      TVariables\n    >\n  ): () => void {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData) => {\n          const { updateQuery, onError } = options;\n          const { error } = subscriptionData;\n\n          if (error) {\n            if (onError) {\n              onError(error);\n            } else {\n              invariant.error(\"Unhandled GraphQL subscription error\", error);\n            }\n\n            return;\n          }\n\n          if (updateQuery) {\n            this.updateQuery((previous, updateOptions) =>\n              updateQuery(previous, {\n                subscriptionData: subscriptionData as {\n                  data: Unmasked<TSubscriptionData>;\n                },\n                ...updateOptions,\n              })\n            );\n          }\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  /** @internal */\n  public applyOptions(\n    newOptions: Partial<ObservableQuery.Options<TData, TVariables>>\n  ): void {\n    const mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n    this.updatePolling();\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. Most users should prefer `refetch` instead of\n   * `setVariables` in order to to be properly notified of results even when\n   * they come from the cache.\n   *\n   * Note: `setVariables()` guarantees that a value will be emitted from the\n   * observable, even if the result is deeply equal to the previous value.\n   *\n   * Note: the promise will resolve with the last emitted result\n   * when either the variables match the current variables or there\n   * are no subscribers to the query.\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public async setVariables(\n    variables: TVariables\n  ): Promise<ApolloClient.QueryResult<TData>> {\n    variables = this.getVariablesWithDefaults(variables);\n\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return toQueryResult(this.getCurrentResult());\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.hasObservers()) {\n      return toQueryResult(this.getCurrentResult());\n    }\n\n    return this._reobserve(\n      {\n        // Reset options.fetchPolicy to its original value.\n        fetchPolicy: this.options.initialFetchPolicy,\n        variables,\n      },\n      { newNetworkStatus: NetworkStatus.setVariables }\n    );\n  }\n\n  /**\n   * A function that enables you to update the query's cached result without executing a followup GraphQL operation.\n   *\n   * See [using updateQuery and updateFragment](https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment) for additional information.\n   */\n  public updateQuery(mapFn: UpdateQueryMapFn<TData, TVariables>): void {\n    const { queryManager } = this;\n    const { result, complete } = this.getCacheDiff({ optimistic: false });\n\n    const newResult = mapFn(\n      result! as DeepPartial<Unmasked<TData>>,\n      {\n        variables: this.variables,\n        complete: !!complete,\n        previousData: result,\n      } as UpdateQueryOptions<TData, TVariables>\n    );\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  /**\n   * A function that instructs the query to begin re-executing at a specified interval (in milliseconds).\n   */\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  /**\n   * A function that instructs the query to stop polling after a previous call to `startPolling`.\n   */\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  private applyNextFetchPolicy(\n    reason: NextFetchPolicyContext<TData, TVariables>[\"reason\"],\n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options: ApolloClient.WatchQueryOptions<TData, TVariables>\n  ) {\n    if (options.nextFetchPolicy) {\n      const { fetchPolicy = \"cache-first\", initialFetchPolicy = fetchPolicy } =\n        options;\n\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.reobserve.\n        options.fetchPolicy = options.nextFetchPolicy.call(\n          options as any,\n          fetchPolicy,\n          { reason, options, observable: this, initialFetchPolicy }\n        );\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  }\n\n  private fetch(\n    options: ObservableQuery.Options<TData, TVariables>,\n    networkStatus: NetworkStatus,\n    fetchQuery: DocumentNode,\n    operator: MonoTypeOperatorFunction<QueryNotification.Value<TData>>\n  ) {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    const initialFetchPolicy = this.options.fetchPolicy;\n    options.context ??= {};\n\n    let synchronouslyEmitted = false;\n    const onCacheHit = () => {\n      synchronouslyEmitted = true;\n    };\n    const fetchQueryOperator = // we cannot use `tap` here, since it allows only for a \"before subscription\"\n      // hook with `subscribe` and we care for \"directly before and after subscription\"\n      <T>(source: Observable<T>) =>\n        new Observable<T>((subscriber) => {\n          try {\n            return source.subscribe({\n              next(value) {\n                synchronouslyEmitted = true;\n                subscriber.next(value);\n              },\n              error: (error) => subscriber.error(error),\n              complete: () => subscriber.complete(),\n            });\n          } finally {\n            if (!synchronouslyEmitted) {\n              operation.override = networkStatus;\n              this.input.next({\n                kind: \"N\",\n                source: \"newNetworkStatus\",\n                value: {\n                  resetError: true,\n                },\n                query,\n                variables,\n                meta: {\n                  shouldEmit: EmitBehavior.networkStatusChange,\n                  /*\n                   * The moment this notification is emitted, `nextFetchPolicy`\n                   * might already have switched from a `network-only` to a\n                   * `cache-something` policy, so we want to ensure that the\n                   * loading state emit doesn't accidentally read from the cache\n                   * in those cases.\n                   */\n                  fetchPolicy: initialFetchPolicy,\n                },\n              });\n            }\n          }\n        });\n\n    let { observable, fromLink } = this.queryManager.fetchObservableWithInfo(\n      options,\n      {\n        networkStatus,\n        query: fetchQuery,\n        onCacheHit,\n        fetchQueryOperator,\n        observableQuery: this,\n      }\n    );\n\n    // track query and variables from the start of the operation\n    const { query, variables } = this;\n    const operation: TrackedOperation = {\n      abort: () => {\n        subscription.unsubscribe();\n      },\n      query,\n      variables,\n    };\n    this.activeOperations.add(operation);\n\n    let forceFirstValueEmit =\n      networkStatus == NetworkStatus.refetch ||\n      networkStatus == NetworkStatus.setVariables;\n    observable = observable.pipe(operator, share());\n    const subscription = observable\n      .pipe(\n        tap({\n          next: (notification) => {\n            if (\n              notification.source === \"newNetworkStatus\" ||\n              (notification.kind === \"N\" && notification.value.loading)\n            ) {\n              operation.override = networkStatus;\n            } else {\n              delete operation.override;\n            }\n          },\n          finalize: () => this.activeOperations.delete(operation),\n        })\n      )\n      .subscribe({\n        next: (value) => {\n          const meta: Meta = {};\n\n          if (\n            forceFirstValueEmit &&\n            value.kind === \"N\" &&\n            \"loading\" in value.value &&\n            !value.value.loading\n          ) {\n            forceFirstValueEmit = false;\n            meta.shouldEmit = EmitBehavior.force;\n          }\n\n          this.input.next({ ...value, query, variables, meta });\n        },\n      });\n\n    return { fromLink, subscription, observable };\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private didWarnCacheOnlyPolling = false;\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: { fetchPolicy, pollInterval },\n    } = this;\n\n    if (!pollInterval || !this.hasObservers() || fetchPolicy === \"cache-only\") {\n      if (__DEV__) {\n        if (\n          !this.didWarnCacheOnlyPolling &&\n          pollInterval &&\n          fetchPolicy === \"cache-only\"\n        ) {\n          invariant.warn(\n            \"Cannot poll on 'cache-only' query '%s' and as such, polling is disabled. Please use a different fetch policy.\",\n            getOperationName(this.query, \"(anonymous)\")\n          );\n          this.didWarnCacheOnlyPolling = true;\n        }\n      }\n\n      this.cancelPolling();\n      return;\n    }\n\n    if (pollingInfo?.interval === pollInterval) {\n      return;\n    }\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (\n          !isNetworkRequestInFlight(this.networkStatus) &&\n          !this.options.skipPollAttempt?.()\n        ) {\n          this._reobserve(\n            {\n              // Most fetchPolicy options don't make sense to use in a polling context, as\n              // users wouldn't want to be polling the cache directly. However, network-only and\n              // no-cache are both useful for when the user wants to control whether or not the\n              // polled results are written to the cache.\n              fetchPolicy:\n                this.options.initialFetchPolicy === \"no-cache\" ?\n                  \"no-cache\"\n                : \"network-only\",\n            },\n            {\n              newNetworkStatus: NetworkStatus.poll,\n            }\n          ).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  // This differs from stopPolling in that it does not set pollInterval to 0\n  private cancelPolling() {\n    if (this.pollingInfo) {\n      clearTimeout(this.pollingInfo.timeout);\n      delete this.pollingInfo;\n    }\n  }\n\n  /**\n   * Reevaluate the query, optionally against new options. New options will be\n   * merged with the current options when given.\n   *\n   * Note: `variables` can be reset back to their defaults (typically empty) by calling `reobserve` with\n   * `variables: undefined`.\n   */\n  public reobserve(\n    newOptions?: Partial<ObservableQuery.Options<TData, TVariables>>\n  ): ObservableQuery.ResultPromise<\n    ApolloClient.QueryResult<MaybeMasked<TData>>\n  > {\n    return this._reobserve(newOptions);\n  }\n  private _reobserve(\n    newOptions?: Partial<ObservableQuery.Options<TData, TVariables>>,\n    internalOptions?: {\n      newNetworkStatus?: NetworkStatus;\n    }\n  ): ObservableQuery.ResultPromise<\n    ApolloClient.QueryResult<MaybeMasked<TData>>\n  > {\n    this.isTornDown = false;\n    let { newNetworkStatus } = internalOptions || {};\n\n    this.queryManager.obsQueries.add(this);\n\n    const useDisposableObservable =\n      // Refetching uses a disposable Observable to allow refetches using different\n      // options, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // Polling uses a disposable Observable so the polling options (which force\n      // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.variables;\n    const oldFetchPolicy = this.options.fetchPolicy;\n\n    const mergedOptions = compact(this.options, newOptions || {});\n    const options =\n      useDisposableObservable ?\n        // Disposable Observable fetches receive a shallow copy of this.options\n        // (merged with newOptions), leaving this.options unmodified.\n        mergedOptions\n      : assign(this.options, mergedOptions);\n\n    // Don't update options.query with the transformed query to avoid\n    // overwriting this.options.query when we aren't using a disposable concast.\n    // We want to ensure we can re-run the custom document transforms the next\n    // time a request is made against the original query.\n    const query = this.transformDocument(options.query);\n\n    this.lastQuery = query;\n\n    // Reevaluate variables to allow resetting variables with variables: undefined,\n    // otherwise `compact` will ignore the `variables` key in `newOptions`. We\n    // do this after we run the query transform to ensure we get default\n    // variables from the transformed query.\n    //\n    // Note: updating options.variables may mutate this.options.variables\n    // in the case of a non-disposable query. This is intentional.\n    if (newOptions && \"variables\" in newOptions) {\n      options.variables = this.getVariablesWithDefaults(newOptions.variables);\n    }\n\n    if (!useDisposableObservable) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !equal(newOptions.variables, oldVariables) &&\n        // Don't mess with the fetchPolicy if it's currently \"standby\".\n        options.fetchPolicy !== \"standby\" &&\n        // If we're changing the fetchPolicy anyway, don't try to change it here\n        // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n        (options.fetchPolicy === oldFetchPolicy ||\n          // A `nextFetchPolicy` function has even higher priority, though,\n          // so in that case `applyNextFetchPolicy` must be called.\n          typeof options.nextFetchPolicy === \"function\")\n      ) {\n        // This might mutate options.fetchPolicy\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    const oldNetworkStatus = this.networkStatus;\n\n    if (!newNetworkStatus) {\n      newNetworkStatus = NetworkStatus.loading;\n\n      if (\n        oldNetworkStatus !== NetworkStatus.loading &&\n        newOptions?.variables &&\n        !equal(newOptions.variables, oldVariables)\n      ) {\n        newNetworkStatus = NetworkStatus.setVariables;\n      }\n\n      // QueryManager does not emit any values for standby fetch policies so we\n      // want ensure that the networkStatus remains ready.\n      if (options.fetchPolicy === \"standby\") {\n        newNetworkStatus = NetworkStatus.ready;\n      }\n    }\n\n    if (options.fetchPolicy === \"standby\") {\n      this.cancelPolling();\n    }\n\n    this.resubscribeCache();\n    const { promise, operator: promiseOperator } = getTrackingOperatorPromise(\n      (value: QueryNotification.Value<TData>) => {\n        switch (value.kind) {\n          case \"E\":\n            throw value.error;\n          case \"N\":\n            if (value.source !== \"newNetworkStatus\" && !value.value.loading)\n              return value.value;\n        }\n      },\n      // This default value should only be used when using a `fetchPolicy` of\n      // `standby` since that fetch policy completes without emitting a\n      // result. Since we are converting this to a QueryResult type, we\n      // omit the extra fields from ApolloQueryResult in the default value.\n      options.fetchPolicy === \"standby\" ?\n        ({ data: undefined } as ObservableQuery.Result<TData>)\n      : undefined\n    );\n    const { subscription, observable, fromLink } = this.fetch(\n      options,\n      newNetworkStatus,\n      query,\n      promiseOperator\n    );\n\n    if (!useDisposableObservable && (fromLink || !this.linkSubscription)) {\n      if (this.linkSubscription) {\n        this.linkSubscription.unsubscribe();\n      }\n\n      this.linkSubscription = subscription;\n    }\n\n    const ret = Object.assign(\n      preventUnhandledRejection(\n        promise\n          .then((result) => toQueryResult(this.maskResult(result)))\n          .finally(() => {\n            if (!this.hasObservers() && this.activeOperations.size === 0) {\n              // If `reobserve` was called on a query without any obervers,\n              // the teardown logic would never be called, so we need to\n              // call it here to ensure the query is properly torn down.\n              this.tearDownQuery();\n            }\n          })\n      ),\n      {\n        retain: () => {\n          const subscription = observable.subscribe({});\n          const unsubscribe = () => subscription.unsubscribe();\n          promise.then(unsubscribe, unsubscribe);\n          return ret;\n        },\n      }\n    );\n    return ret;\n  }\n\n  public hasObservers() {\n    return this.subject.observed;\n  }\n\n  /**\n   * Tears down the `ObservableQuery` and stops all active operations by sending a `complete` notification.\n   */\n  public stop() {\n    this.subject.complete();\n    this.initializeObservablesQueue();\n    this.tearDownQuery();\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n\n    this.resetNotifications();\n    this.unsubscribeFromCache?.();\n    if (this.linkSubscription) {\n      this.linkSubscription.unsubscribe();\n      delete this.linkSubscription;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach((sub) => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.obsQueries.delete(this);\n    this.isTornDown = true;\n    this.abortActiveOperations();\n    this._lastWrite = undefined;\n  }\n\n  private transformDocument(document: DocumentNode) {\n    return this.queryManager.transform(document);\n  }\n\n  private maskResult<T extends { data: any }>(result: T): T {\n    const masked = this.queryManager.maskOperation({\n      document: this.query,\n      data: result.data,\n      fetchPolicy: this.options.fetchPolicy,\n      cause: this,\n    });\n\n    // Maintain object identity as much as possible\n    return masked === result.data ? result : { ...result, data: masked };\n  }\n\n  private dirty: boolean = false;\n\n  private notifyTimeout?: ReturnType<typeof setTimeout>;\n\n  /** @internal */\n  private resetNotifications() {\n    if (this.notifyTimeout) {\n      clearTimeout(this.notifyTimeout);\n      this.notifyTimeout = void 0;\n    }\n    this.dirty = false;\n  }\n\n  /** @internal */\n  private scheduleNotify() {\n    if (this.dirty) return;\n    this.dirty = true;\n    if (!this.notifyTimeout) {\n      this.notifyTimeout = setTimeout(() => this.notify(true), 0);\n    }\n  }\n\n  /** @internal */\n  public notify(scheduled = false) {\n    if (!scheduled) {\n      // For queries with client exports or forced resolvers, we don't want to\n      // synchronously reobserve the cache on broadcast,\n      // but actually wait for the `scheduleNotify` timeout triggered by the\n      // `cache.watch` callback from `resubscribeCache`.\n      const info = this.queryManager.getDocumentInfo(this.query);\n      if (info.hasClientExports || info.hasForcedResolvers) {\n        return;\n      }\n    }\n\n    const { dirty } = this;\n    this.resetNotifications();\n\n    if (\n      dirty &&\n      (this.options.fetchPolicy == \"cache-only\" ||\n        this.options.fetchPolicy == \"cache-and-network\" ||\n        !this.activeOperations.size)\n    ) {\n      const diff = this.getCacheDiff();\n      if (\n        // `fromOptimisticTransaction` is not avaiable through the `cache.diff`\n        // code path, so we need to check it this way\n        equal(diff.result, this.getCacheDiff({ optimistic: false }).result)\n      ) {\n        //If this diff did not come from an optimistic transaction\n        // make the ObservableQuery \"reobserve\" the latest data\n        // using a temporary fetch policy of \"cache-first\", so complete cache\n        // results have a chance to be delivered without triggering additional\n        // network requests, even when options.fetchPolicy is \"network-only\"\n        // or \"cache-and-network\". All other fetch policies are preserved by\n        // this method, and are handled by calling oq.reobserve(). If this\n        // reobservation is spurious, distinctUntilChanged still has a\n        // chance to catch it before delivery to ObservableQuery subscribers.\n        this.reobserveCacheFirst();\n      } else {\n        // If this diff came from an optimistic transaction, deliver the\n        // current cache data to the ObservableQuery, but don't perform a\n        // reobservation, since oq.reobserveCacheFirst might make a network\n        // request, and we never want to trigger network requests in the\n        // middle of optimistic updates.\n        this.input.next({\n          kind: \"N\",\n          value: {\n            data: diff.result,\n            dataState:\n              diff.complete ? \"complete\"\n              : diff.result ? \"partial\"\n              : \"empty\",\n            networkStatus: NetworkStatus.ready,\n            loading: false,\n            error: undefined,\n            partial: !diff.complete,\n          } as ObservableQuery.Result<TData>,\n          source: \"cache\",\n          query: this.query,\n          variables: this.variables,\n          meta: {},\n        });\n      }\n    }\n  }\n\n  private activeOperations = new Set<TrackedOperation>();\n  private pushOperation(networkStatus: NetworkStatus): {\n    finalize: () => void;\n    pushNotification: (\n      notification: QueryNotification.Value<TData>,\n      additionalMeta?: Omit<Meta, \"query\" | \"variables\">\n    ) => void;\n  } {\n    let aborted = false;\n    // track query and variables from the start of the operation\n    const { query, variables } = this;\n    const finalize = () => {\n      this.activeOperations.delete(operation);\n    };\n    const operation: TrackedOperation = {\n      override: networkStatus,\n      abort: () => {\n        aborted = true;\n        finalize();\n      },\n      query,\n      variables,\n    };\n    this.activeOperations.add(operation);\n    return {\n      finalize,\n      pushNotification: (\n        notification: QueryNotification.Value<TData>,\n        additionalMeta?: Meta\n      ) => {\n        if (!aborted) {\n          this.input.next({\n            ...notification,\n            query,\n            variables,\n            meta: { ...additionalMeta },\n          });\n        }\n      },\n    };\n  }\n\n  private calculateNetworkStatus(baseNetworkStatus: NetworkStatus) {\n    if (baseNetworkStatus === NetworkStatus.streaming) {\n      return baseNetworkStatus;\n    }\n    // in the future, this could be more complex logic, e.g. \"refetch\" and\n    // \"fetchMore\" having priority over \"polling\" or \"loading\" network statuses\n    // as for now we just take the \"latest\" operation that is still active,\n    // as that lines up best with previous behavior[]\n\n    const operation = Array.from(this.activeOperations.values()).findLast(\n      (operation) =>\n        isEqualQuery(operation, this) && operation.override !== undefined\n    );\n    return operation?.override ?? baseNetworkStatus;\n  }\n\n  private abortActiveOperations() {\n    this.activeOperations.forEach((operation) => operation.abort());\n  }\n\n  /**\n   * @internal\n   * Called from `clearStore`.\n   *\n   * - resets the query to its initial state\n   * - cancels all active operations and their subscriptions\n   */\n  public reset() {\n    // exception for cache-only queries - we reset them into a \"ready\" state\n    // as we won't trigger a refetch for them\n    const resetToEmpty = this.options.fetchPolicy === \"cache-only\";\n    this.setResult(resetToEmpty ? empty : uninitialized, {\n      shouldEmit: resetToEmpty ? EmitBehavior.force : EmitBehavior.never,\n    });\n\n    this.abortActiveOperations();\n  }\n\n  /** @internal */\n  private setResult(\n    result: ObservableQuery.Result<TData>,\n    additionalMeta?: Meta\n  ) {\n    this.input.next({\n      source: \"setResult\",\n      kind: \"N\",\n      value: result,\n      query: this.query,\n      variables: this.variables,\n      meta: { ...additionalMeta },\n    });\n  }\n\n  private operator: OperatorFunction<\n    QueryNotification.Value<TData> & {\n      query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n      variables: TVariables;\n      meta: Meta;\n    },\n    SubjectValue<TData, TVariables>\n  > = filterMap((notification) => {\n    const { query, variables, meta } = notification;\n\n    if (notification.source === \"setResult\") {\n      return { query, variables, result: notification.value, meta };\n    }\n\n    if (notification.kind === \"C\" || !isEqualQuery(notification, this)) {\n      return;\n    }\n\n    let result: ObservableQuery.Result<TData>;\n    const previous = this.subject.getValue();\n\n    if (notification.source === \"cache\") {\n      result = notification.value;\n      if (\n        result.networkStatus === NetworkStatus.ready &&\n        result.partial &&\n        (!this.options.returnPartialData ||\n          previous.result.networkStatus === NetworkStatus.error) &&\n        this.options.fetchPolicy !== \"cache-only\"\n      ) {\n        return;\n      }\n    } else if (notification.source === \"network\") {\n      if (this.waitForNetworkResult) {\n        this.waitForNetworkResult = false;\n        this.resubscribeCache();\n      }\n      result =\n        notification.kind === \"E\" ?\n          ({\n            ...(isEqualQuery(previous, notification) ?\n              previous.result\n            : { data: undefined, dataState: \"empty\", partial: true }),\n            error: notification.error,\n            networkStatus: NetworkStatus.error,\n            loading: false,\n          } as ObservableQuery.Result<TData>)\n        : notification.value;\n\n      if (notification.kind === \"E\" && result.dataState === \"streaming\") {\n        result.dataState = \"complete\" as any;\n      }\n\n      if (result.error) {\n        meta.shouldEmit = EmitBehavior.force;\n      }\n    } else if (notification.source === \"newNetworkStatus\") {\n      const baseResult =\n        isEqualQuery(previous, notification) ?\n          previous.result\n        : this.getInitialResult(meta.fetchPolicy);\n      const { resetError } = notification.value;\n      const error = resetError ? undefined : baseResult.error;\n      const networkStatus = error ? NetworkStatus.error : NetworkStatus.ready;\n      result = {\n        ...baseResult,\n        error,\n        networkStatus,\n      };\n    }\n    // every code path until here should have either returned or set a result,\n    // but typescript needs a little help\n    invariant(result!);\n\n    // normalize result shape\n    if (!result.error) delete result.error;\n    result.networkStatus = this.calculateNetworkStatus(result.networkStatus);\n    result.loading = isNetworkRequestInFlight(result.networkStatus);\n    result = this.maskResult(result);\n\n    return { query, variables, result, meta };\n  });\n\n  // Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n  // delivery of any new data from the cache, possibly falling back to the network\n  // if any cache data are missing. This allows _complete_ cache results to be\n  // delivered without also kicking off unnecessary network requests when\n  // this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n  // this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n  // \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\n  private reobserveCacheFirst(): void {\n    const { fetchPolicy, nextFetchPolicy } = this.options;\n\n    if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n      this.reobserve({\n        fetchPolicy: \"cache-first\",\n        // Use a temporary nextFetchPolicy function that replaces itself with the\n        // previous nextFetchPolicy value and returns the original fetchPolicy.\n        nextFetchPolicy(\n          this: ApolloClient.WatchQueryOptions<TData, TVariables>,\n          currentFetchPolicy: WatchQueryFetchPolicy,\n          context: NextFetchPolicyContext<TData, TVariables>\n        ) {\n          // Replace this nextFetchPolicy function in the options object with the\n          // original this.options.nextFetchPolicy value.\n          this.nextFetchPolicy = nextFetchPolicy;\n          // If the original nextFetchPolicy value was a function, give it a\n          // chance to decide what happens here.\n          if (typeof this.nextFetchPolicy === \"function\") {\n            return this.nextFetchPolicy(currentFetchPolicy, context);\n          }\n          // Otherwise go back to the original this.options.fetchPolicy.\n          return fetchPolicy!;\n        },\n      });\n    } else {\n      this.reobserve();\n    }\n  }\n\n  private getVariablesWithDefaults(variables: TVariables | undefined) {\n    return this.queryManager.getVariables(this.query, variables);\n  }\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError | MissingTree | undefined\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: %o`, missing);\n  }\n}\n\nfunction isEqualQuery(\n  a?: { query: DocumentNode; variables: OperationVariables },\n  b?: { query: DocumentNode; variables: OperationVariables }\n) {\n  return !!(a && b && a.query === b.query && equal(a.variables, b.variables));\n}\n\nfunction getTrackingOperatorPromise<ObservedValue, ReturnValue = ObservedValue>(\n  filterMapCb: (value: ObservedValue) => ReturnValue | undefined,\n  defaultValue?: ReturnValue\n) {\n  let lastValue = defaultValue,\n    resolve: (value: ReturnValue) => void,\n    reject: (error: unknown) => void;\n  const promise = new Promise<ReturnValue>((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  const operator: MonoTypeOperatorFunction<ObservedValue> = tap({\n    next(value) {\n      try {\n        const newValue = filterMapCb(value);\n        if (newValue !== undefined) {\n          lastValue = newValue;\n        }\n      } catch (error) {\n        reject(error);\n      }\n    },\n    finalize: () => {\n      if (lastValue) {\n        resolve(lastValue);\n      } else {\n        const message = \"The operation was aborted.\";\n        const name = \"AbortError\";\n        reject(\n          typeof DOMException !== \"undefined\" ?\n            new DOMException(message, name)\n            // some environments do not have `DOMException`, e.g. node\n            // uses a normal `Error` with a `name` property instead: https://github.com/phryneas/node/blob/d0579b64f0f6b722f8e49bf8a471dd0d0604a21e/lib/internal/errors.js#L964\n            // error.code is a legacy property that is not used anymore,\n            // and also inconsistent across environments (in supporting\n            // browsers it is `20`, in node `'ABORT_ERR'`) so we omit that.\n          : Object.assign(new Error(message), { name })\n        );\n      }\n    },\n  });\n  return { promise, operator };\n}\n","import type { GraphQLFormattedError } from \"graphql\";\n\nimport { brand, isBranded } from \"./utils.js\";\n\nexport declare namespace CombinedProtocolErrors {\n  export interface MessageFormatterOptions {\n    /**\n     * The default message formatter. Call this to get a string with the default\n     * formatted message.\n     *\n     * @remarks\n     * To format part of the message using the default message formatter, call\n     * the `defaultFormatMessage` function provided to the `options` argument of\n     * your message formatter.\n     *\n     * @example\n     *\n     * The following example prepends a string to the message and uses the\n     * default message formatter to format the error messages.\n     *\n     * ```ts\n     * CombinedProtocolErrors.formatMessage = (errors, { defaultFormatMessage }) => {\n     *   return `[Protocol errors]: ${defaultFormatMessage(errors)}`;\n     * };\n     * ```\n     */\n    defaultFormatMessage: (\n      errors: ReadonlyArray<GraphQLFormattedError>\n    ) => string;\n  }\n\n  /**\n   * By default, `CombinedProtocolErrors` formats the `message` property by\n   * joining each error's `message` field with a newline. To customize the\n   * format of the `message`, such as changing the delimiter or adding a message\n   * prefix, override the static `formatMessage` method.\n   *\n   * @remarks\n   *\n   * See the [`formatMessage`](https://www.apollographql.com/docs/react/api/errors/CombinedProtocolErrors) section for details about the parameters provided to the `formatMessage` function.\n   *\n   * > [!NOTE]\n   * > The message formatter needs to be configured before any operation is executed by Apollo Client, otherwise the default message formatter is used. We recommend configuring the message formatter before initializing your `ApolloClient` instance.\n   *\n   * @example\n   *\n   * The following example demonstrates how to format the error message by\n   * joining each error with a comma.\n   *\n   * ```ts\n   * import { CombinedProtocolErrors } from \"@apollo/client/errors\";\n   *\n   * CombinedProtocolErrors.formatMessage = (errors) => {\n   *   return errors.map((error) => error.message).join(\", \");\n   * };\n   * ```\n   *\n   * @param errors - The array of GraphQL errors returned from the server in the\n   * `errors` field of the response.\n   * @param options - Additional context that could be useful when formatting\n   * the message.\n   */\n  export type MessageFormatter = (\n    errors: ReadonlyArray<GraphQLFormattedError>,\n    options: MessageFormatterOptions\n  ) => string;\n\n  namespace DocumentationTypes {\n    /**\n     * A function that formats the error message used for the error's `message`\n     * property. Override this method to provide your own formatting.\n     *\n     * @remarks\n     *\n     * The `formatMessage` function is called by the `CombinedProtocolErrors`\n     * constructor to provide a formatted message as the `message` property of the\n     * `CombinedProtocolErrors` object. Follow the [\"Providing a custom message\n     * formatter\"](https://www.apollographql.com/docs/react/api/errors/CombinedProtocolErrors#providing-a-custom-message-formatter) guide to learn how to modify the message format.\n     *\n     * @param errors - The array of GraphQL errors returned from the server in the\n     * `errors` field of the response.\n     * @param options - Additional context that could be useful when formatting\n     * the message.\n     */\n    function formatMessage(\n      errors: ReadonlyArray<GraphQLFormattedError>,\n      options: MessageFormatterOptions\n    ): string;\n\n    interface InstanceProperties {\n      /**\n       * The raw list of errors returned by the top-level `errors` field in the\n       * multipart HTTP subscription response.\n       */\n      readonly errors: ReadonlyArray<GraphQLFormattedError>;\n    }\n  }\n}\n\nfunction defaultFormatMessage(errors: ReadonlyArray<GraphQLFormattedError>) {\n  return errors.map((e) => e.message || \"Error message not found.\").join(\"\\n\");\n}\n\n/**\n * Fatal transport-level errors returned when executing a subscription using the\n * multipart HTTP subscription protocol. See the documentation on the\n * [multipart HTTP protocol for GraphQL Subscriptions](https://www.apollographql.com/docs/graphos/routing/operations/subscriptions/multipart-protocol) for more information on these errors.\n *\n * @remarks\n *\n * These errors indicate issues with the subscription transport itself, rather\n * than GraphQL-level errors. They typically occur when there are problems\n * communicating with subgraphs from the Apollo Router.\n *\n * @example\n *\n * ```ts\n * import { CombinedProtocolErrors } from \"@apollo/client/errors\";\n *\n * // Check if an error is a CombinedProtocolErrors instance\n * if (CombinedProtocolErrors.is(error)) {\n *   // Access individual protocol errors\n *   error.errors.forEach((protocolError) => {\n *     console.log(protocolError.message);\n *     console.log(protocolError.extensions);\n *   });\n * }\n * ```\n */\nexport class CombinedProtocolErrors extends Error {\n  /**\n   * A method that determines whether an error is a `CombinedProtocolErrors`\n   * object. This method enables TypeScript to narrow the error type.\n   *\n   * @example\n   *\n   * ```ts\n   * if (CombinedProtocolErrors.is(error)) {\n   *   // TypeScript now knows `error` is a CombinedProtocolErrors object\n   *   console.log(error.errors);\n   * }\n   * ```\n   */\n  static is(error: unknown): error is CombinedProtocolErrors {\n    return isBranded(error, \"CombinedProtocolErrors\");\n  }\n\n  /** {@inheritDoc @apollo/client!CombinedProtocolErrors.DocumentationTypes.formatMessage:function(1)} */\n  static formatMessage: CombinedProtocolErrors.MessageFormatter =\n    defaultFormatMessage;\n\n  /** {@inheritDoc @apollo/client!CombinedProtocolErrors.DocumentationTypes.InstanceProperties#errors:member} */\n  readonly errors: ReadonlyArray<GraphQLFormattedError>;\n\n  constructor(\n    protocolErrors:\n      | Array<GraphQLFormattedError>\n      | ReadonlyArray<GraphQLFormattedError>\n  ) {\n    super(\n      CombinedProtocolErrors.formatMessage(protocolErrors, {\n        defaultFormatMessage,\n      })\n    );\n    this.name = \"CombinedProtocolErrors\";\n    this.errors = protocolErrors;\n\n    brand(this);\n    Object.setPrototypeOf(this, CombinedProtocolErrors.prototype);\n  }\n}\n","const prefixCounts = new Map<string, number>();\n\n/**\n * These IDs won't be globally unique, but they will be unique within this\n * process, thanks to the counter, and unguessable thanks to the random suffix.\n *\n * @internal\n */\nexport function makeUniqueId(prefix: string) {\n  const count = prefixCounts.get(prefix) || 1;\n  prefixCounts.set(prefix, count + 1);\n  return `${prefix}:${count}:${Math.random().toString(36).slice(2)}`;\n}\n","import { equal } from \"@wry/equality\";\nimport { Trie } from \"@wry/trie\";\nimport type {\n  FieldNode,\n  FragmentSpreadNode,\n  InlineFragmentNode,\n  SelectionSetNode,\n} from \"graphql\";\nimport { Kind } from \"graphql\";\n\nimport type { Cache, OperationVariables } from \"@apollo/client\";\nimport type {\n  Reference,\n  StoreObject,\n  StoreValue,\n} from \"@apollo/client/utilities\";\nimport {\n  addTypenameToDocument,\n  canonicalStringify,\n  isReference,\n} from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport type {\n  FragmentMap,\n  FragmentMapFunction,\n} from \"@apollo/client/utilities/internal\";\nimport {\n  argumentsObjectFromField,\n  cloneDeep,\n  getDefaultValues,\n  getFragmentFromSelection,\n  getOperationDefinition,\n  isArray,\n  isField,\n  isNonEmptyArray,\n  makeReference,\n  resultKeyNameFromField,\n  shouldInclude,\n} from \"@apollo/client/utilities/internal\";\nimport {\n  invariant,\n  newInvariantError,\n} from \"@apollo/client/utilities/invariant\";\n\nimport type { ReadFieldFunction } from \"../core/types/common.js\";\n\nimport type { EntityStore } from \"./entityStore.js\";\nimport {\n  extractFragmentContext,\n  fieldNameFromStoreName,\n  makeProcessedFieldsMerger,\n  storeValueIsStoreObject,\n} from \"./helpers.js\";\nimport type { InMemoryCache } from \"./inMemoryCache.js\";\nimport { normalizeReadFieldOptions } from \"./policies.js\";\nimport type { StoreReader } from \"./readFromStore.js\";\nimport type {\n  InMemoryCacheConfig,\n  MergeTree,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from \"./types.js\";\n\nexport interface WriteContext extends ReadMergeModifyContext {\n  readonly written: {\n    [dataId: string]: SelectionSetNode[];\n  };\n  readonly fragmentMap: FragmentMap;\n  lookupFragment: FragmentMapFunction;\n  // General-purpose deep-merge function for use during writes.\n  merge<T>(existing: T, incoming: T): T;\n  // If true, merge functions will be called with undefined existing data.\n  overwrite: boolean;\n  incomingById: Map<\n    string,\n    {\n      storeObject: StoreObject;\n      mergeTree?: MergeTree;\n      fieldNodeSet: Set<FieldNode>;\n    }\n  >;\n  // Directive metadata for @client and @defer. We could use a bitfield for this\n  // information to save some space, and use that bitfield number as the keys in\n  // the context.flavors Map.\n  clientOnly: boolean;\n  deferred: boolean;\n  flavors: Map<string, FlavorableWriteContext>;\n}\n\ntype FlavorableWriteContext = Pick<\n  WriteContext,\n  \"clientOnly\" | \"deferred\" | \"flavors\"\n>;\n\n// Since there are only four possible combinations of context.clientOnly and\n// context.deferred values, we should need at most four \"flavors\" of any given\n// WriteContext. To avoid creating multiple copies of the same context, we cache\n// the contexts in the context.flavors Map (shared by all flavors) according to\n// their clientOnly and deferred values (always in that order).\nfunction getContextFlavor<TContext extends FlavorableWriteContext>(\n  context: TContext,\n  clientOnly: TContext[\"clientOnly\"],\n  deferred: TContext[\"deferred\"]\n): TContext {\n  const key = `${clientOnly}${deferred}`;\n  let flavored = context.flavors.get(key);\n  if (!flavored) {\n    context.flavors.set(\n      key,\n      (flavored =\n        context.clientOnly === clientOnly && context.deferred === deferred ?\n          context\n        : {\n            ...context,\n            clientOnly,\n            deferred,\n          })\n    );\n  }\n  return flavored as TContext;\n}\n\ninterface ProcessSelectionSetOptions {\n  dataId?: string;\n  result: Record<string, any>;\n  selectionSet: SelectionSetNode;\n  context: WriteContext;\n  mergeTree: MergeTree;\n}\n\nexport class StoreWriter {\n  constructor(\n    public readonly cache: InMemoryCache,\n    private reader?: StoreReader,\n    private fragments?: InMemoryCacheConfig[\"fragments\"]\n  ) {}\n\n  public writeToStore<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    store: NormalizedCache,\n    {\n      query,\n      result,\n      dataId,\n      variables,\n      overwrite,\n    }: Cache.WriteOptions<TData, TVariables>\n  ): Reference | undefined {\n    const operationDefinition = getOperationDefinition(query)!;\n    const merger = makeProcessedFieldsMerger();\n\n    variables = {\n      ...getDefaultValues(operationDefinition),\n      ...variables!,\n    };\n\n    const context: WriteContext = {\n      store,\n      written: {},\n      merge<T>(existing: T, incoming: T) {\n        return merger.merge(existing, incoming) as T;\n      },\n      variables: variables as OperationVariables,\n      varString: canonicalStringify(variables),\n      ...extractFragmentContext(query, this.fragments),\n      overwrite: !!overwrite,\n      incomingById: new Map(),\n      clientOnly: false,\n      deferred: false,\n      flavors: new Map(),\n    };\n\n    const ref = this.processSelectionSet({\n      result: result || {},\n      dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: { map: new Map() },\n      context,\n    });\n\n    if (!isReference(ref)) {\n      throw newInvariantError(`Could not identify object %s`, result);\n    }\n\n    // So far, the store has not been modified, so now it's time to process\n    // context.incomingById and merge those incoming fields into context.store.\n    context.incomingById.forEach(\n      ({ storeObject, mergeTree, fieldNodeSet }, dataId) => {\n        const entityRef = makeReference(dataId);\n\n        if (mergeTree && mergeTree.map.size) {\n          const applied = this.applyMerges(\n            mergeTree,\n            entityRef,\n            storeObject,\n            context\n          );\n          if (isReference(applied)) {\n            // Assume References returned by applyMerges have already been merged\n            // into the store. See makeMergeObjectsFunction in policies.ts for an\n            // example of how this can happen.\n            return;\n          }\n          // Otherwise, applyMerges returned a StoreObject, whose fields we should\n          // merge into the store (see store.merge statement below).\n          storeObject = applied;\n        }\n\n        if (__DEV__ && !context.overwrite) {\n          const fieldsWithSelectionSets: Record<string, true> = {};\n          fieldNodeSet.forEach((field) => {\n            if (field.selectionSet) {\n              fieldsWithSelectionSets[field.name.value] = true;\n            }\n          });\n\n          const hasSelectionSet = (storeFieldName: string) =>\n            fieldsWithSelectionSets[fieldNameFromStoreName(storeFieldName)] ===\n            true;\n\n          const hasMergeFunction = (storeFieldName: string) => {\n            const childTree = mergeTree && mergeTree.map.get(storeFieldName);\n            return Boolean(childTree && childTree.info && childTree.info.merge);\n          };\n\n          Object.keys(storeObject).forEach((storeFieldName) => {\n            // If a merge function was defined for this field, trust that it\n            // did the right thing about (not) clobbering data. If the field\n            // has no selection set, it's a scalar field, so it doesn't need\n            // a merge function (even if it's an object, like JSON data).\n            if (\n              hasSelectionSet(storeFieldName) &&\n              !hasMergeFunction(storeFieldName)\n            ) {\n              warnAboutDataLoss(\n                entityRef,\n                storeObject,\n                storeFieldName,\n                context.store\n              );\n            }\n          });\n        }\n\n        store.merge(dataId, storeObject);\n      }\n    );\n\n    // Any IDs written explicitly to the cache will be retained as\n    // reachable root IDs for garbage collection purposes. Although this\n    // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n    // retainment counts are effectively ignored because cache.gc() always\n    // includes them in its root ID set.\n    store.retain(ref.__ref);\n\n    return ref;\n  }\n\n  private processSelectionSet({\n    dataId,\n    result,\n    selectionSet,\n    context,\n    // This object allows processSelectionSet to report useful information\n    // to its callers without explicitly returning that information.\n    mergeTree,\n  }: ProcessSelectionSetOptions): StoreObject | Reference {\n    const { policies } = this.cache;\n\n    // This variable will be repeatedly updated using context.merge to\n    // accumulate all fields that need to be written into the store.\n    let incoming: StoreObject = {};\n\n    // If typename was not passed in, infer it. Note that typename is\n    // always passed in for tricky-to-infer cases such as \"Query\" for\n    // ROOT_QUERY.\n    const typename: string | undefined =\n      (dataId && policies.rootTypenamesById[dataId]) ||\n      getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n      (dataId && (context.store.get(dataId, \"__typename\") as string));\n\n    if (\"string\" === typeof typename) {\n      incoming.__typename = typename;\n    }\n\n    // This readField function will be passed as context.readField in the\n    // KeyFieldsContext object created within policies.identify (called below).\n    // In addition to reading from the existing context.store (thanks to the\n    // policies.readField(options, context) line at the very bottom), this\n    // version of readField can read from Reference objects that are currently\n    // pending in context.incomingById, which is important whenever keyFields\n    // need to be extracted from a child object that processSelectionSet has\n    // turned into a Reference.\n    const readField: ReadFieldFunction = (...args) => {\n      const options = normalizeReadFieldOptions(\n        args,\n        incoming,\n        context.variables\n      );\n\n      if (isReference(options.from)) {\n        const info = context.incomingById.get(options.from.__ref);\n        if (info) {\n          const result = policies.readField(\n            {\n              ...options,\n              from: info.storeObject,\n            },\n            context\n          );\n\n          if (result !== void 0) {\n            return result;\n          }\n        }\n      }\n\n      return policies.readField(options, context);\n    };\n\n    const fieldNodeSet = new Set<FieldNode>();\n\n    this.flattenFields(\n      selectionSet,\n      result,\n      // This WriteContext will be the default context value for fields returned\n      // by the flattenFields method, but some fields may be assigned a modified\n      // context, depending on the presence of @client and other directives.\n      context,\n      typename\n    ).forEach((context, field) => {\n      const resultFieldKey = resultKeyNameFromField(field);\n      const value = result[resultFieldKey];\n\n      fieldNodeSet.add(field);\n\n      if (value !== void 0) {\n        const storeFieldName = policies.getStoreFieldName({\n          typename,\n          fieldName: field.name.value,\n          field,\n          variables: context.variables,\n        });\n\n        const childTree = getChildMergeTree(mergeTree, storeFieldName);\n\n        let incomingValue = this.processFieldValue(\n          value,\n          field,\n          // Reset context.clientOnly and context.deferred to their default\n          // values before processing nested selection sets.\n          field.selectionSet ?\n            getContextFlavor(context, false, false)\n          : context,\n          childTree\n        );\n\n        // To determine if this field holds a child object with a merge function\n        // defined in its type policy (see PR #7070), we need to figure out the\n        // child object's __typename.\n        let childTypename: string | undefined;\n\n        // The field's value can be an object that has a __typename only if the\n        // field has a selection set. Otherwise incomingValue is scalar.\n        if (\n          field.selectionSet &&\n          (isReference(incomingValue) || storeValueIsStoreObject(incomingValue))\n        ) {\n          childTypename = readField<string>(\"__typename\", incomingValue);\n        }\n\n        const merge = policies.getMergeFunction(\n          typename,\n          field.name.value,\n          childTypename\n        );\n\n        if (merge) {\n          childTree.info = {\n            // TODO Check compatibility against any existing childTree.field?\n            field,\n            typename,\n            merge,\n          };\n        } else {\n          maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n        }\n\n        incoming = context.merge(incoming, {\n          [storeFieldName]: incomingValue,\n        });\n      } else if (\n        __DEV__ &&\n        !context.clientOnly &&\n        !context.deferred &&\n        !addTypenameToDocument.added(field) &&\n        // If the field has a read function, it may be a synthetic field or\n        // provide a default value, so its absence from the written data should\n        // not be cause for alarm.\n        !policies.getReadFunction(typename, field.name.value)\n      ) {\n        invariant.error(\n          `Missing field '%s' while writing result %o`,\n          resultKeyNameFromField(field),\n          result\n        );\n      }\n    });\n\n    // Identify the result object, even if dataId was already provided,\n    // since we always need keyObject below.\n    try {\n      const [id, keyObject] = policies.identify(result, {\n        typename,\n        selectionSet,\n        fragmentMap: context.fragmentMap,\n        storeObject: incoming,\n        readField,\n      });\n\n      // If dataId was not provided, fall back to the id just generated by\n      // policies.identify.\n      dataId = dataId || id;\n\n      // Write any key fields that were used during identification, even if\n      // they were not mentioned in the original query.\n      if (keyObject) {\n        // TODO Reverse the order of the arguments?\n        incoming = context.merge(incoming, keyObject);\n      }\n    } catch (e) {\n      // If dataId was provided, tolerate failure of policies.identify.\n      if (!dataId) throw e;\n    }\n\n    if (\"string\" === typeof dataId) {\n      const dataRef = makeReference(dataId);\n\n      // Avoid processing the same entity object using the same selection\n      // set more than once. We use an array instead of a Set since most\n      // entity IDs will be written using only one selection set, so the\n      // size of this array is likely to be very small, meaning indexOf is\n      // likely to be faster than Set.prototype.has.\n      const sets = context.written[dataId] || (context.written[dataId] = []);\n      if (sets.indexOf(selectionSet) >= 0) return dataRef;\n      sets.push(selectionSet);\n\n      // If we're about to write a result object into the store, but we\n      // happen to know that the exact same (===) result object would be\n      // returned if we were to reread the result with the same inputs,\n      // then we can skip the rest of the processSelectionSet work for\n      // this object, and immediately return a Reference to it.\n      if (\n        this.reader &&\n        this.reader.isFresh(result, dataRef, selectionSet, context)\n      ) {\n        return dataRef;\n      }\n\n      const previous = context.incomingById.get(dataId);\n      if (previous) {\n        previous.storeObject = context.merge(previous.storeObject, incoming);\n        previous.mergeTree = mergeMergeTrees(previous.mergeTree, mergeTree);\n        fieldNodeSet.forEach((field) => previous.fieldNodeSet.add(field));\n      } else {\n        context.incomingById.set(dataId, {\n          storeObject: incoming,\n          // Save a reference to mergeTree only if it is not empty, because\n          // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n          // reused for entirely different parts of the result tree.\n          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n          fieldNodeSet,\n        });\n      }\n\n      return dataRef;\n    }\n\n    return incoming;\n  }\n\n  private processFieldValue(\n    value: any,\n    field: FieldNode,\n    context: WriteContext,\n    mergeTree: MergeTree\n  ): StoreValue {\n    if (!field.selectionSet || value === null) {\n      // In development, we need to clone scalar values so that they can be\n      // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n      // it's cheaper to store the scalar values directly in the cache.\n      return __DEV__ ? cloneDeep(value) : value;\n    }\n\n    if (isArray(value)) {\n      return value.map((item, i) => {\n        const value = this.processFieldValue(\n          item,\n          field,\n          context,\n          getChildMergeTree(mergeTree, i)\n        );\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context,\n      mergeTree,\n    });\n  }\n\n  // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with\n  // some additions for tracking @client and @defer directives.\n  private flattenFields<\n    TContext extends Pick<\n      WriteContext,\n      | \"clientOnly\"\n      | \"deferred\"\n      | \"flavors\"\n      | \"fragmentMap\"\n      | \"lookupFragment\"\n      | \"variables\"\n    >,\n  >(\n    selectionSet: SelectionSetNode,\n    result: Record<string, any>,\n    context: TContext,\n    typename = getTypenameFromResult(result, selectionSet, context.fragmentMap)\n  ): Map<FieldNode, TContext> {\n    const fieldMap = new Map<FieldNode, TContext>();\n    const { policies } = this.cache;\n\n    const limitingTrie = new Trie<{\n      // Tracks whether (selectionSet, clientOnly, deferred) has been flattened\n      // before. The GraphQL specification only uses the fragment name for\n      // skipping previously visited fragments, but the top-level fragment\n      // selection set corresponds 1:1 with the fagment name (and is slightly\n      // easier too work with), and we need to consider clientOnly and deferred\n      // values as well, potentially revisiting selection sets that were\n      // previously visited with different inherited configurations of those\n      // directives.\n      visited?: boolean;\n    }>(false); // No need for WeakMap, since limitingTrie does not escape.\n\n    (function flatten(\n      this: void,\n      selectionSet: SelectionSetNode,\n      inheritedContext: TContext\n    ) {\n      const visitedNode = limitingTrie.lookup(\n        selectionSet,\n        // Because we take inheritedClientOnly and inheritedDeferred into\n        // consideration here (in addition to selectionSet), it's possible for\n        // the same selection set to be flattened more than once, if it appears\n        // in the query with different @client and/or @directive configurations.\n        inheritedContext.clientOnly,\n        inheritedContext.deferred\n      );\n      if (visitedNode.visited) return;\n      visitedNode.visited = true;\n\n      selectionSet.selections.forEach((selection) => {\n        if (!shouldInclude(selection, context.variables)) return;\n\n        let { clientOnly, deferred } = inheritedContext;\n        if (\n          // Since the presence of @client or @defer on this field can only\n          // cause clientOnly or deferred to become true, we can skip the\n          // forEach loop if both clientOnly and deferred are already true.\n          !(clientOnly && deferred) &&\n          isNonEmptyArray(selection.directives)\n        ) {\n          selection.directives.forEach((dir) => {\n            const name = dir.name.value;\n            if (name === \"client\") clientOnly = true;\n            if (name === \"defer\") {\n              const args = argumentsObjectFromField(dir, context.variables);\n              // The @defer directive takes an optional args.if boolean\n              // argument, similar to @include(if: boolean). Note that\n              // @defer(if: false) does not make context.deferred false, but\n              // instead behaves as if there was no @defer directive.\n              if (!args || (args as { if?: boolean }).if !== false) {\n                deferred = true;\n              }\n              // TODO In the future, we may want to record args.label using\n              // context.deferred, if a label is specified.\n            }\n          });\n        }\n\n        if (isField(selection)) {\n          const existing = fieldMap.get(selection);\n          if (existing) {\n            // If this field has been visited along another recursive path\n            // before, the final context should have clientOnly or deferred set\n            // to true only if *all* paths have the directive (hence the &&).\n            clientOnly = clientOnly && existing.clientOnly;\n            deferred = deferred && existing.deferred;\n          }\n\n          fieldMap.set(\n            selection,\n            getContextFlavor(context, clientOnly, deferred)\n          );\n        } else {\n          const fragment = getFragmentFromSelection(\n            selection,\n            context.lookupFragment\n          );\n\n          if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n            throw newInvariantError(\n              `No fragment named %s`,\n              selection.name.value\n            );\n          }\n\n          if (\n            fragment &&\n            policies.fragmentMatches(\n              fragment,\n              typename,\n              result,\n              context.variables\n            )\n          ) {\n            flatten(\n              fragment.selectionSet,\n              getContextFlavor(context, clientOnly, deferred)\n            );\n          }\n        }\n      });\n    })(selectionSet, context);\n\n    return fieldMap;\n  }\n\n  private applyMerges<T extends StoreValue>(\n    mergeTree: MergeTree,\n    existing: StoreValue,\n    incoming: T,\n    context: WriteContext,\n    getStorageArgs?: Parameters<EntityStore[\"getStorage\"]>\n  ): T | Reference {\n    if (mergeTree.map.size && !isReference(incoming)) {\n      const e: StoreObject | Reference | undefined =\n        // Items in the same position in different arrays are not\n        // necessarily related to each other, so when incoming is an array\n        // we process its elements as if there was no existing data.\n        (\n          !isArray(incoming) &&\n          // Likewise, existing must be either a Reference or a StoreObject\n          // in order for its fields to be safe to merge with the fields of\n          // the incoming object.\n          (isReference(existing) || storeValueIsStoreObject(existing))\n        ) ?\n          existing\n        : void 0;\n\n      // This narrowing is implied by mergeTree.map.size > 0 and\n      // !isReference(incoming), though TypeScript understandably cannot\n      // hope to infer this type.\n      const i = incoming as StoreObject | StoreValue[];\n\n      // The options.storage objects provided to read and merge functions\n      // are derived from the identity of the parent object plus a\n      // sequence of storeFieldName strings/numbers identifying the nested\n      // field name path of each field value to be merged.\n      if (e && !getStorageArgs) {\n        getStorageArgs = [isReference(e) ? e.__ref : e];\n      }\n\n      // It's possible that applying merge functions to this subtree will\n      // not change the incoming data, so this variable tracks the fields\n      // that did change, so we can create a new incoming object when (and\n      // only when) at least one incoming field has changed. We use a Map\n      // to preserve the type of numeric keys.\n      let changedFields: Map<string | number, StoreValue> | undefined;\n\n      const getValue = (\n        from: typeof e | typeof i,\n        name: string | number\n      ): StoreValue => {\n        return (\n          isArray(from) ?\n            typeof name === \"number\" ?\n              from[name]\n            : void 0\n          : context.store.getFieldValue(from, String(name))\n        );\n      };\n\n      mergeTree.map.forEach((childTree, storeFieldName) => {\n        const eVal = getValue(e, storeFieldName);\n        const iVal = getValue(i, storeFieldName);\n        // If we have no incoming data, leave any existing data untouched.\n        if (void 0 === iVal) return;\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n        const aVal = this.applyMerges(\n          childTree,\n          eVal,\n          iVal,\n          context,\n          getStorageArgs\n        );\n        if (aVal !== iVal) {\n          changedFields = changedFields || new Map();\n          changedFields.set(storeFieldName, aVal);\n        }\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n\n      if (changedFields) {\n        // Shallow clone i so we can add changed fields to it.\n        incoming = (isArray(i) ? i.slice(0) : { ...i }) as T;\n        changedFields.forEach((value, name) => {\n          (incoming as any)[name] = value;\n        });\n      }\n    }\n\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(\n        existing,\n        incoming,\n        mergeTree.info,\n        context,\n        getStorageArgs && context.store.getStorage(...getStorageArgs)\n      );\n    }\n\n    return incoming;\n  }\n}\n\nconst emptyMergeTreePool: MergeTree[] = [];\n\nfunction getChildMergeTree(\n  { map }: MergeTree,\n  name: string | number\n): MergeTree {\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || { map: new Map() });\n  }\n  return map.get(name)!;\n}\n\nfunction mergeMergeTrees(\n  left: MergeTree | undefined,\n  right: MergeTree | undefined\n): MergeTree {\n  if (left === right || !right || mergeTreeIsEmpty(right)) return left!;\n  if (!left || mergeTreeIsEmpty(left)) return right;\n\n  const info =\n    left.info && right.info ?\n      {\n        ...left.info,\n        ...right.info,\n      }\n    : left.info || right.info;\n\n  const needToMergeMaps = left.map.size && right.map.size;\n  const map =\n    needToMergeMaps ? new Map()\n    : left.map.size ? left.map\n    : right.map;\n\n  const merged = { info, map };\n\n  if (needToMergeMaps) {\n    const remainingRightKeys = new Set(right.map.keys());\n\n    left.map.forEach((leftTree, key) => {\n      merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n      remainingRightKeys.delete(key);\n    });\n\n    remainingRightKeys.forEach((key) => {\n      merged.map.set(\n        key,\n        mergeMergeTrees(right.map.get(key), left.map.get(key))\n      );\n    });\n  }\n\n  return merged;\n}\n\nfunction mergeTreeIsEmpty(tree: MergeTree | undefined): boolean {\n  return !tree || !(tree.info || tree.map.size);\n}\n\nfunction maybeRecycleChildMergeTree({ map }: MergeTree, name: string | number) {\n  const childTree = map.get(name);\n  if (childTree && mergeTreeIsEmpty(childTree)) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\n\nconst warnings = new Set<string>();\n\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(\n  existingRef: Reference,\n  incomingObj: StoreObject,\n  storeFieldName: string,\n  store: NormalizedCache\n) {\n  const getChild = (objOrRef: StoreObject | Reference): StoreObject | false => {\n    const child = store.getFieldValue<StoreObject>(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n\n  const existing = getChild(existingRef);\n  if (!existing) return;\n\n  const incoming = getChild(incomingObj);\n  if (!incoming) return;\n\n  // It's always safe to replace a reference, since it refers to data\n  // safely stored elsewhere.\n  if (isReference(existing)) return;\n\n  // If the values are structurally equivalent, we do not need to worry\n  // about incoming replacing existing.\n  if (equal(existing, incoming)) return;\n\n  // If we're replacing every key of the existing object, then the\n  // existing data would be overwritten even if the objects were\n  // normalized, so warning would not be helpful here.\n  if (\n    Object.keys(existing).every(\n      (key) => store.getFieldValue(incoming, key) !== void 0\n    )\n  ) {\n    return;\n  }\n\n  const parentType =\n    store.getFieldValue<string>(existingRef, \"__typename\") ||\n    store.getFieldValue<string>(incomingObj, \"__typename\");\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const typeDotName = `${parentType}.${fieldName}`;\n  // Avoid warning more than once for the same type and field name.\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n\n  const childTypenames: string[] = [];\n  // Arrays do not have __typename fields, and always need a custom merge\n  // function, even if their elements are normalized entities.\n  if (!isArray(existing) && !isArray(incoming)) {\n    [existing, incoming].forEach((child) => {\n      const typename = store.getFieldValue(child, \"__typename\");\n      if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n\n  invariant.warn(\n    `Cache data may be lost when replacing the %s field of a %s object.\n\nThis could cause additional (usually avoidable) network requests to fetch data that were otherwise cached.\n\nTo address this problem (which is not a bug in Apollo Client), %sdefine a custom merge function for the %s field, so InMemoryCache can safely merge these objects:\n\n  existing: %o\n  incoming: %o\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n`,\n    fieldName,\n    parentType,\n    childTypenames.length ?\n      \"either ensure all objects of type \" +\n        childTypenames.join(\" and \") +\n        \" have an ID or a custom merge function, or \"\n    : \"\",\n    typeDotName,\n    { ...existing },\n    { ...incoming }\n  );\n}\n\nfunction getTypenameFromResult(\n  result: Record<string, any>,\n  selectionSet: SelectionSetNode,\n  fragmentMap?: FragmentMap\n): string | undefined {\n  let fragments: undefined | Array<InlineFragmentNode | FragmentSpreadNode>;\n  for (const selection of selectionSet.selections) {\n    if (isField(selection)) {\n      if (selection.name.value === \"__typename\") {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else if (fragments) {\n      fragments.push(selection);\n    } else {\n      fragments = [selection];\n    }\n  }\n  if (typeof result.__typename === \"string\") {\n    return result.__typename;\n  }\n  if (fragments) {\n    for (const selection of fragments) {\n      const typename = getTypenameFromResult(\n        result,\n        getFragmentFromSelection(selection, fragmentMap)!.selectionSet,\n        fragmentMap\n      );\n      if (typeof typename === \"string\") {\n        return typename;\n      }\n    }\n  }\n}\n","import type { ErrorLike } from \"@apollo/client\";\n\nconst registry = new WeakSet<ErrorLike>();\n\n/** @internal Please do not use directly. */\nexport function registerLinkError(error: ErrorLike) {\n  registry.add(error);\n}\n\n/**\n * A facade error type that keeps a registry of errors emitted from the link\n * chain. `LinkError` is not an error class itself but rather a utility to\n * detect whether an error originated from the link chain.\n *\n * @remarks\n *\n * Use `LinkError` to distinguish between errors from the link chain and custom\n * errors. This is helpful for retrying an operation at the call site only when\n * the error originates from the link chain.\n *\n * @example\n *\n * The following example creates a custom wrapped query function that detects\n * whether the query includes an operation name and throws if not.\n *\n * ```ts\n * import { LinkError } from \"@apollo/client/errors\";\n *\n * async function runQuery<TData>(query: TypedDocumentNode<TData>) {\n *   if (!hasOperationName(query)) {\n *     throw new Error(\"Queries should have operation names.\");\n *   }\n *\n *   return client.watchQuery({ query });\n * }\n *\n * try {\n *   const result = await runQuery(query);\n * } catch (error) {\n *   // Only log the error if the error wasn't our own custom thrown error\n *   if (LinkError.is(error)) {\n *     console.log(\"Got network error:\", error.message);\n *   }\n * }\n * ```\n */\nexport const LinkError = {\n  /**\n   * A method that determines whether an error originated from the link chain.\n   * `is` does not provide any type narrowing.\n   *\n   * @example\n   *\n   * ```ts\n   * if (LinkError.is(error)) {\n   *   // The error originated from the link chain\n   *   console.log(\"Got network error:\", error.message);\n   * }\n   * ```\n   */\n  is: (error: unknown) => registry.has(error as ErrorLike),\n};\n","import type { ApolloLink } from \"@apollo/client/link\";\nimport type { HKT } from \"@apollo/client/utilities\";\nimport { hasDirectives } from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport type { Incremental } from \"../types.js\";\n\nexport declare namespace NotImplementedHandler {\n  interface NotImplementedResult extends HKT {\n    arg1: unknown; // TData\n    arg2: unknown; // TExtensions\n    return: never;\n  }\n  export interface TypeOverrides {\n    AdditionalApolloLinkResultTypes: NotImplementedResult;\n  }\n}\n\nexport class NotImplementedHandler implements Incremental.Handler<never> {\n  isIncrementalResult(_: any): _ is never {\n    return false;\n  }\n  prepareRequest(request: ApolloLink.Request) {\n    invariant(\n      !hasDirectives([\"defer\"], request.query),\n      \"`@defer` is not supported without specifying an incremental handler. Please pass a handler as the `incrementalHandler` option to the `ApolloClient` constructor.\"\n    );\n\n    return request;\n  }\n  extractErrors() {}\n  // This code path can never be reached, so we won't implement it.\n  startRequest = undefined as any;\n}\n","import type { DocumentNode, FieldNode, SelectionSetNode } from \"graphql\";\nimport { Kind } from \"graphql\";\nimport type { OptimisticWrapperFunction } from \"optimism\";\nimport { wrap } from \"optimism\";\n\nimport type { Reference, StoreObject } from \"@apollo/client/utilities\";\nimport {\n  addTypenameToDocument,\n  cacheSizes,\n  canonicalStringify,\n  isReference,\n} from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport type {\n  FragmentMap,\n  FragmentMapFunction,\n} from \"@apollo/client/utilities/internal\";\nimport {\n  DeepMerger,\n  getDefaultValues,\n  getFragmentFromSelection,\n  getMainDefinition,\n  getQueryDefinition,\n  isArray,\n  isField,\n  isNonNullObject,\n  makeReference,\n  maybeDeepFreeze,\n  mergeDeepArray,\n  resultKeyNameFromField,\n  shouldInclude,\n} from \"@apollo/client/utilities/internal\";\nimport {\n  invariant,\n  newInvariantError,\n} from \"@apollo/client/utilities/invariant\";\n\nimport { defaultCacheSizes } from \"../../utilities/caching/sizes.js\";\nimport type { Cache } from \"../core/types/Cache.js\";\nimport type { MissingTree } from \"../core/types/common.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\n\nimport {\n  maybeDependOnExistenceOfEntity,\n  supportsResultCaching,\n} from \"./entityStore.js\";\nimport {\n  extractFragmentContext,\n  getTypenameFromStoreObject,\n} from \"./helpers.js\";\nimport type { InMemoryCache } from \"./inMemoryCache.js\";\nimport type { Policies } from \"./policies.js\";\nimport type {\n  DiffQueryAgainstStoreOptions,\n  InMemoryCacheConfig,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from \"./types.js\";\n\ninterface ReadContext extends ReadMergeModifyContext {\n  query: DocumentNode;\n  policies: Policies;\n  fragmentMap: FragmentMap;\n  lookupFragment: FragmentMapFunction;\n}\n\ntype ExecResult<R = any> = {\n  result: R;\n  missing?: MissingTree;\n};\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  objectOrReference: StoreObject | Reference;\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\ntype ExecSubSelectedArrayOptions = {\n  field: FieldNode;\n  array: readonly any[];\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\ninterface StoreReaderConfig {\n  cache: InMemoryCache;\n  fragments?: InMemoryCacheConfig[\"fragments\"];\n}\n\n// Arguments type after keyArgs translation.\ntype ExecSelectionSetKeyArgs = [\n  SelectionSetNode,\n  StoreObject | Reference,\n  ReadMergeModifyContext,\n];\n\nfunction execSelectionSetKeyArgs(\n  options: ExecSelectionSetOptions\n): ExecSelectionSetKeyArgs {\n  return [options.selectionSet, options.objectOrReference, options.context];\n}\n\nexport class StoreReader {\n  // cached version of executeSelectionSet\n  private executeSelectionSet: OptimisticWrapperFunction<\n    [ExecSelectionSetOptions], // Actual arguments tuple type.\n    ExecResult, // Actual return type.\n    ExecSelectionSetKeyArgs\n  >;\n\n  // cached version of executeSubSelectedArray\n  private executeSubSelectedArray: OptimisticWrapperFunction<\n    [ExecSubSelectedArrayOptions],\n    ExecResult<any>,\n    [ExecSubSelectedArrayOptions]\n  >;\n\n  private config: {\n    cache: InMemoryCache;\n    fragments?: InMemoryCacheConfig[\"fragments\"];\n  };\n\n  private knownResults = new WeakMap<Record<string, any>, SelectionSetNode>();\n\n  constructor(config: StoreReaderConfig) {\n    this.config = config;\n\n    // memoized functions in this class will be \"garbage-collected\"\n    // by recreating the whole `StoreReader` in\n    // `InMemoryCache.resetResultsCache`\n    // (triggered from `InMemoryCache.gc` with `resetResultCache: true`)\n    this.executeSelectionSet = wrap(\n      (options) => {\n        const peekArgs = execSelectionSetKeyArgs(options);\n\n        const other = this.executeSelectionSet.peek(...peekArgs);\n\n        if (other) {\n          // If we previously read this result with canonization enabled, we can\n          // return that canonized result as-is.\n          return other;\n        }\n\n        maybeDependOnExistenceOfEntity(\n          options.context.store,\n          options.enclosingRef.__ref\n        );\n\n        // Finally, if we didn't find any useful previous results, run the real\n        // execSelectionSetImpl method with the given options.\n        return this.execSelectionSetImpl(options);\n      },\n      {\n        max:\n          cacheSizes[\"inMemoryCache.executeSelectionSet\"] ||\n          defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"],\n        keyArgs: execSelectionSetKeyArgs,\n        // Note that the parameters of makeCacheKey are determined by the\n        // array returned by keyArgs.\n        makeCacheKey(selectionSet, parent, context) {\n          if (supportsResultCaching(context.store)) {\n            return context.store.makeCacheKey(\n              selectionSet,\n              isReference(parent) ? parent.__ref : parent,\n              context.varString\n            );\n          }\n        },\n      }\n    );\n\n    this.executeSubSelectedArray = wrap(\n      (options: ExecSubSelectedArrayOptions) => {\n        maybeDependOnExistenceOfEntity(\n          options.context.store,\n          options.enclosingRef.__ref\n        );\n        return this.execSubSelectedArrayImpl(options);\n      },\n      {\n        max:\n          cacheSizes[\"inMemoryCache.executeSubSelectedArray\"] ||\n          defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"],\n        makeCacheKey({ field, array, context }) {\n          if (supportsResultCaching(context.store)) {\n            return context.store.makeCacheKey(field, array, context.varString);\n          }\n        },\n      }\n    );\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    rootId = \"ROOT_QUERY\",\n    variables,\n    returnPartialData = true,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    const policies = this.config.cache.policies;\n\n    variables = {\n      ...getDefaultValues(getQueryDefinition(query)),\n      ...variables!,\n    };\n\n    const rootRef = makeReference(rootId);\n    const execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: {\n        store,\n        query,\n        policies,\n        variables,\n        varString: canonicalStringify(variables),\n        ...extractFragmentContext(query, this.config.fragments),\n      },\n    });\n\n    let missing: MissingFieldError | undefined;\n    if (execResult.missing) {\n      missing = new MissingFieldError(\n        firstMissing(execResult.missing)!,\n        execResult.missing,\n        query,\n        variables\n      );\n    }\n\n    const complete = !missing;\n    const { result } = execResult;\n\n    return {\n      result:\n        complete || returnPartialData ?\n          Object.keys(result).length === 0 ?\n            null\n          : result\n        : null,\n      complete,\n      missing,\n    } as Cache.DiffResult<T>;\n  }\n\n  public isFresh(\n    result: Record<string, any>,\n    parent: StoreObject | Reference,\n    selectionSet: SelectionSetNode,\n    context: ReadMergeModifyContext\n  ): boolean {\n    if (\n      supportsResultCaching(context.store) &&\n      this.knownResults.get(result) === selectionSet\n    ) {\n      const latest = this.executeSelectionSet.peek(\n        selectionSet,\n        parent,\n        context\n      );\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Uncached version of executeSelectionSet.\n  private execSelectionSetImpl({\n    selectionSet,\n    objectOrReference,\n    enclosingRef,\n    context,\n  }: ExecSelectionSetOptions): ExecResult {\n    if (\n      isReference(objectOrReference) &&\n      !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n      !context.store.has(objectOrReference.__ref)\n    ) {\n      return {\n        result: {},\n        missing: `Dangling reference to missing ${objectOrReference.__ref} object`,\n      };\n    }\n\n    const { variables, policies, store } = context;\n    const typename = store.getFieldValue<string>(\n      objectOrReference,\n      \"__typename\"\n    );\n\n    const objectsToMerge: Record<string, any>[] = [];\n    let missing: MissingTree | undefined;\n    const missingMerger = new DeepMerger();\n\n    if (typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n      // Ensure we always include a default value for the __typename\n      // field, if we have one. Note that this field can be overridden by other\n      // merged objects.\n      objectsToMerge.push({ __typename: typename });\n    }\n\n    function handleMissing<T>(result: ExecResult<T>, resultName: string): T {\n      if (result.missing) {\n        missing = missingMerger.merge(missing, {\n          [resultName]: result.missing,\n        });\n      }\n      return result.result;\n    }\n\n    const workSet = new Set(selectionSet.selections);\n\n    workSet.forEach((selection) => {\n      // Omit fields with directives @skip(if: <truthy value>) or\n      // @include(if: <falsy value>).\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        let fieldValue = policies.readField(\n          {\n            fieldName: selection.name.value,\n            field: selection,\n            variables: context.variables,\n            from: objectOrReference,\n          },\n          context\n        );\n\n        const resultName = resultKeyNameFromField(selection);\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            missing = missingMerger.merge(missing, {\n              [resultName]: `Can't find field '${selection.name.value}' on ${\n                isReference(objectOrReference) ?\n                  objectOrReference.__ref + \" object\"\n                : \"object \" + JSON.stringify(objectOrReference, null, 2)\n              }`,\n            });\n          }\n        } else if (isArray(fieldValue)) {\n          if (fieldValue.length > 0) {\n            fieldValue = handleMissing(\n              this.executeSubSelectedArray({\n                field: selection,\n                array: fieldValue,\n                enclosingRef,\n                context,\n              }),\n              resultName\n            );\n          }\n        } else if (!selection.selectionSet) {\n          // do nothing\n        } else if (fieldValue != null) {\n          // In this case, because we know the field has a selection set,\n          // it must be trying to query a GraphQLObjectType, which is why\n          // fieldValue must be != null.\n          fieldValue = handleMissing(\n            this.executeSelectionSet({\n              selectionSet: selection.selectionSet,\n              objectOrReference: fieldValue as StoreObject | Reference,\n              enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n              context,\n            }),\n            resultName\n          );\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push({ [resultName]: fieldValue });\n        }\n      } else {\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.lookupFragment\n        );\n\n        if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n          throw newInvariantError(`No fragment named %s`, selection.name.value);\n        }\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n\n    const result = mergeDeepArray(objectsToMerge);\n    const finalResult: ExecResult = { result, missing };\n    const frozen = maybeDeepFreeze(finalResult);\n\n    // Store this result with its selection set so that we can quickly\n    // recognize it again in the StoreReader#isFresh method.\n    if (frozen.result) {\n      this.knownResults.set(frozen.result, selectionSet);\n    }\n\n    return frozen;\n  }\n\n  // Uncached version of executeSubSelectedArray.\n  private execSubSelectedArrayImpl({\n    field,\n    array,\n    enclosingRef,\n    context,\n  }: ExecSubSelectedArrayOptions): ExecResult {\n    let missing: MissingTree | undefined;\n    let missingMerger = new DeepMerger<MissingTree[]>();\n\n    function handleMissing<T>(childResult: ExecResult<T>, i: number): T {\n      if (childResult.missing) {\n        missing = missingMerger.merge(missing, { [i]: childResult.missing });\n      }\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map((item, i) => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      // This is a nested array, recurse\n      if (isArray(item)) {\n        return handleMissing(\n          this.executeSubSelectedArray({\n            field,\n            array: item,\n            enclosingRef,\n            context,\n          }),\n          i\n        );\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(\n          this.executeSelectionSet({\n            selectionSet: field.selectionSet,\n            objectOrReference: item,\n            enclosingRef: isReference(item) ? item : enclosingRef,\n            context,\n          }),\n          i\n        );\n      }\n\n      if (__DEV__) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      return item;\n    });\n\n    return {\n      result: array,\n      missing,\n    };\n  }\n}\n\nfunction firstMissing(tree: MissingTree): string | undefined {\n  try {\n    JSON.stringify(tree, (_, value) => {\n      if (typeof value === \"string\") throw value;\n      return value;\n    });\n  } catch (result) {\n    return result as string;\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  store: NormalizedCache,\n  field: FieldNode,\n  fieldValue: any\n) {\n  if (!field.selectionSet) {\n    const workSet = new Set([fieldValue]);\n    workSet.forEach((value) => {\n      if (isNonNullObject(value)) {\n        invariant(\n          !isReference(value),\n          `Missing selection set for object of type %s returned for query field %s`,\n          getTypenameFromStoreObject(store, value),\n          field.name.value\n        );\n        Object.values(value).forEach(workSet.add, workSet);\n      }\n    });\n  }\n}\n","import { equal } from \"@wry/equality\";\nimport { Trie } from \"@wry/trie\";\nimport type { DocumentNode, FieldNode, SelectionSetNode } from \"graphql\";\nimport type { OptimisticDependencyFunction } from \"optimism\";\nimport { dep } from \"optimism\";\n\nimport type {\n  Reference,\n  StoreObject,\n  StoreValue,\n} from \"@apollo/client/utilities\";\nimport { isReference } from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport {\n  DeepMerger,\n  isNonNullObject,\n  makeReference,\n  maybeDeepFreeze,\n} from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport type { Cache } from \"../core/types/Cache.js\";\nimport type {\n  CanReadFunction,\n  DeleteModifier,\n  InvalidateModifier,\n  Modifier,\n  ModifierDetails,\n  Modifiers,\n  ReadFieldOptions,\n  SafeReadonly,\n  ToReferenceFunction,\n} from \"../core/types/common.js\";\n\nimport { fieldNameFromStoreName, hasOwn } from \"./helpers.js\";\nimport type { Policies, StorageType } from \"./policies.js\";\nimport type { NormalizedCache, NormalizedCacheObject } from \"./types.js\";\n\nconst DELETE = {} as DeleteModifier;\nconst delModifier: Modifier<any> = () => DELETE;\nconst INVALIDATE = {} as InvalidateModifier;\n\nexport abstract class EntityStore implements NormalizedCache {\n  public declare static Root: typeof Root;\n\n  protected data: NormalizedCacheObject = {};\n\n  constructor(\n    public readonly policies: Policies,\n    public readonly group: CacheGroup\n  ) {}\n\n  public abstract addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any\n  ): Layer;\n\n  public abstract removeLayer(layerId: string): EntityStore;\n\n  // Although the EntityStore class is abstract, it contains concrete\n  // implementations of the various NormalizedCache interface methods that\n  // are inherited by the Root and Layer subclasses.\n\n  public toObject(): NormalizedCacheObject {\n    return { ...this.data };\n  }\n\n  public has(dataId: string): boolean {\n    return this.lookup(dataId, true) !== void 0;\n  }\n\n  public get(dataId: string, fieldName: string): StoreValue {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      const storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (\n      fieldName === \"__typename\" &&\n      hasOwn.call(this.policies.rootTypenamesById, dataId)\n    ) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  }\n\n  protected lookup(\n    dataId: string,\n    dependOnExistence?: boolean\n  ): StoreObject | undefined {\n    // The has method (above) calls lookup with dependOnExistence = true, so\n    // that it can later be invalidated when we add or remove a StoreObject for\n    // this dataId. Any consumer who cares about the contents of the StoreObject\n    // should not rely on this dependency, since the contents could change\n    // without the object being added or removed.\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return {};\n    }\n  }\n\n  public merge(older: string | StoreObject, newer: StoreObject | string): void {\n    let dataId: string | undefined;\n\n    // Convert unexpected references to ID strings.\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n\n    const existing: StoreObject | undefined =\n      typeof older === \"string\" ? this.lookup((dataId = older)) : older;\n\n    const incoming: StoreObject | undefined =\n      typeof newer === \"string\" ? this.lookup((dataId = newer)) : newer;\n\n    // If newer was a string ID, but that ID was not defined in this store,\n    // then there are no fields to be merged, so we're done.\n    if (!incoming) return;\n\n    invariant(typeof dataId === \"string\", \"store.merge expects a string ID\");\n\n    const merged: StoreObject = new DeepMerger(storeObjectReconciler).merge(\n      existing,\n      incoming\n    );\n\n    // Even if merged === existing, existing may have come from a lower\n    // layer, so we always need to set this.data[dataId] on this level.\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        const fieldsToDirty: Record<string, 1> = {};\n\n        // If we added a new StoreObject where there was previously none, dirty\n        // anything that depended on the existence of this dataId, such as the\n        // EntityStore#has method.\n        if (!existing) fieldsToDirty.__exists = 1;\n\n        // Now invalidate dependents who called getFieldValue for any fields\n        // that are changing as a result of this merge.\n        Object.keys(incoming).forEach((storeFieldName) => {\n          if (\n            !existing ||\n            existing[storeFieldName] !== merged[storeFieldName]\n          ) {\n            // Always dirty the full storeFieldName, which may include\n            // serialized arguments following the fieldName prefix.\n            fieldsToDirty[storeFieldName] = 1;\n\n            // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n            // different from storeFieldName and this field does not have\n            // keyArgs configured, because that means the cache can't make\n            // any assumptions about how field values with the same field\n            // name but different arguments might be interrelated, so it\n            // must err on the side of invalidating all field values that\n            // share the same short fieldName, regardless of arguments.\n            const fieldName = fieldNameFromStoreName(storeFieldName);\n            if (\n              fieldName !== storeFieldName &&\n              !this.policies.hasKeyArgs(merged.__typename, fieldName)\n            ) {\n              fieldsToDirty[fieldName] = 1;\n            }\n\n            // If merged[storeFieldName] has become undefined, and this is the\n            // Root layer, actually delete the property from the merged object,\n            // which is guaranteed to have been created fresh in this method.\n            if (merged[storeFieldName] === void 0 && !(this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        if (\n          fieldsToDirty.__typename &&\n          !(existing && existing.__typename) &&\n          // Since we return default root __typename strings\n          // automatically from store.get, we don't need to dirty the\n          // ROOT_QUERY.__typename field if merged.__typename is equal\n          // to the default string (usually \"Query\").\n          this.policies.rootTypenamesById[dataId] === merged.__typename\n        ) {\n          delete fieldsToDirty.__typename;\n        }\n\n        Object.keys(fieldsToDirty).forEach((fieldName) =>\n          this.group.dirty(dataId as string, fieldName)\n        );\n      }\n    }\n  }\n\n  public modify(\n    dataId: string,\n    fields: Modifier<any> | Modifiers<Record<string, any>>,\n    exact: boolean\n  ): boolean {\n    const storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      const changedFields: Record<string, any> = {};\n      let needToMerge = false;\n      let allDeleted = true;\n\n      const sharedDetails = {\n        DELETE,\n        INVALIDATE,\n        isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: <V = StoreValue>(\n          fieldNameOrOptions: string | ReadFieldOptions,\n          from?: StoreObject | Reference\n        ) =>\n          this.policies.readField<V>(\n            typeof fieldNameOrOptions === \"string\" ?\n              {\n                fieldName: fieldNameOrOptions,\n                from: from || makeReference(dataId),\n              }\n            : fieldNameOrOptions,\n            { store: this }\n          ),\n      } satisfies Partial<ModifierDetails>;\n\n      Object.keys(storeObject).forEach((storeFieldName) => {\n        const fieldName = fieldNameFromStoreName(storeFieldName);\n        let fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        const modify: Modifier<StoreValue> | undefined =\n          typeof fields === \"function\" ? fields : (\n            fields[storeFieldName] || (exact ? undefined : fields[fieldName])\n          );\n        if (modify) {\n          let newValue =\n            modify === delModifier ? DELETE : (\n              modify(maybeDeepFreeze(fieldValue), {\n                ...sharedDetails,\n                fieldName,\n                storeFieldName,\n                storage: this.getStorage(dataId, storeFieldName),\n              })\n            );\n          if (newValue === INVALIDATE) {\n            this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields[storeFieldName] = newValue;\n              needToMerge = true;\n              fieldValue = newValue as StoreValue;\n\n              if (__DEV__) {\n                const checkReference = (ref: Reference) => {\n                  if (this.lookup(ref.__ref) === undefined) {\n                    invariant.warn(\n                      \"cache.modify: You are trying to write a Reference that is not part of the store: %o\\n\" +\n                        \"Please make sure to set the `mergeIntoStore` parameter to `true` when creating a Reference that is not part of the store yet:\\n\" +\n                        \"`toReference(object, true)`\",\n                      ref\n                    );\n                    return true;\n                  }\n                };\n                if (isReference(newValue)) {\n                  checkReference(newValue);\n                } else if (Array.isArray(newValue)) {\n                  // Warn about writing \"mixed\" arrays of Reference and non-Reference objects\n                  let seenReference: boolean = false;\n                  let someNonReference: unknown;\n                  for (const value of newValue) {\n                    if (isReference(value)) {\n                      seenReference = true;\n                      if (checkReference(value)) break;\n                    } else {\n                      // Do not warn on primitive values, since those could never be represented\n                      // by a reference. This is a valid (albeit uncommon) use case.\n                      if (typeof value === \"object\" && !!value) {\n                        const [id] = this.policies.identify(value);\n                        // check if object could even be referenced, otherwise we are not interested in it for this warning\n                        if (id) {\n                          someNonReference = value;\n                        }\n                      }\n                    }\n                    if (seenReference && someNonReference !== undefined) {\n                      invariant.warn(\n                        \"cache.modify: Writing an array with a mix of both References and Objects will not result in the Objects being normalized correctly.\\n\" +\n                          \"Please convert the object instance %o to a Reference before writing it to the cache by calling `toReference(object, true)`.\",\n                        someNonReference\n                      );\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted = false;\n        }\n      });\n\n      if (needToMerge) {\n        this.merge(dataId, changedFields);\n\n        if (allDeleted) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // If called with only one argument, removes the entire entity\n  // identified by dataId. If called with a fieldName as well, removes all\n  // fields of that entity whose names match fieldName according to the\n  // fieldNameFromStoreName helper function. If called with a fieldName\n  // and variables, removes all fields of that entity whose names match fieldName\n  // and whose arguments when cached exactly match the variables passed.\n  public delete(\n    dataId: string,\n    fieldName?: string,\n    args?: Record<string, any>\n  ) {\n    const storeObject = this.lookup(dataId);\n    if (storeObject) {\n      const typename = this.getFieldValue<string>(storeObject, \"__typename\");\n      const storeFieldName =\n        fieldName && args ?\n          this.policies.getStoreFieldName({ typename, fieldName, args })\n        : fieldName;\n      return this.modify(\n        dataId,\n        storeFieldName ?\n          {\n            [storeFieldName]: delModifier,\n          }\n        : delModifier,\n        !!args\n      );\n    }\n    return false;\n  }\n\n  public evict(options: Cache.EvictOptions, limit: EntityStore): boolean {\n    let evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n      // Always invalidate the field to trigger rereading of watched\n      // queries, even if no cache data was modified by the eviction,\n      // because queries may depend on computed fields with custom read\n      // functions, whose values are not stored in the EntityStore.\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  }\n\n  public clear(): void {\n    this.replace(null);\n  }\n\n  public extract(): NormalizedCacheObject {\n    const obj = this.toObject();\n    const extraRootIds: string[] = [];\n    this.getRootIdSet().forEach((id) => {\n      if (!hasOwn.call(this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = { extraRootIds: extraRootIds.sort() };\n    }\n    return obj;\n  }\n\n  public replace(newData: NormalizedCacheObject | null): void {\n    Object.keys(this.data).forEach((dataId) => {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        this.delete(dataId);\n      }\n    });\n    if (newData) {\n      const { __META, ...rest } = newData;\n      Object.keys(rest).forEach((dataId) => {\n        this.merge(dataId, rest[dataId] as StoreObject);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  }\n\n  public abstract getStorage(\n    idOrObj: string | StoreObject,\n    ...storeFieldNames: (string | number)[]\n  ): StorageType;\n\n  // Maps root entity IDs to the number of times they have been retained, minus\n  // the number of times they have been released. Retained entities keep other\n  // entities they reference (even indirectly) from being garbage collected.\n  private rootIds: {\n    [rootId: string]: number;\n  } = {};\n\n  public retain(rootId: string): number {\n    return (this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1);\n  }\n\n  public release(rootId: string): number {\n    if (this.rootIds[rootId] > 0) {\n      const count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  }\n\n  // Return a Set<string> of all the ID strings that have been retained by\n  // this layer/root *and* any layers/roots beneath it.\n  public getRootIdSet(ids = new Set<string>()) {\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n      // always considered roots for garbage collection, regardless of\n      // their retainment counts in this.rootIds.\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  }\n\n  // The goal of garbage collection is to remove IDs from the Root layer of the\n  // store that are no longer reachable starting from any IDs that have been\n  // explicitly retained (see retain and release, above). Returns an array of\n  // dataId strings that were removed from the store.\n  public gc() {\n    const ids = this.getRootIdSet();\n    const snapshot = this.toObject();\n    ids.forEach((id) => {\n      if (hasOwn.call(snapshot, id)) {\n        // Because we are iterating over an ECMAScript Set, the IDs we add here\n        // will be visited in later iterations of the forEach loop only if they\n        // were not previously contained by the Set.\n        Object.keys(this.findChildRefIds(id)).forEach(ids.add, ids);\n        // By removing IDs from the snapshot object here, we protect them from\n        // getting removed from the root store layer below.\n        delete snapshot[id];\n      }\n    });\n    const idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      let root: EntityStore = this;\n      while (root instanceof Layer) root = root.parent;\n      idsToRemove.forEach((id) => root.delete(id));\n    }\n    return idsToRemove;\n  }\n\n  // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n  private refs: {\n    [dataId: string]: Record<string, true>;\n  } = {};\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    if (!hasOwn.call(this.refs, dataId)) {\n      const found = (this.refs[dataId] = {} as Record<string, true>);\n      const root = this.data[dataId];\n      if (!root) return found;\n\n      const workSet = new Set<Record<string | number, any>>([root]);\n      // Within the store, only arrays and objects can contain child entity\n      // references, so we can prune the traversal using this predicate:\n      workSet.forEach((obj) => {\n        if (isReference(obj)) {\n          found[obj.__ref] = true;\n          // In rare cases, a { __ref } Reference object may have other fields.\n          // This often indicates a mismerging of References with StoreObjects,\n          // but garbage collection should not be fooled by a stray __ref\n          // property in a StoreObject (ignoring all the other fields just\n          // because the StoreObject looks like a Reference). To avoid this\n          // premature termination of findChildRefIds recursion, we fall through\n          // to the code below, which will handle any other properties of obj.\n        }\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach((key) => {\n            const child = obj[key];\n            // No need to add primitive values to the workSet, since they cannot\n            // contain reference objects.\n            if (isNonNullObject(child)) {\n              workSet.add(child);\n            }\n          });\n        }\n      });\n    }\n    return this.refs[dataId];\n  }\n\n  // Used to compute cache keys specific to this.group.\n  /** overload for `InMemoryCache.maybeBroadcastWatch` */\n  public makeCacheKey(\n    document: DocumentNode,\n    callback: Cache.WatchCallback<any>,\n    details: string\n  ): object;\n  /** overload for `StoreReader.executeSelectionSet` */\n  public makeCacheKey(\n    selectionSet: SelectionSetNode,\n    parent: string /* = ( Reference.__ref ) */ | StoreObject,\n    varString: string | undefined\n  ): object;\n  /** overload for `StoreReader.executeSubSelectedArray` */\n  public makeCacheKey(\n    field: FieldNode,\n    array: readonly any[],\n    varString: string | undefined\n  ): object;\n  /**\n   * @deprecated This is only meant for internal usage,\n   * in your own code please use a `Trie` instance instead.\n   */\n  public makeCacheKey(...args: any[]): object;\n  public makeCacheKey() {\n    return this.group.keyMaker.lookupArray(arguments);\n  }\n\n  // Bound function that can be passed around to provide easy access to fields\n  // of Reference objects as well as ordinary objects.\n  public getFieldValue = <T = StoreValue>(\n    objectOrReference: StoreObject | Reference | undefined,\n    storeFieldName: string\n  ) =>\n    maybeDeepFreeze(\n      isReference(objectOrReference) ?\n        this.get(objectOrReference.__ref, storeFieldName)\n      : objectOrReference && objectOrReference[storeFieldName]\n    ) as SafeReadonly<T>;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  public canRead: CanReadFunction = (objOrRef) => {\n    return isReference(objOrRef) ?\n        this.has(objOrRef.__ref)\n      : typeof objOrRef === \"object\";\n  };\n\n  // Bound function that converts an id or an object with a __typename and\n  // primary key fields to a Reference object. If called with a Reference object,\n  // that same Reference object is returned. Pass true for mergeIntoStore to persist\n  // an object into the store.\n  public toReference: ToReferenceFunction = (objOrIdOrRef, mergeIntoStore) => {\n    if (typeof objOrIdOrRef === \"string\") {\n      return makeReference(objOrIdOrRef);\n    }\n\n    if (isReference(objOrIdOrRef)) {\n      return objOrIdOrRef;\n    }\n\n    const [id] = this.policies.identify(objOrIdOrRef);\n\n    if (id) {\n      const ref = makeReference(id);\n      if (mergeIntoStore) {\n        this.merge(id, objOrIdOrRef);\n      }\n      return ref;\n    }\n  };\n\n  public get supportsResultCaching(): boolean {\n    return this.group.caching;\n  }\n}\n\nexport type FieldValueGetter = EntityStore[\"getFieldValue\"];\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nclass CacheGroup {\n  private d: OptimisticDependencyFunction<string> | null = null;\n\n  // Used by the EntityStore#makeCacheKey method to compute cache keys\n  // specific to this CacheGroup.\n  public keyMaker!: Trie<object>;\n\n  constructor(\n    public readonly caching: boolean,\n    private parent: CacheGroup | null = null\n  ) {\n    this.resetCaching();\n  }\n\n  public resetCaching() {\n    this.d = this.caching ? dep<string>() : null;\n    this.keyMaker = new Trie();\n  }\n\n  public depend(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      const fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        // Fields with arguments that contribute extra identifying\n        // information to the fieldName (thus forming the storeFieldName)\n        // depend not only on the full storeFieldName but also on the\n        // short fieldName, so the field can be invalidated using either\n        // level of specificity.\n        this.d(makeDepKey(dataId, fieldName));\n      }\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  }\n\n  public dirty(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d.dirty(\n        makeDepKey(dataId, storeFieldName),\n        // When storeFieldName === \"__exists\", that means the entity identified\n        // by dataId has either disappeared from the cache or was newly added,\n        // so the result caching system would do well to \"forget everything it\n        // knows\" about that object. To achieve that kind of invalidation, we\n        // not only dirty the associated result cache entry, but also remove it\n        // completely from the dependency graph. For the optimism implementation\n        // details, see https://github.com/benjamn/optimism/pull/195.\n        storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\"\n      );\n    }\n  }\n}\n\nfunction makeDepKey(dataId: string, storeFieldName: string) {\n  // Since field names cannot have '#' characters in them, this method\n  // of joining the field name and the ID should be unambiguous, and much\n  // cheaper than JSON.stringify([dataId, fieldName]).\n  return storeFieldName + \"#\" + dataId;\n}\n\nexport function maybeDependOnExistenceOfEntity(\n  store: NormalizedCache,\n  entityId: string\n) {\n  if (supportsResultCaching(store)) {\n    // We use this pseudo-field __exists elsewhere in the EntityStore code to\n    // represent changes in the existence of the entity object identified by\n    // entityId. This dependency gets reliably dirtied whenever an object with\n    // this ID is deleted (or newly created) within this group, so any result\n    // cache entries (for example, StoreReader#executeSelectionSet results) that\n    // depend on __exists for this entityId will get dirtied as well, leading to\n    // the eventual recomputation (instead of reuse) of those result objects the\n    // next time someone reads them from the cache.\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n\nclass Root extends EntityStore {\n  constructor({\n    policies,\n    resultCaching = true,\n    seed,\n  }: {\n    policies: Policies;\n    resultCaching?: boolean;\n    seed?: NormalizedCacheObject;\n  }) {\n    super(policies, new CacheGroup(resultCaching));\n    if (seed) this.replace(seed);\n  }\n\n  public readonly stump = new Stump(this);\n\n  public addLayer(layerId: string, replay: (layer: EntityStore) => any): Layer {\n    // Adding an optimistic Layer on top of the Root actually adds the Layer\n    // on top of the Stump, so the Stump always comes between the Root and\n    // any Layer objects that we've added.\n    return this.stump.addLayer(layerId, replay);\n  }\n\n  public removeLayer(): Root {\n    // Never remove the root layer.\n    return this;\n  }\n\n  public readonly storageTrie = new Trie<StorageType>();\n  public getStorage(): StorageType {\n    return this.storageTrie.lookupArray(arguments);\n  }\n}\nEntityStore.Root = Root;\n\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nclass Layer extends EntityStore {\n  constructor(\n    public readonly id: string,\n    public readonly parent: EntityStore,\n    public readonly replay: (layer: EntityStore) => any,\n    public readonly group: CacheGroup\n  ) {\n    super(parent.policies, group);\n    replay(this);\n  }\n\n  public addLayer(layerId: string, replay: (layer: EntityStore) => any): Layer {\n    return new Layer(layerId, this, replay, this.group);\n  }\n\n  public removeLayer(layerId: string): EntityStore {\n    // Remove all instances of the given id, not just the first one.\n    const parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        // Dirty every ID we're removing. Technically we might be able to avoid\n        // dirtying fields that have values in higher layers, but we don't have\n        // easy access to higher layers here, and we're about to recreate those\n        // layers anyway (see parent.addLayer below).\n        Object.keys(this.data).forEach((dataId) => {\n          const ownStoreObject = this.data[dataId];\n          const parentStoreObject = parent[\"lookup\"](dataId);\n          if (!parentStoreObject) {\n            // The StoreObject identified by dataId was defined in this layer\n            // but will be undefined in the parent layer, so we can delete the\n            // whole entity using this.delete(dataId). Since we're about to\n            // throw this layer away, the only goal of this deletion is to dirty\n            // the removed fields.\n            this.delete(dataId);\n          } else if (!ownStoreObject) {\n            // This layer had an entry for dataId but it was undefined, which\n            // means the entity was deleted in this layer, and it's about to\n            // become undeleted when we remove this layer, so we need to dirty\n            // all fields that are about to be reexposed.\n            this.group.dirty(dataId, \"__exists\");\n            Object.keys(parentStoreObject).forEach((storeFieldName) => {\n              this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            // If ownStoreObject is not exactly the same as parentStoreObject,\n            // dirty any fields whose values will change as a result of this\n            // removal.\n            Object.keys(ownStoreObject).forEach((storeFieldName) => {\n              if (\n                !equal(\n                  ownStoreObject[storeFieldName],\n                  parentStoreObject[storeFieldName]\n                )\n              ) {\n                this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    // No changes are necessary if the parent chain remains identical.\n    if (parent === this.parent) return this;\n\n    // Recreate this layer on top of the new parent.\n    return parent.addLayer(this.id, this.replay);\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return {\n      ...this.parent.toObject(),\n      ...this.data,\n    };\n  }\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    const fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ?\n        {\n          ...fromParent,\n          ...super.findChildRefIds(dataId),\n        }\n      : fromParent;\n  }\n\n  public getStorage(\n    ...args: Parameters<EntityStore[\"getStorage\"]>\n  ): StorageType {\n    let p: EntityStore = this.parent;\n    while ((p as Layer).parent) p = (p as Layer).parent;\n    return p.getStorage(...args);\n  }\n}\n\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nclass Stump extends Layer {\n  constructor(root: Root) {\n    super(\n      \"EntityStore.Stump\",\n      root,\n      () => {},\n      new CacheGroup(root.group.caching, root.group)\n    );\n  }\n\n  public removeLayer() {\n    // Never remove the Stump layer.\n    return this;\n  }\n\n  public merge(older: string | StoreObject, newer: string | StoreObject) {\n    // We never want to write any data into the Stump, so we forward any merge\n    // calls to the Root instead. Another option here would be to throw an\n    // exception, but the toReference(object, true) function can sometimes\n    // trigger Stump writes (which used to be Root writes, before the Stump\n    // concept was introduced).\n    return this.parent.merge(older, newer);\n  }\n}\n\nfunction storeObjectReconciler(\n  existingObject: StoreObject,\n  incomingObject: StoreObject,\n  property: string | number\n): StoreValue {\n  const existingValue = existingObject[property];\n  const incomingValue = incomingObject[property];\n  // Wherever there is a key collision, prefer the incoming value, unless\n  // it is deeply equal to the existing value. It's worth checking deep\n  // equality here (even though blindly returning incoming would be\n  // logically correct) because preserving the referential identity of\n  // existing data can prevent needless rereading and rerendering.\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store: any): store is EntityStore {\n  // When result caching is disabled, store.depend will be null.\n  return !!(store && store.supportsResultCaching);\n}\n","import type {\n  DocumentNode,\n  FragmentDefinitionNode,\n  Kind,\n  OperationTypeNode,\n} from \"graphql\";\n\nimport {\n  invariant,\n  newInvariantError,\n} from \"@apollo/client/utilities/invariant\";\n\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo {\n *   a\n *   b\n *   c\n * }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * {\n *   ...foo\n * }\n *\n * fragment foo on Foo {\n *   a\n *   b\n *   c\n * }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n *\n * @internal\n */\nexport function getFragmentQueryDocument(\n  document: DocumentNode,\n  fragmentName?: string\n): DocumentNode {\n  let actualFragmentName = fragmentName;\n\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  const fragments: Array<FragmentDefinitionNode> = [];\n  document.definitions.forEach((definition) => {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === \"OperationDefinition\") {\n      throw newInvariantError(\n        `Found a %s operation%s. ` +\n          \"No operations are allowed when using a fragment as a query. Only fragments are allowed.\",\n        definition.operation,\n        definition.name ? ` named '${definition.name.value}'` : \"\"\n      );\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === \"FragmentDefinition\") {\n      fragments.push(definition);\n    }\n  });\n\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === \"undefined\") {\n    invariant(\n      fragments.length === 1,\n      `Found %s fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n      fragments.length\n    );\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  const query: DocumentNode = {\n    ...document,\n    definitions: [\n      {\n        kind: \"OperationDefinition\" as Kind.OPERATION_DEFINITION,\n        // OperationTypeNode is an enum\n        operation: \"query\" as OperationTypeNode,\n        selectionSet: {\n          kind: \"SelectionSet\" as Kind.SELECTION_SET,\n          selections: [\n            {\n              kind: \"FragmentSpread\" as Kind.FRAGMENT_SPREAD,\n              name: {\n                kind: \"Name\" as Kind.NAME,\n                value: actualFragmentName,\n              },\n            },\n          ],\n        },\n      },\n      ...document.definitions,\n    ],\n  };\n\n  return query;\n}\n","import { isNonNullObject } from \"./isNonNullObject.js\";\n\nconst { hasOwnProperty } = Object.prototype;\n\ntype ReconcilerFunction<TContextArgs extends any[]> = (\n  this: DeepMerger<TContextArgs>,\n  target: Record<string | number, any>,\n  source: Record<string | number, any>,\n  property: string | number,\n  ...context: TContextArgs\n) => any;\n\nconst defaultReconciler: ReconcilerFunction<any[]> = function (\n  target,\n  source,\n  property\n) {\n  return this.merge(target[property], source[property]);\n};\n\n/** @internal */\nexport class DeepMerger<TContextArgs extends any[]> {\n  constructor(\n    private reconciler: ReconcilerFunction<TContextArgs> = defaultReconciler as any as ReconcilerFunction<TContextArgs>\n  ) {}\n\n  public merge(target: any, source: any, ...context: TContextArgs): any {\n    if (isNonNullObject(source) && isNonNullObject(target)) {\n      Object.keys(source).forEach((sourceKey) => {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          const targetValue = target[sourceKey];\n          if (source[sourceKey] !== targetValue) {\n            const result = this.reconciler(\n              target,\n              source,\n              sourceKey,\n              ...context\n            );\n            // A well-implemented reconciler may return targetValue to indicate\n            // the merge changed nothing about the structure of the target.\n            if (result !== targetValue) {\n              target = this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          // If there is no collision, the target can safely share memory with\n          // the source, and the recursion can terminate here.\n          target = this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n\n      return target;\n    }\n\n    // If source (or target) is not an object, let source replace target.\n    return source;\n  }\n\n  public isObject = isNonNullObject;\n\n  private pastCopies = new Set<any>();\n\n  public shallowCopyForMerge<T>(value: T): T {\n    if (isNonNullObject(value)) {\n      if (!this.pastCopies.has(value)) {\n        if (Array.isArray(value)) {\n          value = (value as any).slice(0);\n        } else {\n          value = {\n            __proto__: Object.getPrototypeOf(value),\n            ...value,\n          };\n        }\n        this.pastCopies.add(value);\n      }\n    }\n    return value;\n  }\n}\n","import { brand, isBranded } from \"./utils.js\";\n\nexport declare namespace ServerError {\n  export interface Options {\n    response: Response;\n    bodyText: string;\n  }\n\n  namespace DocumentationTypes {\n    interface InstanceProperties {\n      /**\n       * The raw [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) object provided by the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n       */\n      readonly response: Response;\n      /**\n       * The status code returned by the server in the response. This is provided as\n       * a shortcut for `response.status`.\n       */\n      readonly statusCode: number;\n\n      /**\n       * The raw response body text.\n       */\n      readonly bodyText: string;\n    }\n  }\n}\n\n/**\n * Represents an error when a non-200 HTTP status code is returned from the\n * server according to the [GraphQL Over HTTP specification](https://graphql.github.io/graphql-over-http/draft/). This error\n * contains the full server response, including status code and body text.\n *\n * @remarks\n *\n * This error occurs when your GraphQL server responds with an HTTP status code\n * other than 200 (such as 4xx or 5xx status codes) with any media type other\n * than [`application/graphql-response+json`](https://graphql.github.io/graphql-over-http/draft/#sec-application-graphql-response-json).\n *\n * Servers that return non-200 status codes with other media types are not\n * guaranteed to contain a well-formed GraphQL response and may indicate issues\n * at the HTTP level, such as authentication failures, server unavailability,\n * or other HTTP-level problems.\n *\n * @example\n *\n * ```ts\n * import { ServerError } from \"@apollo/client/errors\";\n *\n * // Check if an error is a ServerError instance\n * if (ServerError.is(error)) {\n *   console.log(`Server returned status: ${error.statusCode}`);\n *   console.log(`Response body: ${error.bodyText}`);\n *\n *   // Handle specific status codes\n *   if (error.statusCode === 401) {\n *     // Handle unauthorized access\n *   }\n * }\n * ```\n */\nexport class ServerError extends Error {\n  /**\n   * A method that determines whether an error is a `ServerError` object. This\n   * method enables TypeScript to narrow the error type.\n   *\n   * @example\n   *\n   * ```ts\n   * if (ServerError.is(error)) {\n   *   // TypeScript now knows `error` is a ServerError object\n   *   console.log(error.errors);\n   * }\n   * ```\n   */\n  static is(error: unknown): error is ServerError {\n    return isBranded(error, \"ServerError\");\n  }\n\n  /** {@inheritDoc @apollo/client!ServerError.DocumentationTypes.InstanceProperties#response:member} */\n  readonly response: Response;\n\n  /** {@inheritDoc @apollo/client!ServerError.DocumentationTypes.InstanceProperties#statusCode:member} */\n  readonly statusCode: number;\n\n  /** {@inheritDoc @apollo/client!ServerError.DocumentationTypes.InstanceProperties#bodyText:member} */\n  readonly bodyText: string;\n\n  constructor(message: string, options: ServerError.Options) {\n    super(message);\n    this.name = \"ServerError\";\n    this.response = options.response;\n    this.statusCode = options.response.status;\n    this.bodyText = options.bodyText;\n\n    brand(this);\n    Object.setPrototypeOf(this, ServerError.prototype);\n  }\n}\n","import type { DocumentNode } from \"graphql\";\nimport { OperationTypeNode } from \"graphql\";\nimport type { Observable } from \"rxjs\";\nimport { map } from \"rxjs\";\n\nimport type {\n  ApolloCache,\n  IgnoreModifier,\n  Reference,\n} from \"@apollo/client/cache\";\nimport type { Incremental } from \"@apollo/client/incremental\";\nimport { NotImplementedHandler } from \"@apollo/client/incremental\";\nimport type { ApolloLink } from \"@apollo/client/link\";\nimport { execute } from \"@apollo/client/link\";\nimport type { ClientAwarenessLink } from \"@apollo/client/link/client-awareness\";\nimport type { LocalState } from \"@apollo/client/local-state\";\nimport type { MaybeMasked, Unmasked } from \"@apollo/client/masking\";\nimport { DocumentTransform } from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport type { VariablesOption } from \"@apollo/client/utilities/internal\";\nimport {\n  checkDocument,\n  compact,\n  getApolloClientMemoryInternals,\n  mergeOptions,\n  removeMaskedFragmentSpreads,\n} from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport { version } from \"../version.js\";\n\nimport type { ObservableQuery } from \"./ObservableQuery.js\";\nimport { QueryManager } from \"./QueryManager.js\";\nimport type {\n  DefaultContext,\n  ErrorLike,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesResult,\n  MutationQueryReducersMap,\n  MutationUpdaterFunction,\n  NormalizedExecutionResult,\n  OnQueryUpdated,\n  OperationVariables,\n  RefetchQueriesInclude,\n  RefetchQueriesPromiseResults,\n  SubscriptionObservable,\n  TypedDocumentNode,\n} from \"./types.js\";\nimport type {\n  ErrorPolicy,\n  FetchPolicy,\n  MutationFetchPolicy,\n  NextFetchPolicyContext,\n  RefetchWritePolicy,\n  WatchQueryFetchPolicy,\n} from \"./watchQueryOptions.js\";\n\nlet hasSuggestedDevtools = false;\n\nexport declare namespace ApolloClient {\n  export interface DefaultOptions {\n    watchQuery?: Partial<ApolloClient.WatchQueryOptions<any, any>>;\n    query?: Partial<ApolloClient.QueryOptions<any, any>>;\n    mutate?: Partial<ApolloClient.MutateOptions<any, any, any>>;\n  }\n\n  export interface Options {\n    /**\n     * An `ApolloLink` instance to serve as Apollo Client's network layer. For more information, see [Advanced HTTP networking](https://www.apollographql.com/docs/react/networking/advanced-http-networking/).\n     */\n    link: ApolloLink;\n    /**\n     * The cache that Apollo Client should use to store query results locally. The recommended cache is `InMemoryCache`, which is provided by the `@apollo/client` package.\n     *\n     * For more information, see [Configuring the cache](https://www.apollographql.com/docs/react/caching/cache-configuration/).\n     */\n    cache: ApolloCache;\n    /**\n     * The time interval (in milliseconds) before Apollo Client force-fetches queries after a server-side render.\n     *\n     * @defaultValue `0` (no delay)\n     */\n    ssrForceFetchDelay?: number;\n    /**\n     * When using Apollo Client for [server-side rendering](https://www.apollographql.com/docs/react/performance/server-side-rendering/), set this to `true` so that the [`getDataFromTree` function](../react/ssr/#getdatafromtree) can work effectively.\n     *\n     * @defaultValue `false`\n     */\n    ssrMode?: boolean;\n    /**\n     * If `false`, Apollo Client sends every created query to the server, even if a _completely_ identical query (identical in terms of query string, variable values, and operationName) is already in flight.\n     *\n     * @defaultValue `true`\n     */\n    queryDeduplication?: boolean;\n    /**\n     * Provide this object to set application-wide default values for options you can provide to the `watchQuery`, `query`, and `mutate` functions. See below for an example object.\n     *\n     * See this [example object](https://www.apollographql.com/docs/react/api/core/ApolloClient#example-defaultoptions-object).\n     */\n    defaultOptions?: ApolloClient.DefaultOptions;\n    defaultContext?: Partial<DefaultContext>;\n    /**\n     * If `true`, Apollo Client will assume results read from the cache are never mutated by application code, which enables substantial performance optimizations.\n     *\n     * @defaultValue `false`\n     */\n    assumeImmutableResults?: boolean;\n    localState?: LocalState;\n    /** {@inheritDoc @apollo/client/link/client-awareness!ClientAwarenessLink.ClientAwarenessOptions:interface} */\n    clientAwareness?: ClientAwarenessLink.ClientAwarenessOptions;\n    /** {@inheritDoc @apollo/client/link/client-awareness!ClientAwarenessLink.EnhancedClientAwarenessOptions:interface} */\n    enhancedClientAwareness?: ClientAwarenessLink.EnhancedClientAwarenessOptions;\n    documentTransform?: DocumentTransform;\n\n    /**\n     * Configuration used by the [Apollo Client Devtools extension](https://www.apollographql.com/docs/react/development-testing/developer-tooling/#apollo-client-devtools) for this client.\n     *\n     * @since 3.11.0\n     */\n    devtools?: ApolloClient.DevtoolsOptions;\n\n    /**\n     * Determines if data masking is enabled for the client.\n     *\n     * @defaultValue false\n     */\n    dataMasking?: boolean;\n\n    /**\n     * Determines the strategy used to parse incremental chunks from `@defer`\n     * queries.\n     */\n    incrementalHandler?: Incremental.Handler<any>;\n  }\n\n  interface DevtoolsOptions {\n    /**\n     * If `true`, the [Apollo Client Devtools](https://www.apollographql.com/docs/react/development-testing/developer-tooling/#apollo-client-devtools) browser extension can connect to this `ApolloClient` instance.\n     *\n     * The default value is `false` in production and `true` in development if there is a `window` object.\n     */\n    enabled?: boolean;\n\n    /**\n     * Optional name for this `ApolloClient` instance in the devtools. This is\n     * useful when you instantiate multiple clients and want to be able to\n     * identify them by name.\n     */\n    name?: string;\n  }\n\n  export type MutateOptions<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n    TCache extends ApolloCache = ApolloCache,\n  > = {\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#optimisticResponse:member} */\n    optimisticResponse?:\n      | Unmasked<NoInfer<TData>>\n      | ((\n          vars: TVariables,\n          { IGNORE }: { IGNORE: IgnoreModifier }\n        ) => Unmasked<NoInfer<TData>> | IgnoreModifier);\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#updateQueries:member} */\n    updateQueries?: MutationQueryReducersMap<TData>;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#refetchQueries:member} */\n    refetchQueries?:\n      | ((\n          result: NormalizedExecutionResult<Unmasked<TData>>\n        ) => InternalRefetchQueriesInclude)\n      | InternalRefetchQueriesInclude;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#awaitRefetchQueries:member} */\n    awaitRefetchQueries?: boolean;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#update:member} */\n    update?: MutationUpdaterFunction<TData, TVariables, TCache>;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#onQueryUpdated:member} */\n    onQueryUpdated?: OnQueryUpdated<any>;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#errorPolicy:member} */\n    errorPolicy?: ErrorPolicy;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#context:member} */\n    context?: DefaultContext;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#fetchPolicy:member} */\n    fetchPolicy?: MutationFetchPolicy;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#keepRootFields:member} */\n    keepRootFields?: boolean;\n\n    /** {@inheritDoc @apollo/client!MutationOptionsDocumentation#mutation:member} */\n    mutation: DocumentNode | TypedDocumentNode<TData, TVariables>;\n  } & VariablesOption<NoInfer<TVariables>>;\n\n  export interface MutateResult<TData = unknown> {\n    /** {@inheritDoc @apollo/client!MutationResultDocumentation#data:member} */\n    data: TData | undefined;\n\n    /** {@inheritDoc @apollo/client!MutationResultDocumentation#error:member} */\n    error?: ErrorLike;\n\n    /** {@inheritDoc @apollo/client!MutationResultDocumentation#extensions:member} */\n    extensions?: Record<string, unknown>;\n  }\n\n  /**\n   * Query options.\n   */\n  export type QueryOptions<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  > = {\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#query:member} */\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#errorPolicy:member} */\n    errorPolicy?: ErrorPolicy;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#context:member} */\n    context?: DefaultContext;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#fetchPolicy:member} */\n    fetchPolicy?: FetchPolicy;\n  } & VariablesOption<NoInfer<TVariables>>;\n\n  export interface QueryResult<TData = unknown> {\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#data:member} */\n    data: TData | undefined;\n\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#error:member} */\n    error?: ErrorLike;\n  }\n\n  /**\n   * Options object for the `client.refetchQueries` method.\n   */\n  export interface RefetchQueriesOptions<TCache extends ApolloCache, TResult> {\n    /**\n     * Optional function that updates cached fields to trigger refetches of queries that include those fields.\n     */\n    updateCache?: (cache: TCache) => void;\n\n    /**\n     * Optional array specifying queries to refetch. Each element can be either a query's string name or a `DocumentNode` object.\n     *\n     * Pass `\"active\"` as a shorthand to refetch all active queries, or `\"all\"` to refetch all active and inactive queries.\n     *\n     * Analogous to the [`options.refetchQueries`](https://www.apollographql.com/docs/react/data/mutations/#options) array for mutations.\n     */\n    include?: RefetchQueriesInclude;\n\n    /**\n     * If `true`, the `options.updateCache` function is executed on a temporary optimistic layer of `InMemoryCache`, so its modifications can be discarded from the cache after observing which fields it invalidated.\n     *\n     * Defaults to `false`, meaning `options.updateCache` updates the cache in a lasting way.\n     */\n    optimistic?: boolean;\n\n    /**\n     * Optional callback function that's called once for each `ObservableQuery` that's either affected by `options.updateCache` or listed in `options.include` (or both).\n     *\n     * If `onQueryUpdated` is not provided, the default implementation returns the result of calling `observableQuery.refetch()`. When `onQueryUpdated` is provided, it can dynamically decide whether (and how) each query should be refetched.\n     *\n     * Returning `false` from `onQueryUpdated` prevents the associated query from being refetched.\n     */\n    onQueryUpdated?: OnQueryUpdated<TResult> | null;\n  }\n\n  /**\n   * The result of client.refetchQueries is thenable/awaitable, if you just want\n   * an array of fully resolved results, but you can also access the raw results\n   * immediately by examining the additional `queries` and `results` properties of\n   * the `RefetchQueriesResult<TResult> object`.\n   */\n  export interface RefetchQueriesResult<TResult>\n    extends Promise<RefetchQueriesPromiseResults<TResult>>,\n      RefetchQueriesResult.AdditionalProperties<TResult> {}\n\n  export namespace RefetchQueriesResult {\n    export interface AdditionalProperties<TResult> {\n      /**\n       * An array of ObservableQuery objects corresponding 1:1 to TResult values\n       * in the results arrays (both the `result` property and the resolved value).\n       */\n      queries: ObservableQuery<any>[];\n      /**\n       * An array of results that were either returned by `onQueryUpdated`, or provided by default in the absence of `onQueryUpdated`, including pending promises.\n       *\n       * If `onQueryUpdated` returns `false` for a given query, no result is provided for that query.\n       *\n       * If `onQueryUpdated` returns `true`, the resulting `Promise<ApolloQueryResult<any>>` is included in the `results` array instead of `true`.\n       */\n      results: InternalRefetchQueriesResult<TResult>[];\n    }\n  }\n\n  export type SubscribeOptions<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  > = {\n    /** {@inheritDoc @apollo/client!SubscriptionOptionsDocumentation#query:member} */\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n\n    /** {@inheritDoc @apollo/client!SubscriptionOptionsDocumentation#fetchPolicy:member} */\n    fetchPolicy?: FetchPolicy;\n\n    /** {@inheritDoc @apollo/client!SubscriptionOptionsDocumentation#errorPolicy:member} */\n    errorPolicy?: ErrorPolicy;\n\n    /** {@inheritDoc @apollo/client!SubscriptionOptionsDocumentation#context:member} */\n    context?: DefaultContext;\n\n    /** {@inheritDoc @apollo/client!SubscriptionOptionsDocumentation#extensions:member} */\n    extensions?: Record<string, any>;\n  } & VariablesOption<NoInfer<TVariables>>;\n\n  export interface SubscribeResult<TData = unknown> {\n    /** {@inheritDoc @apollo/client!MutationResultDocumentation#data:member} */\n    data: TData | undefined;\n\n    /** {@inheritDoc @apollo/client!MutationResultDocumentation#error:member} */\n    error?: ErrorLike;\n\n    /** {@inheritDoc @apollo/client!MutationResultDocumentation#extensions:member} */\n    extensions?: Record<string, unknown>;\n  }\n\n  export type WatchFragmentOptions<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  > = ApolloCache.WatchFragmentOptions<TData, TVariables>;\n\n  export type WatchFragmentResult<TData = unknown> =\n    ApolloCache.WatchFragmentResult<TData>;\n\n  /**\n   * Watched query options.\n   */\n  export type WatchQueryOptions<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  > = {\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#fetchPolicy:member} */\n    fetchPolicy?: WatchQueryFetchPolicy;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#nextFetchPolicy:member} */\n    nextFetchPolicy?:\n      | WatchQueryFetchPolicy\n      | ((\n          this: WatchQueryOptions<TData, TVariables>,\n          currentFetchPolicy: WatchQueryFetchPolicy,\n          context: NextFetchPolicyContext<TData, TVariables>\n        ) => WatchQueryFetchPolicy);\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#initialFetchPolicy:member} */\n    initialFetchPolicy?: WatchQueryFetchPolicy;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#refetchWritePolicy:member} */\n    refetchWritePolicy?: RefetchWritePolicy;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#errorPolicy:member} */\n    errorPolicy?: ErrorPolicy;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#context:member} */\n    context?: DefaultContext;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#pollInterval:member} */\n    pollInterval?: number;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#notifyOnNetworkStatusChange:member} */\n    notifyOnNetworkStatusChange?: boolean;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#returnPartialData:member} */\n    returnPartialData?: boolean;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#skipPollAttempt:member} */\n    skipPollAttempt?: () => boolean;\n\n    /** {@inheritDoc @apollo/client!QueryOptionsDocumentation#query:member} */\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n  } & VariablesOption<NoInfer<TVariables>>;\n\n  namespace Base {\n    export interface ReadQueryOptions<\n      TData,\n      TVariables extends OperationVariables,\n    > {\n      /**\n       * The GraphQL query shape to be used constructed using the `gql` template\n       * string tag. The query will be used to determine the\n       * shape of the data to be read.\n       */\n      query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n\n      /**\n       * The root id to be used. Defaults to \"ROOT_QUERY\", which is the ID of the\n       * root query object. This property makes `readQuery` capable of reading data\n       * from any object in the cache.\n       */\n      id?: string;\n\n      /**\n       * Whether to return incomplete data rather than null.\n       * @defaultValue false\n       */\n      returnPartialData?: boolean;\n\n      /**\n       * Whether to read from optimistic or non-optimistic cache data.\n       * This option should be preferred over the `optimistic` parameter of the\n       * `readQuery` method.\n       * @defaultValue false\n       */\n      optimistic?: boolean;\n    }\n  }\n  export type ReadQueryOptions<\n    TData,\n    TVariables extends OperationVariables,\n  > = Base.ReadQueryOptions<TData, TVariables> & VariablesOption<TVariables>;\n\n  export namespace DocumentationTypes {\n    export interface ReadQueryOptions<\n      TData,\n      TVariables extends OperationVariables,\n    > extends Base.ReadQueryOptions<TData, TVariables> {\n      /**\n       * Any variables that the GraphQL query may depend on.\n       */\n      variables?: TVariables;\n    }\n  }\n\n  namespace Base {\n    export interface ReadFragmentOptions<\n      TData,\n      TVariables extends OperationVariables,\n    > {\n      /**\n       * The root id to be used. This id should take the same form as the\n       * value returned by the `cache.identify` function. If a value with your\n       * id does not exist in the store, `null` will be returned.\n       */\n      id?: string;\n\n      /**\n       * A GraphQL document created using the `gql` template string tag\n       * with one or more fragments which will be used to determine\n       * the shape of data to read. If you provide more than one fragment in this\n       * document then you must also specify `fragmentName` to specify which\n       * fragment is the root fragment.\n       */\n      fragment: DocumentNode | TypedDocumentNode<TData, TVariables>;\n\n      /**\n       * The name of the fragment in your GraphQL document to be used. If you do\n       * not provide a `fragmentName` and there is only one fragment in your\n       * `fragment` document then that fragment will be used.\n       */\n      fragmentName?: string;\n\n      /**\n       * Whether to return incomplete data rather than null.\n       * @defaultValue false\n       */\n      returnPartialData?: boolean;\n      /**\n       * Whether to read from optimistic or non-optimistic cache data.\n       * This option should be preferred over the `optimistic` parameter of the\n       * `readFragment` method.\n       * @defaultValue false\n       */\n      optimistic?: boolean;\n    }\n  }\n  export type ReadFragmentOptions<\n    TData,\n    TVariables extends OperationVariables,\n  > = Base.ReadFragmentOptions<TData, TVariables> & VariablesOption<TVariables>;\n\n  export namespace DocumentationTypes {\n    export interface WriteQueryOptions<\n      TData,\n      TVariables extends OperationVariables,\n    > extends Base.WriteQueryOptions<TData, TVariables> {\n      /**\n       * Any variables that your GraphQL fragments depend on.\n       */\n      variables?: TVariables;\n    }\n  }\n\n  namespace Base {\n    export interface WriteQueryOptions<\n      TData,\n      TVariables extends OperationVariables,\n    > {\n      /**\n       * The GraphQL query shape to be used constructed using the `gql` template\n       * string tag. The query will be used to determine the\n       * shape of the data to be read.\n       */\n      query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n\n      /**\n       * The root id to be used. Defaults to \"ROOT_QUERY\", which is the ID of the\n       * root query object. This property makes writeQuery capable of writing data\n       * to any object in the cache.\n       */\n      id?: string;\n      /**\n       * The data to write to the store.\n       */\n      data: Unmasked<TData>;\n      /**\n       * Whether to notify query watchers.\n       * @defaultValue true\n       */\n      broadcast?: boolean;\n      /**\n       * When true, ignore existing field data rather than merging it with\n       * incoming data.\n       * @defaultValue false\n       */\n      overwrite?: boolean;\n    }\n  }\n  export type WriteQueryOptions<\n    TData,\n    TVariables extends OperationVariables,\n  > = Base.WriteQueryOptions<TData, TVariables> & VariablesOption<TVariables>;\n\n  export namespace DocumentationTypes {\n    export interface WriteQueryOptions<\n      TData,\n      TVariables extends OperationVariables,\n    > extends Base.WriteQueryOptions<TData, TVariables> {\n      /**\n       * Any variables that the GraphQL query may depend on.\n       */\n      variables?: TVariables;\n    }\n  }\n\n  namespace Base {\n    export interface WriteFragmentOptions<\n      TData,\n      TVariables extends OperationVariables,\n    > {\n      /**\n       * The root id to be used. This id should take the same form as the\n       * value returned by the `cache.identify` function. If a value with your\n       * id does not exist in the store, `null` will be returned.\n       */\n      id?: string;\n\n      /**\n       * A GraphQL document created using the `gql` template string tag from\n       * `graphql-tag` with one or more fragments which will be used to determine\n       * the shape of data to read. If you provide more than one fragment in this\n       * document then you must also specify `fragmentName` to specify which\n       * fragment is the root fragment.\n       */\n      fragment: DocumentNode | TypedDocumentNode<TData, TVariables>;\n\n      /**\n       * The name of the fragment in your GraphQL document to be used. If you do\n       * not provide a `fragmentName` and there is only one fragment in your\n       * `fragment` document then that fragment will be used.\n       */\n      fragmentName?: string;\n\n      /**\n       * The data to write to the store.\n       */\n      data: Unmasked<TData>;\n      /**\n       * Whether to notify query watchers.\n       * @defaultValue true\n       */\n      broadcast?: boolean;\n      /**\n       * When true, ignore existing field data rather than merging it with\n       * incoming data.\n       * @defaultValue false\n       */\n      overwrite?: boolean;\n    }\n  }\n  export type WriteFragmentOptions<\n    TData,\n    TVariables extends OperationVariables,\n  > = Base.WriteFragmentOptions<TData, TVariables> &\n    VariablesOption<TVariables>;\n\n  export namespace DocumentationTypes {\n    export interface WriteFragmentOptions<\n      TData,\n      TVariables extends OperationVariables,\n    > extends Base.WriteFragmentOptions<TData, TVariables> {\n      /**\n       * Any variables that your GraphQL fragments depend on.\n       */\n      variables?: TVariables;\n    }\n  }\n}\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over an `ApolloLink` instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through `Observable` instances.\n */\nexport class ApolloClient {\n  public link: ApolloLink;\n  public cache: ApolloCache;\n  /**\n   * @deprecated `disableNetworkFetches` has been renamed to `prioritizeCacheValues`.\n   */\n  public disableNetworkFetches!: never;\n\n  public set prioritizeCacheValues(value: boolean) {\n    this.queryManager.prioritizeCacheValues = value;\n  }\n\n  /**\n   * Whether to prioritize cache values over network results when `query` or `watchQuery` is called.\n   * This will essentially turn a `\"network-only\"` or `\"cache-and-network\"` fetchPolicy into a `\"cache-first\"` fetchPolicy,\n   * but without influencing the `fetchPolicy` of the created `ObservableQuery` long-term.\n   *\n   * This can e.g. be used to prioritize the cache during the first render after SSR.\n   */\n  public get prioritizeCacheValues() {\n    return this.queryManager.prioritizeCacheValues;\n  }\n  public version: string;\n  public queryDeduplication: boolean;\n  public defaultOptions: ApolloClient.DefaultOptions;\n  public readonly devtoolsConfig: ApolloClient.DevtoolsOptions;\n\n  private queryManager: QueryManager;\n  private devToolsHookCb?: Function;\n  private resetStoreCallbacks: Array<() => Promise<any>> = [];\n  private clearStoreCallbacks: Array<() => Promise<any>> = [];\n\n  /**\n   * Constructs an instance of `ApolloClient`.\n   *\n   * @example\n   *\n   * ```js\n   * import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n   *\n   * const cache = new InMemoryCache();\n   *\n   * const client = new ApolloClient({\n   *   // Provide required constructor fields\n   *   cache: cache,\n   *   uri: \"http://localhost:4000/\",\n   *\n   *   // Provide some optional constructor fields\n   *   name: \"react-web-client\",\n   *   version: \"1.3\",\n   *   queryDeduplication: false,\n   *   defaultOptions: {\n   *     watchQuery: {\n   *       fetchPolicy: \"cache-and-network\",\n   *     },\n   *   },\n   * });\n   * ```\n   */\n  constructor(options: ApolloClient.Options) {\n    if (__DEV__) {\n      invariant(\n        options.cache,\n        \"To initialize Apollo Client, you must specify a 'cache' property \" +\n          \"in the options object. \\n\" +\n          \"For more information, please visit: https://go.apollo.dev/c/docs\"\n      );\n\n      invariant(\n        options.link,\n        \"To initialize Apollo Client, you must specify a 'link' property \" +\n          \"in the options object. \\n\" +\n          \"For more information, please visit: https://go.apollo.dev/c/docs\"\n      );\n    }\n\n    const {\n      cache,\n      documentTransform,\n      ssrMode = false,\n      ssrForceFetchDelay = 0,\n      queryDeduplication = true,\n      defaultOptions,\n      defaultContext,\n      assumeImmutableResults = cache.assumeImmutableResults,\n      localState,\n      devtools,\n      dataMasking,\n      link,\n      incrementalHandler = new NotImplementedHandler(),\n    } = options;\n\n    this.link = link;\n    this.cache = cache;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || {};\n    this.devtoolsConfig = {\n      ...devtools,\n      enabled: devtools?.enabled ?? __DEV__,\n    };\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.watchFragment = this.watchFragment.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.refetchObservableQueries =\n      this.refetchObservableQueries.bind(this);\n\n    this.version = version;\n\n    this.queryManager = new QueryManager({\n      client: this,\n      defaultOptions: this.defaultOptions,\n      defaultContext,\n      documentTransform,\n      queryDeduplication,\n      ssrMode,\n      dataMasking: !!dataMasking,\n      clientOptions: options,\n      incrementalHandler,\n      assumeImmutableResults,\n      onBroadcast:\n        this.devtoolsConfig.enabled ?\n          () => {\n            if (this.devToolsHookCb) {\n              this.devToolsHookCb();\n            }\n          }\n        : void 0,\n      localState,\n    });\n\n    this.prioritizeCacheValues = ssrMode || ssrForceFetchDelay > 0;\n    if (ssrForceFetchDelay) {\n      setTimeout(() => {\n        this.prioritizeCacheValues = false;\n      }, ssrForceFetchDelay);\n    }\n\n    if (this.devtoolsConfig.enabled) this.connectToDevTools();\n  }\n\n  private connectToDevTools() {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    type DevToolsConnector = {\n      push(client: ApolloClient): void;\n    };\n    const windowWithDevTools = window as Window & {\n      [devtoolsSymbol]?: DevToolsConnector;\n      __APOLLO_CLIENT__?: ApolloClient;\n    };\n    const devtoolsSymbol = Symbol.for(\"apollo.devtools\");\n    (windowWithDevTools[devtoolsSymbol] =\n      windowWithDevTools[devtoolsSymbol] || ([] as DevToolsConnector)).push(\n      this\n    );\n    windowWithDevTools.__APOLLO_CLIENT__ = this;\n\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n    if (!hasSuggestedDevtools && __DEV__) {\n      hasSuggestedDevtools = true;\n      if (\n        window.document &&\n        window.top === window.self &&\n        /^(https?|file):$/.test(window.location.protocol)\n      ) {\n        setTimeout(() => {\n          if (!(window as any).__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n            const nav = window.navigator;\n            const ua = nav && nav.userAgent;\n            let url: string | undefined;\n            if (typeof ua === \"string\") {\n              if (ua.indexOf(\"Chrome/\") > -1) {\n                url =\n                  \"https://chrome.google.com/webstore/detail/\" +\n                  \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n              } else if (ua.indexOf(\"Firefox/\") > -1) {\n                url =\n                  \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n              }\n            }\n            if (url) {\n              invariant.log(\n                \"Download the Apollo DevTools for a better development \" +\n                  \"experience: %s\",\n                url\n              );\n            }\n          }\n        }, 10000);\n      }\n    }\n  }\n\n  /**\n   * The `DocumentTransform` used to modify GraphQL documents before a request\n   * is made. If a custom `DocumentTransform` is not provided, this will be the\n   * default document transform.\n   */\n  get documentTransform() {\n    return this.queryManager.documentTransform;\n  }\n\n  /**\n   * The configured `LocalState` instance used to enable the use of `@client`\n   * fields.\n   */\n  get localState(): LocalState | undefined {\n    return this.queryManager.localState;\n  }\n\n  set localState(localState: LocalState) {\n    this.queryManager.localState = localState;\n  }\n\n  /**\n   * Call this method to terminate any active client processes, making it safe\n   * to dispose of this `ApolloClient` instance.\n   *\n   * This method performs aggressive cleanup to prevent memory leaks:\n   *\n   * - Unsubscribes all active `ObservableQuery` instances by emitting a `completed` event\n   * - Rejects all currently running queries with \"QueryManager stopped while query was in flight\"\n   * - Removes all queryRefs from the suspense cache\n   */\n  public stop() {\n    this.queryManager.stop();\n  }\n\n  /**\n   * This watches the cache store of the query according to the options specified and\n   * returns an `ObservableQuery`. We can subscribe to this `ObservableQuery` and\n   * receive updated results through an observer when the cache store changes.\n   *\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   *\n   * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n   * first and last name and this person has a particular object identifier, provided by\n   * `cache.identify`. Later, a different query fetches that same person's\n   * first and last name and the first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   *\n   * Note that if the cache does not change, the subscriber will _not_ be notified.\n   *\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   */\n  public watchQuery<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: ApolloClient.WatchQueryOptions<TData, TVariables>\n  ): ObservableQuery<TData, TVariables> {\n    if (this.defaultOptions.watchQuery) {\n      options = mergeOptions(\n        this.defaultOptions.watchQuery as Partial<\n          ApolloClient.WatchQueryOptions<TData, TVariables>\n        >,\n        options\n      );\n    }\n\n    return this.queryManager.watchQuery<TData, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a `Promise` which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options - An object of type `QueryOptions` that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n  public query<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: ApolloClient.QueryOptions<TData, TVariables>\n  ): Promise<ApolloClient.QueryResult<MaybeMasked<TData>>> {\n    if (this.defaultOptions.query) {\n      options = mergeOptions(this.defaultOptions.query, options);\n    }\n\n    if (__DEV__) {\n      invariant(\n        (options.fetchPolicy as WatchQueryFetchPolicy) !== \"cache-and-network\",\n        \"The cache-and-network fetchPolicy does not work with client.query, because \" +\n          \"client.query can only return a single result. Please use client.watchQuery \" +\n          \"to receive multiple results from the cache and the network, or consider \" +\n          \"using a different fetchPolicy, such as cache-first or network-only.\"\n      );\n\n      invariant(\n        (options.fetchPolicy as WatchQueryFetchPolicy) !== \"standby\",\n        \"The standby fetchPolicy does not work with client.query, because \" +\n          \"standby does not fetch. Consider using a different fetchPolicy, such \" +\n          \"as cache-first or network-only.\"\n      );\n\n      invariant(\n        options.query,\n        \"query option is required. You must specify your GraphQL document \" +\n          \"in the query option.\"\n      );\n\n      invariant(\n        options.query.kind === \"Document\",\n        'You must wrap the query string in a \"gql\" tag.'\n      );\n\n      invariant(\n        !(options as any).returnPartialData,\n        \"returnPartialData option only supported on watchQuery.\"\n      );\n\n      invariant(\n        !(options as any).pollInterval,\n        \"pollInterval option only supported on watchQuery.\"\n      );\n\n      invariant(\n        !(options as any).notifyOnNetworkStatusChange,\n        \"notifyOnNetworkStatusChange option only supported on watchQuery.\"\n      );\n    }\n\n    return this.queryManager.query<TData, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * Promise which is either resolved with the resulting data or rejected with an\n   * error. In some cases both `data` and `errors` might be undefined, for example\n   * when `errorPolicy` is set to `'ignore'`.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n  public mutate<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n    TCache extends ApolloCache = ApolloCache,\n  >(\n    options: ApolloClient.MutateOptions<TData, TVariables, TCache>\n  ): Promise<ApolloClient.MutateResult<MaybeMasked<TData>>> {\n    const optionsWithDefaults = mergeOptions(\n      compact(\n        {\n          fetchPolicy: \"network-only\" as MutationFetchPolicy,\n          errorPolicy: \"none\" as ErrorPolicy,\n        },\n        this.defaultOptions.mutate\n      ),\n      options\n    ) as ApolloClient.MutateOptions<TData, TVariables, TCache> & {\n      fetchPolicy: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n    };\n\n    if (__DEV__) {\n      invariant(\n        optionsWithDefaults.mutation,\n        \"The `mutation` option is required. Please provide a GraphQL document in the `mutation` option.\"\n      );\n\n      invariant(\n        optionsWithDefaults.fetchPolicy === \"network-only\" ||\n          optionsWithDefaults.fetchPolicy === \"no-cache\",\n        \"Mutations only support 'network-only' or 'no-cache' fetch policies. The default 'network-only' behavior automatically writes mutation results to the cache. Passing 'no-cache' skips the cache write.\"\n      );\n    }\n\n    checkDocument(optionsWithDefaults.mutation, OperationTypeNode.MUTATION);\n\n    return this.queryManager.mutate<TData, TVariables, TCache>(\n      optionsWithDefaults\n    );\n  }\n\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * `Observable` which either emits received data or an error.\n   */\n  public subscribe<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: ApolloClient.SubscribeOptions<TData, TVariables>\n  ): SubscriptionObservable<ApolloClient.SubscribeResult<MaybeMasked<TData>>> {\n    const cause = {};\n\n    const observable =\n      this.queryManager.startGraphQLSubscription<TData>(options);\n\n    const mapped = observable.pipe(\n      map((result) => ({\n        ...result,\n        data: this.queryManager.maskOperation({\n          document: options.query,\n          data: result.data,\n          fetchPolicy: options.fetchPolicy,\n          cause,\n        }),\n      }))\n    );\n\n    return Object.assign(mapped, { restart: observable.restart });\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `cache.identify`\n   * use `readFragment`.\n   *\n   * @param optimistic - Set to `true` to allow `readQuery` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readQuery<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: ApolloClient.ReadQueryOptions<TData, TVariables>\n  ): Unmasked<TData> | null;\n\n  /**\n   * {@inheritDoc @apollo/client!ApolloClient#readQuery:member(1)}\n   *\n   * @deprecated Pass the `optimistic` argument as part of the first argument\n   * instead of passing it as a separate option.\n   */\n  public readQuery<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: ApolloClient.ReadQueryOptions<TData, TVariables>,\n    /**\n     * @deprecated Pass the `optimistic` argument as part of the first argument\n     * instead of passing it as a separate option.\n     */\n    optimistic: boolean\n  ): Unmasked<TData> | null;\n\n  public readQuery<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: ApolloClient.ReadQueryOptions<TData, TVariables>,\n    optimistic: boolean = false\n  ): Unmasked<TData> | null {\n    return this.cache.readQuery<TData, TVariables>(\n      { ...options, query: this.transform(options.query) },\n      optimistic\n    );\n  }\n\n  /**\n   * Watches the cache store of the fragment according to the options specified\n   * and returns an `Observable`. We can subscribe to this\n   * `Observable` and receive updated results through an\n   * observer when the cache store changes.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @since 3.10.0\n   * @param options - An object of type `WatchFragmentOptions` that allows\n   * the cache to identify the fragment and optionally specify whether to react\n   * to optimistic updates.\n   */\n\n  public watchFragment<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: ApolloClient.WatchFragmentOptions<TData, TVariables>\n  ): Observable<ApolloClient.WatchFragmentResult<MaybeMasked<TData>>> {\n    const dataMasking = this.queryManager.dataMasking;\n\n    return this.cache\n      .watchFragment({\n        ...options,\n        fragment: this.transform(options.fragment, dataMasking),\n      })\n      .pipe(\n        map((result) => {\n          // The transform will remove fragment spreads from the fragment\n          // document when dataMasking is enabled. The `maskFragment` function\n          // remains to apply warnings to fragments marked as\n          // `@unmask(mode: \"migrate\")`. Since these warnings are only applied\n          // in dev, we can skip the masking algorithm entirely for production.\n          if (__DEV__) {\n            if (dataMasking) {\n              const data = this.queryManager.maskFragment({\n                ...options,\n                data: result.data,\n              });\n              return { ...result, data } as ApolloClient.WatchFragmentResult<\n                MaybeMasked<TData>\n              >;\n            }\n          }\n\n          return result as ApolloClient.WatchFragmentResult<MaybeMasked<TData>>;\n        })\n      );\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @param optimistic - Set to `true` to allow `readFragment` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readFragment<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: ApolloClient.ReadFragmentOptions<TData, TVariables>\n  ): Unmasked<TData> | null;\n  /**\n   * {@inheritDoc @apollo/client!ApolloClient#readFragment:member(1)}\n   *\n   * @deprecated Pass the `optimistic` argument as part of the first argument\n   * instead of passing it as a separate option.\n   */\n  public readFragment<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: ApolloClient.ReadFragmentOptions<TData, TVariables>,\n    optimistic: boolean\n  ): Unmasked<TData> | null;\n\n  public readFragment<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: ApolloClient.ReadFragmentOptions<TData, TVariables>,\n    optimistic: boolean = false\n  ): Unmasked<TData> | null {\n    return this.cache.readFragment<TData, TVariables>(\n      { ...options, fragment: this.transform(options.fragment) },\n      optimistic\n    );\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a\n   * specific id returned by `cache.identify` then use `writeFragment`.\n   */\n  public writeQuery<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: ApolloClient.WriteQueryOptions<TData, TVariables>\n  ): Reference | undefined {\n    const ref = this.cache.writeQuery<TData, TVariables>(options);\n\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n\n    return ref;\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n  public writeFragment<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: ApolloClient.WriteFragmentOptions<TData, TVariables>\n  ): Reference | undefined {\n    const ref = this.cache.writeFragment<TData, TVariables>(options);\n\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n\n    return ref;\n  }\n\n  public __actionHookForDevTools(cb: () => any) {\n    this.devToolsHookCb = cb;\n  }\n\n  public __requestRaw(\n    request: ApolloLink.Request\n  ): Observable<ApolloLink.Result<unknown>> {\n    return execute(this.link, request, { client: this });\n  }\n\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You’ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` _will_ refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public resetStore(): Promise<ApolloClient.QueryResult<any>[] | null> {\n    return Promise.resolve()\n      .then(() =>\n        this.queryManager.clearStore({\n          discardWatches: false,\n        })\n      )\n      .then(() => Promise.all(this.resetStoreCallbacks.map((fn) => fn())))\n      .then(() => this.refetchObservableQueries());\n  }\n\n  /**\n   * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n   * not refetch any active queries.\n   */\n  public clearStore(): Promise<any[]> {\n    return Promise.resolve()\n      .then(() =>\n        this.queryManager.clearStore({\n          discardWatches: true,\n        })\n      )\n      .then(() => Promise.all(this.clearStoreCallbacks.map((fn) => fn())));\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * reset. `onResetStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onResetStore(cb: () => Promise<any>): () => void {\n    this.resetStoreCallbacks.push(cb);\n    return () => {\n      this.resetStoreCallbacks = this.resetStoreCallbacks.filter(\n        (c) => c !== cb\n      );\n    };\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * cleared. `onClearStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onClearStore(cb: () => Promise<any>): () => void {\n    this.clearStoreCallbacks.push(cb);\n    return () => {\n      this.clearStoreCallbacks = this.clearStoreCallbacks.filter(\n        (c) => c !== cb\n      );\n    };\n  }\n\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` _will_ refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   *\n   * Note: `cache-only` queries are not refetched by this function.\n   *\n   * @deprecated Please use `refetchObservableQueries` instead.\n   */\n  public reFetchObservableQueries: (\n    includeStandby?: boolean\n  ) => Promise<ApolloClient.QueryResult<any>[]>;\n\n  /**\n   * Refetches all of your active queries.\n   *\n   * `refetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `refetchObservableQueries()` _will_ refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   *\n   * Note: `cache-only` queries are not refetched by this function.\n   */\n  public refetchObservableQueries(\n    includeStandby?: boolean\n  ): Promise<ApolloClient.QueryResult<any>[]> {\n    return this.queryManager.refetchObservableQueries(includeStandby);\n  }\n\n  /**\n   * Refetches specified active queries. Similar to \"refetchObservableQueries()\" but with a specific list of queries.\n   *\n   * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n   *\n   * It is important to remember that `refetchQueries()` _will_ refetch specified active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public refetchQueries<\n    TCache extends ApolloCache = ApolloCache,\n    TResult = Promise<ApolloClient.QueryResult<any>>,\n  >(\n    options: ApolloClient.RefetchQueriesOptions<TCache, TResult>\n  ): ApolloClient.RefetchQueriesResult<TResult> {\n    const map = this.queryManager.refetchQueries(\n      options as ApolloClient.RefetchQueriesOptions<ApolloCache, TResult>\n    );\n    const queries: ObservableQuery<any>[] = [];\n    const results: InternalRefetchQueriesResult<TResult>[] = [];\n\n    map.forEach((result, obsQuery) => {\n      queries.push(obsQuery);\n      results.push(result);\n    });\n\n    const result = Promise.all<TResult>(\n      results as TResult[]\n    ) as ApolloClient.RefetchQueriesResult<TResult>;\n\n    // In case you need the raw results immediately, without awaiting\n    // Promise.all(results):\n    result.queries = queries;\n    result.results = results;\n\n    // If you decide to ignore the result Promise because you're using\n    // result.queries and result.results instead, you shouldn't have to worry\n    // about preventing uncaught rejections for the Promise.all result.\n    result.catch((error) => {\n      invariant.debug(\n        `In client.refetchQueries, Promise.all promise rejected with error %o`,\n        error\n      );\n    });\n\n    return result;\n  }\n\n  /**\n   * Get all currently active `ObservableQuery` objects, in a `Set`.\n   *\n   * An \"active\" query is one that has observers and a `fetchPolicy` other than\n   * \"standby\" or \"cache-only\".\n   *\n   * You can include all `ObservableQuery` objects (including the inactive ones)\n   * by passing \"all\" instead of \"active\", or you can include just a subset of\n   * active queries by passing an array of query names or DocumentNode objects.\n   *\n   * Note: This method only returns queries that have active subscribers. Queries\n   * without subscribers are not tracked by the client.\n   */\n  public getObservableQueries(\n    include: RefetchQueriesInclude = \"active\"\n  ): Set<ObservableQuery<any>> {\n    return this.queryManager.getObservableQueries(include);\n  }\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   *\n   * @remarks\n   *\n   * This can be useful for debugging in order to inspect the full state of the\n   * cache.\n   *\n   * @param optimistic - Determines whether the result contains data from the\n   * optimistic layer\n   */\n  public extract(optimistic?: boolean) {\n    return this.cache.extract(optimistic);\n  }\n\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public restore(serializedState: unknown) {\n    return this.cache.restore(serializedState);\n  }\n\n  /**\n   * Define a new ApolloLink (or link chain) that Apollo Client will use.\n   */\n  public setLink(newLink: ApolloLink) {\n    this.link = newLink;\n  }\n\n  public get defaultContext() {\n    return this.queryManager.defaultContext;\n  }\n\n  private maskedFragmentTransform = new DocumentTransform(\n    removeMaskedFragmentSpreads\n  );\n\n  private transform(document: DocumentNode, dataMasking = false) {\n    const transformed = this.queryManager.transform(document);\n    return dataMasking ?\n        this.maskedFragmentTransform.transformDocument(transformed)\n      : transformed;\n  }\n\n  /**\n   * @experimental\n   * This is not a stable API - it is used in development builds to expose\n   * information to the DevTools.\n   * Use at your own risk!\n   * For more details, see [Memory Management](https://www.apollographql.com/docs/react/caching/memory-management/#measuring-cache-usage)\n   *\n   * @example\n   *\n   * ```ts\n   * console.log(client.getMemoryInternals());\n   * ```\n   *\n   * Logs output in the following JSON format:\n   * @example\n   *\n   * ```json\n   * {\n   *   \"limits\": {\n   *     \"canonicalStringify\": 1000,\n   *     \"print\": 2000,\n   *     \"documentTransform.cache\": 2000,\n   *     \"queryManager.getDocumentInfo\": 2000,\n   *     \"PersistedQueryLink.persistedQueryHashes\": 2000,\n   *     \"fragmentRegistry.transform\": 2000,\n   *     \"fragmentRegistry.lookup\": 1000,\n   *     \"fragmentRegistry.findFragmentSpreads\": 4000,\n   *     \"cache.fragmentQueryDocuments\": 1000,\n   *     \"removeTypenameFromVariables.getVariableDefinitions\": 2000,\n   *     \"inMemoryCache.maybeBroadcastWatch\": 5000,\n   *     \"inMemoryCache.executeSelectionSet\": 10000,\n   *     \"inMemoryCache.executeSubSelectedArray\": 5000\n   *   },\n   *   \"sizes\": {\n   *     \"canonicalStringify\": 4,\n   *     \"print\": 14,\n   *     \"addTypenameDocumentTransform\": [\n   *       {\n   *         \"cache\": 14\n   *       }\n   *     ],\n   *     \"queryManager\": {\n   *       \"getDocumentInfo\": 14,\n   *       \"documentTransforms\": [\n   *         {\n   *           \"cache\": 14\n   *         },\n   *         {\n   *           \"cache\": 14\n   *         }\n   *       ]\n   *     },\n   *     \"fragmentRegistry\": {\n   *       \"findFragmentSpreads\": 34,\n   *       \"lookup\": 20,\n   *       \"transform\": 14\n   *     },\n   *     \"cache\": {\n   *       \"fragmentQueryDocuments\": 22\n   *     },\n   *     \"inMemoryCache\": {\n   *       \"executeSelectionSet\": 4345,\n   *       \"executeSubSelectedArray\": 1206,\n   *       \"maybeBroadcastWatch\": 32\n   *     },\n   *     \"links\": [\n   *       {\n   *         \"PersistedQueryLink\": {\n   *           \"persistedQueryHashes\": 14\n   *         }\n   *       },\n   *       {\n   *         \"removeTypenameFromVariables\": {\n   *           \"getVariableDefinitions\": 14\n   *         }\n   *       }\n   *     ]\n   *   }\n   * }\n   * ```\n   */\n  public declare getMemoryInternals?: typeof getApolloClientMemoryInternals;\n}\n\nif (__DEV__) {\n  ApolloClient.prototype.getMemoryInternals = getApolloClientMemoryInternals;\n}\n","import { DeepMerger } from \"./DeepMerger.js\";\n\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\n/** @internal */\nexport function mergeDeepArray<T>(sources: T[]): T {\n  let target = sources[0] || ({} as T);\n  const count = sources.length;\n  if (count > 1) {\n    const merger = new DeepMerger();\n    for (let i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n  return target;\n}\n","import { __DEV__ } from \"@apollo/client/utilities/environment\";\n\nimport { deepFreeze } from \"./deepFreeze.js\";\n\n/** @internal */\nexport function maybeDeepFreeze<T>(obj: T): T {\n  if (__DEV__) {\n    deepFreeze(obj);\n  }\n  return obj;\n}\n","import type { DocumentNode, FragmentDefinitionNode } from \"graphql\";\n\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\n/** @internal */\nexport function getFragmentDefinition(\n  doc: DocumentNode\n): FragmentDefinitionNode {\n  invariant(\n    doc.kind === \"Document\",\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`\n  );\n\n  invariant(\n    doc.definitions.length <= 1,\n    \"Fragment must have exactly one definition.\"\n  );\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  invariant(\n    fragmentDef.kind === \"FragmentDefinition\",\n    \"Must be a fragment definition.\"\n  );\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n","import type {\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionNode,\n} from \"graphql\";\n\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport type { FragmentMap } from \"./types/FragmentMap.js\";\nimport type { FragmentMapFunction } from \"./types/FragmentMapFunction.js\";\n\n/** @internal */\nexport function getFragmentFromSelection(\n  selection: SelectionNode,\n  fragmentMap?: FragmentMap | FragmentMapFunction\n): InlineFragmentNode | FragmentDefinitionNode | null {\n  switch (selection.kind) {\n    case \"InlineFragment\":\n      return selection;\n    case \"FragmentSpread\": {\n      const fragmentName = selection.name.value;\n      if (typeof fragmentMap === \"function\") {\n        return fragmentMap(fragmentName);\n      }\n      const fragment = fragmentMap && fragmentMap[fragmentName];\n      invariant(fragment, `No fragment named %s`, fragmentName);\n      return fragment || null;\n    }\n    default:\n      return null;\n  }\n}\n","export const version = \"local\" as string;\nexport const build = \"source\" as \"source\" | \"esm\" | \"cjs\";\n","import type {\n  DocumentNode,\n  FragmentDefinitionNode,\n  OperationDefinitionNode,\n} from \"graphql\";\n\nimport { newInvariantError } from \"@apollo/client/utilities/invariant\";\n\nimport { checkDocument } from \"./checkDocument.js\";\n\n/**\n * Returns the first operation definition from a GraphQL document. The function\n * prioritizes operation definitions over fragment definitions, which makes it\n * suitable for documents that may contain both. If no operation definition is\n * found, the first fragment definition will be returned. If no definitions are\n * found, an error is thrown.\n *\n * @remarks\n *\n * Use this function when you need to perform more advanced tasks with the main\n * definition AST node. If you want to determine when a document is a specific\n * operation type, prefer the `isQueryOperation`, `isMutationOperation`, and\n * `isSubscriptionOperation` utility functions instead.\n *\n * @param queryDoc - The GraphQL document to extract the definition from\n * @returns The main operation or fragment definition AST node\n *\n * @example\n *\n * ```ts\n * import { gql } from \"@apollo/client\";\n * import { getMainDefinition } from \"@apollo/client/utilities\";\n *\n * const query = gql`\n *   query GetUser($id: ID!) {\n *     user(id: $id) {\n *       name\n *       email\n *     }\n *   }\n * `;\n *\n * const definition = getMainDefinition(query);\n * ```\n *\n * @throws When the document contains no operation or fragment definitions\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === \"OperationDefinition\") {\n      return definition;\n    }\n\n    if (definition.kind === \"FragmentDefinition\" && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw newInvariantError(\n    \"Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.\"\n  );\n}\n","import { Trie } from \"@wry/trie\";\nimport type {\n  DirectiveNode,\n  DocumentNode,\n  FormattedExecutionResult,\n} from \"graphql\";\nimport { BREAK, Kind, OperationTypeNode, visit } from \"graphql\";\nimport { Observable, throwError } from \"rxjs\";\nimport {\n  catchError,\n  concat,\n  EMPTY,\n  filter,\n  finalize,\n  from,\n  lastValueFrom,\n  map,\n  materialize,\n  mergeMap,\n  of,\n  share,\n  shareReplay,\n  Subject,\n  tap,\n} from \"rxjs\";\n\nimport type { ApolloCache, Cache } from \"@apollo/client/cache\";\nimport { canonicalStringify } from \"@apollo/client/cache\";\nimport {\n  CombinedGraphQLErrors,\n  graphQLResultHasProtocolErrors,\n  registerLinkError,\n  toErrorLike,\n} from \"@apollo/client/errors\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"@apollo/client/errors\";\nimport type { Incremental } from \"@apollo/client/incremental\";\nimport type { ApolloLink } from \"@apollo/client/link\";\nimport { execute } from \"@apollo/client/link\";\nimport type { LocalState } from \"@apollo/client/local-state\";\nimport type { MaybeMasked } from \"@apollo/client/masking\";\nimport { maskFragment, maskOperation } from \"@apollo/client/masking\";\nimport type { DeepPartial } from \"@apollo/client/utilities\";\nimport {\n  cacheSizes,\n  DocumentTransform,\n  isNetworkRequestInFlight,\n  print,\n} from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport {\n  AutoCleanedWeakCache,\n  checkDocument,\n  filterMap,\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  graphQLResultHasError,\n  hasDirectives,\n  hasForcedResolvers,\n  isDocumentNode,\n  isNonNullObject,\n  makeUniqueId,\n  removeDirectivesFromDocument,\n  toQueryResult,\n} from \"@apollo/client/utilities/internal\";\nimport {\n  invariant,\n  newInvariantError,\n} from \"@apollo/client/utilities/invariant\";\n\nimport { defaultCacheSizes } from \"../utilities/caching/sizes.js\";\n\nimport type { ApolloClient } from \"./ApolloClient.js\";\nimport { NetworkStatus } from \"./networkStatus.js\";\nimport { logMissingFieldErrors, ObservableQuery } from \"./ObservableQuery.js\";\nimport { CacheWriteBehavior, QueryInfo } from \"./QueryInfo.js\";\nimport type {\n  DefaultContext,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesMap,\n  InternalRefetchQueriesOptions,\n  InternalRefetchQueriesResult,\n  OperationVariables,\n  QueryNotification,\n  SubscriptionObservable,\n  TypedDocumentNode,\n} from \"./types.js\";\nimport type {\n  ErrorPolicy,\n  MutationFetchPolicy,\n  WatchQueryFetchPolicy,\n} from \"./watchQueryOptions.js\";\n\ninterface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Record<string, any>;\n  loading: boolean;\n  error: Error | null;\n}\n\ninterface TransformCacheEntry {\n  hasClientExports: boolean;\n  hasForcedResolvers: boolean;\n  hasNonreactiveDirective: boolean;\n  hasIncrementalDirective: boolean;\n  nonReactiveQuery: DocumentNode;\n  clientQuery: DocumentNode | null;\n  serverQuery: DocumentNode | null;\n  defaultVars: OperationVariables;\n  asQuery: DocumentNode;\n  operationType: OperationTypeNode | undefined;\n  violation?: Error | undefined;\n}\n\ninterface MaskFragmentOptions<TData> {\n  fragment: DocumentNode;\n  data: TData;\n  fragmentName?: string;\n}\n\ninterface MaskOperationOptions<TData> {\n  document: DocumentNode;\n  data: TData;\n  /**\n   * Can be used to identify the cause to prevent warning for the same cause twice.\n   * This would be an object like e.g. an `ObervableQuery`.\n   * If the `cause` is not provided, we will warn every time.\n   */\n  cause?: object;\n  fetchPolicy?: WatchQueryFetchPolicy;\n}\n\ninterface QueryManagerOptions {\n  client: ApolloClient;\n  clientOptions: ApolloClient.Options;\n  defaultOptions: ApolloClient.DefaultOptions;\n  documentTransform: DocumentTransform | null | undefined;\n  queryDeduplication: boolean;\n  onBroadcast: undefined | (() => void);\n  ssrMode: boolean;\n  assumeImmutableResults: boolean;\n  defaultContext: Partial<DefaultContext> | undefined;\n  dataMasking: boolean;\n  localState: LocalState | undefined;\n  incrementalHandler: Incremental.Handler;\n}\n\nexport class QueryManager {\n  public defaultOptions: ApolloClient.DefaultOptions;\n\n  public readonly client: ApolloClient;\n  /**\n   * The options that were passed to the ApolloClient constructor.\n   */\n  public readonly clientOptions: ApolloClient.Options;\n  public readonly assumeImmutableResults: boolean;\n  public readonly documentTransform: DocumentTransform;\n  public readonly ssrMode: boolean;\n  public readonly defaultContext: Partial<DefaultContext>;\n  public readonly dataMasking: boolean;\n  public readonly incrementalHandler: Incremental.Handler;\n  public localState: LocalState | undefined;\n\n  private queryDeduplication: boolean;\n\n  /**\n   * Whether to prioritize cache values over network results when\n   * `fetchObservableWithInfo` is called.\n   * This will essentially turn a `\"network-only\"` or `\"cache-and-network\"`\n   * fetchPolicy into a `\"cache-first\"` fetchPolicy, but without influencing\n   * the `fetchPolicy` of the `ObservableQuery`.\n   *\n   * This can e.g. be used to prioritize the cache during the first render after\n   * SSR.\n   */\n  public prioritizeCacheValues: boolean = false;\n\n  private onBroadcast?: () => void;\n  public mutationStore?: {\n    [mutationId: string]: MutationStoreValue;\n  };\n\n  /**\n   * All ObservableQueries that currently have at least one subscriber.\n   */\n  public obsQueries = new Set<ObservableQuery<any, any>>();\n\n  // Maps from queryInfo.id strings to Promise rejection functions for\n  // currently active queries and fetches.\n  // Use protected instead of private field so\n  // @apollo/experimental-nextjs-app-support can access type info.\n  protected fetchCancelFns = new Map<string, (error: any) => any>();\n\n  constructor(options: QueryManagerOptions) {\n    const defaultDocumentTransform = new DocumentTransform(\n      (document) => this.cache.transformDocument(document),\n      // Allow the apollo cache to manage its own transform caches\n      { cache: false }\n    );\n\n    this.client = options.client;\n    this.defaultOptions = options.defaultOptions;\n    this.queryDeduplication = options.queryDeduplication;\n    this.clientOptions = options.clientOptions;\n    this.ssrMode = options.ssrMode;\n    this.assumeImmutableResults = options.assumeImmutableResults;\n    this.dataMasking = options.dataMasking;\n    this.localState = options.localState;\n    this.incrementalHandler = options.incrementalHandler;\n    const documentTransform = options.documentTransform;\n    this.documentTransform =\n      documentTransform ?\n        defaultDocumentTransform\n          .concat(documentTransform)\n          // The custom document transform may add new fragment spreads or new\n          // field selections, so we want to give the cache a chance to run\n          // again. For example, the InMemoryCache adds __typename to field\n          // selections and fragments from the fragment registry.\n          .concat(defaultDocumentTransform)\n      : defaultDocumentTransform;\n    this.defaultContext = options.defaultContext || {};\n\n    if ((this.onBroadcast = options.onBroadcast)) {\n      this.mutationStore = {};\n    }\n  }\n\n  get link() {\n    return this.client.link;\n  }\n\n  get cache() {\n    return this.client.cache;\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.obsQueries.forEach((oq) => oq.stop());\n\n    this.cancelPendingFetches(\n      newInvariantError(\"QueryManager stopped while query was in flight\")\n    );\n  }\n\n  private cancelPendingFetches(error: Error) {\n    this.fetchCancelFns.forEach((cancel) => cancel(error));\n    this.fetchCancelFns.clear();\n  }\n\n  public async mutate<\n    TData,\n    TVariables extends OperationVariables,\n    TCache extends ApolloCache,\n  >({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    onQueryUpdated,\n    fetchPolicy,\n    errorPolicy,\n    keepRootFields,\n    context,\n  }: ApolloClient.MutateOptions<TData, TVariables, TCache> & {\n    errorPolicy: ErrorPolicy;\n    fetchPolicy: MutationFetchPolicy;\n  }): Promise<ApolloClient.MutateResult<MaybeMasked<TData>>> {\n    const queryInfo = new QueryInfo<TData, TVariables, TCache>(this);\n\n    mutation = this.cache.transformForLink(this.transform(mutation));\n    const { hasClientExports } = this.getDocumentInfo(mutation);\n\n    variables = this.getVariables(mutation, variables);\n\n    if (hasClientExports) {\n      if (__DEV__) {\n        invariant(\n          this.localState,\n          \"Mutation '%s' contains `@client` fields with variables provided by `@export` but local state has not been configured.\",\n          getOperationName(mutation, \"(anonymous)\")\n        );\n      }\n\n      variables = await this.localState!.getExportedVariables<TVariables>({\n        client: this.client,\n        document: mutation,\n        variables,\n        context,\n      });\n    }\n\n    const mutationStoreValue =\n      this.mutationStore &&\n      (this.mutationStore[queryInfo.id] = {\n        mutation,\n        variables,\n        loading: true,\n        error: null,\n      } as MutationStoreValue);\n\n    const isOptimistic =\n      optimisticResponse &&\n      queryInfo.markMutationOptimistic(optimisticResponse, {\n        document: mutation,\n        variables,\n        cacheWriteBehavior:\n          fetchPolicy === \"no-cache\" ?\n            CacheWriteBehavior.FORBID\n          : CacheWriteBehavior.MERGE,\n        errorPolicy,\n        context,\n        updateQueries,\n        update: updateWithProxyFn,\n        keepRootFields,\n      });\n\n    this.broadcastQueries();\n\n    return new Promise((resolve, reject) => {\n      const cause = {};\n      return this.getObservableFromLink<TData>(\n        mutation,\n        {\n          ...context,\n          optimisticResponse: isOptimistic ? optimisticResponse : void 0,\n        },\n        variables,\n        {},\n        false\n      )\n        .observable.pipe(\n          validateDidEmitValue(),\n          mergeMap((result) => {\n            const storeResult: typeof result = { ...result };\n\n            return from(\n              queryInfo.markMutationResult(storeResult, {\n                document: mutation,\n                variables,\n                cacheWriteBehavior:\n                  fetchPolicy === \"no-cache\" ?\n                    CacheWriteBehavior.FORBID\n                  : CacheWriteBehavior.MERGE,\n                errorPolicy,\n                context,\n                update: updateWithProxyFn,\n                updateQueries,\n                awaitRefetchQueries,\n                refetchQueries,\n                removeOptimistic: isOptimistic ? queryInfo.id : void 0,\n                onQueryUpdated,\n                keepRootFields,\n              })\n            );\n          })\n        )\n        .pipe(\n          map((storeResult) => {\n            const hasErrors = graphQLResultHasError(storeResult);\n            if (hasErrors && errorPolicy === \"none\") {\n              throw new CombinedGraphQLErrors(storeResult);\n            }\n\n            if (mutationStoreValue) {\n              mutationStoreValue.loading = false;\n              mutationStoreValue.error = null;\n            }\n\n            return storeResult;\n          })\n        )\n        .subscribe({\n          next: (storeResult) => {\n            this.broadcastQueries();\n\n            // Since mutations might receive multiple payloads from the\n            // ApolloLink chain (e.g. when used with @defer),\n            // we resolve with a SingleExecutionResult or after the final\n            // ExecutionPatchResult has arrived and we have assembled the\n            // multipart response into a single result.\n            if (!queryInfo.hasNext) {\n              const result: ApolloClient.MutateResult<TData> = {\n                data: this.maskOperation({\n                  document: mutation,\n                  data: storeResult.data,\n                  fetchPolicy,\n                  cause,\n                }) as any,\n              };\n\n              if (graphQLResultHasError(storeResult)) {\n                result.error = new CombinedGraphQLErrors(storeResult);\n              }\n\n              if (Object.keys(storeResult.extensions || {}).length) {\n                result.extensions = storeResult.extensions;\n              }\n\n              resolve(result);\n            }\n          },\n\n          error: (error) => {\n            if (mutationStoreValue) {\n              mutationStoreValue.loading = false;\n              mutationStoreValue.error = error;\n            }\n\n            if (isOptimistic) {\n              this.cache.removeOptimistic(queryInfo.id);\n            }\n\n            this.broadcastQueries();\n\n            if (errorPolicy === \"ignore\") {\n              return resolve({ data: undefined });\n            }\n\n            if (errorPolicy === \"all\") {\n              return resolve({ data: undefined, error });\n            }\n\n            reject(error);\n          },\n        });\n    });\n  }\n\n  public fetchQuery<TData, TVariables extends OperationVariables>(\n    options: ApolloClient.WatchQueryOptions<TData, TVariables>,\n    networkStatus?: NetworkStatus\n  ): Promise<ApolloClient.QueryResult<TData>> {\n    checkDocument(options.query, OperationTypeNode.QUERY);\n\n    // do the rest asynchronously to keep the same rejection timing as\n    // checks further in `.mutate`\n    return (async () =>\n      lastValueFrom(\n        this.fetchObservableWithInfo(options, {\n          networkStatus,\n        }).observable.pipe(\n          filterMap((value) => {\n            switch (value.kind) {\n              case \"E\":\n                throw value.error;\n              case \"N\": {\n                if (value.source !== \"newNetworkStatus\")\n                  return toQueryResult(value.value);\n              }\n            }\n          })\n        ),\n        {\n          // This default is needed when a `standby` fetch policy is used to avoid\n          // an EmptyError from rejecting this promise.\n          defaultValue: { data: undefined },\n        }\n      ))();\n  }\n\n  public transform(document: DocumentNode) {\n    return this.documentTransform.transformDocument(document);\n  }\n\n  private transformCache = new AutoCleanedWeakCache<\n    DocumentNode,\n    TransformCacheEntry\n  >(\n    cacheSizes[\"queryManager.getDocumentInfo\"] ||\n      defaultCacheSizes[\"queryManager.getDocumentInfo\"]\n  );\n\n  public getDocumentInfo(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const operationDefinition = getOperationDefinition(document);\n\n      const cacheEntry: TransformCacheEntry = {\n        // TODO These three calls (hasClientExports, shouldForceResolvers, and\n        // usesNonreactiveDirective) are performing independent full traversals\n        // of the transformed document. We should consider merging these\n        // traversals into a single pass in the future, though the work is\n        // cached after the first time.\n        hasClientExports: hasDirectives([\"client\", \"export\"], document, true),\n        hasForcedResolvers: hasForcedResolvers(document),\n        hasNonreactiveDirective: hasDirectives([\"nonreactive\"], document),\n        hasIncrementalDirective: hasDirectives([\"defer\"], document),\n        nonReactiveQuery: addNonReactiveToNamedFragments(document),\n        clientQuery: hasDirectives([\"client\"], document) ? document : null,\n        serverQuery: removeDirectivesFromDocument(\n          [\n            { name: \"client\", remove: true },\n            { name: \"connection\" },\n            { name: \"nonreactive\" },\n            { name: \"unmask\" },\n          ],\n          document\n        ),\n        operationType: operationDefinition?.operation,\n        defaultVars: getDefaultValues(\n          operationDefinition\n        ) as OperationVariables,\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: {\n          ...document,\n          definitions: document.definitions.map((def) => {\n            if (\n              def.kind === \"OperationDefinition\" &&\n              def.operation !== \"query\"\n            ) {\n              return { ...def, operation: \"query\" as OperationTypeNode };\n            }\n            return def;\n          }),\n        },\n      };\n\n      transformCache.set(document, cacheEntry);\n    }\n\n    const entry = transformCache.get(document)!;\n    if (entry.violation) {\n      throw entry.violation;\n    }\n    return entry;\n  }\n\n  public getVariables<TVariables extends OperationVariables>(\n    document: DocumentNode,\n    variables?: TVariables\n  ): TVariables {\n    const defaultVars = this.getDocumentInfo(document).defaultVars;\n    const varsWithDefaults = Object.entries(variables ?? {}).map(\n      ([key, value]) => [key, value === undefined ? defaultVars[key] : value]\n    );\n\n    return {\n      ...defaultVars,\n      ...Object.fromEntries(varsWithDefaults),\n    };\n  }\n\n  public watchQuery<\n    TData,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: ApolloClient.WatchQueryOptions<TData, TVariables>\n  ): ObservableQuery<TData, TVariables> {\n    checkDocument(options.query, OperationTypeNode.QUERY);\n\n    const query = this.transform(options.query);\n\n    // assign variable default values if supplied\n    // NOTE: We don't modify options.query here with the transformed query to\n    // ensure observable.options.query is set to the raw untransformed query.\n    options = {\n      ...options,\n      variables: this.getVariables(query, options.variables) as TVariables,\n    };\n\n    if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n      options.notifyOnNetworkStatusChange = true;\n    }\n\n    const observable = new ObservableQuery<TData, TVariables>({\n      queryManager: this,\n      options,\n      transformedQuery: query,\n    });\n\n    return observable;\n  }\n\n  public query<\n    TData,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: ApolloClient.QueryOptions<TData, TVariables>\n  ): Promise<ApolloClient.QueryResult<MaybeMasked<TData>>> {\n    const query = this.transform(options.query);\n\n    return this.fetchQuery<TData, TVariables>({\n      ...(options as any),\n      query,\n    }).then((value) => ({\n      ...value,\n      data: this.maskOperation({\n        document: query,\n        data: value?.data,\n        fetchPolicy: options.fetchPolicy,\n      }),\n    }));\n  }\n\n  private requestIdCounter = 1;\n  public generateRequestId() {\n    return this.requestIdCounter++;\n  }\n\n  public clearStore(\n    options: Cache.ResetOptions = {\n      discardWatches: true,\n    }\n  ): Promise<void> {\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(\n      newInvariantError(\n        \"Store reset while query was in flight (not completed in link chain)\"\n      )\n    );\n\n    this.obsQueries.forEach((observableQuery) => {\n      // Set loading to true so listeners don't trigger unless they want\n      // results with partial data.\n      observableQuery.reset();\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = {};\n    }\n\n    // begin removing data from the store\n    return this.cache.reset(options);\n  }\n\n  public getObservableQueries(\n    include: InternalRefetchQueriesInclude = \"active\"\n  ) {\n    const queries = new Set<ObservableQuery<any>>();\n    const queryNames = new Map<string, string | undefined>();\n    const queryNamesAndQueryStrings = new Map<string, boolean>();\n    const legacyQueryOptions = new Set<ApolloClient.QueryOptions>();\n\n    if (Array.isArray(include)) {\n      include.forEach((desc) => {\n        if (typeof desc === \"string\") {\n          queryNames.set(desc, desc);\n          queryNamesAndQueryStrings.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          const queryString = print(this.transform(desc));\n          queryNames.set(queryString, getOperationName(desc));\n          queryNamesAndQueryStrings.set(queryString, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.obsQueries.forEach((oq) => {\n      const document = print(this.transform(oq.options.query));\n      if (include === \"all\") {\n        queries.add(oq);\n        return;\n      }\n\n      const {\n        queryName,\n        options: { fetchPolicy },\n      } = oq;\n\n      if (include === \"active\" && fetchPolicy === \"standby\") {\n        return;\n      }\n\n      if (\n        include === \"active\" ||\n        (queryName && queryNamesAndQueryStrings.has(queryName)) ||\n        (document && queryNamesAndQueryStrings.has(document))\n      ) {\n        queries.add(oq);\n        if (queryName) queryNamesAndQueryStrings.set(queryName, true);\n        if (document) queryNamesAndQueryStrings.set(document, true);\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach((options) => {\n        const oq = new ObservableQuery({\n          queryManager: this,\n          options: {\n            ...options,\n            fetchPolicy: \"network-only\",\n          },\n        });\n        queries.add(oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndQueryStrings.size) {\n      queryNamesAndQueryStrings.forEach((included, nameOrQueryString) => {\n        if (!included) {\n          const queryName = queryNames.get(nameOrQueryString);\n\n          if (queryName) {\n            invariant.warn(\n              `Unknown query named \"%s\" requested in refetchQueries options.include array`,\n              queryName\n            );\n          } else {\n            invariant.warn(\n              `Unknown anonymous query requested in refetchQueries options.include array`\n            );\n          }\n        }\n      });\n    }\n\n    return queries;\n  }\n\n  public refetchObservableQueries(\n    includeStandby: boolean = false\n  ): Promise<ApolloClient.QueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloClient.QueryResult<any>>[] =\n      [];\n\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(\n      (observableQuery) => {\n        const { fetchPolicy } = observableQuery.options;\n        if (\n          (includeStandby || fetchPolicy !== \"standby\") &&\n          fetchPolicy !== \"cache-only\"\n        ) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n      }\n    );\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public startGraphQLSubscription<TData = unknown>(\n    options: ApolloClient.SubscribeOptions<TData>\n  ): SubscriptionObservable<ApolloClient.SubscribeResult<TData>> {\n    let { query, variables } = options;\n    const {\n      fetchPolicy,\n      errorPolicy = \"none\",\n      context = {},\n      extensions = {},\n    } = options;\n\n    checkDocument(query, OperationTypeNode.SUBSCRIPTION);\n\n    query = this.transform(query);\n    variables = this.getVariables(query, variables);\n\n    let restart: (() => void) | undefined;\n\n    if (__DEV__) {\n      invariant(\n        !this.getDocumentInfo(query).hasClientExports || this.localState,\n        \"Subscription '%s' contains `@client` fields with variables provided by `@export` but local state has not been configured.\",\n        getOperationName(query, \"(anonymous)\")\n      );\n    }\n\n    const observable = (\n      this.getDocumentInfo(query).hasClientExports ?\n        from(\n          this.localState!.getExportedVariables({\n            client: this.client,\n            document: query,\n            variables,\n            context,\n          })\n        )\n      : of(variables)).pipe(\n      mergeMap((variables) => {\n        const { observable, restart: res } = this.getObservableFromLink<TData>(\n          query,\n          context,\n          variables,\n          extensions\n        );\n\n        const queryInfo = new QueryInfo<TData>(this);\n\n        restart = res;\n        return (observable as Observable<FormattedExecutionResult<TData>>).pipe(\n          map((rawResult): ApolloClient.SubscribeResult<TData> => {\n            queryInfo.markSubscriptionResult(rawResult, {\n              document: query,\n              variables,\n              errorPolicy,\n              cacheWriteBehavior:\n                fetchPolicy === \"no-cache\" ?\n                  CacheWriteBehavior.FORBID\n                : CacheWriteBehavior.MERGE,\n            });\n\n            const result: ApolloClient.SubscribeResult<TData> = {\n              data: rawResult.data ?? undefined,\n            };\n\n            if (graphQLResultHasError(rawResult)) {\n              result.error = new CombinedGraphQLErrors(rawResult);\n            } else if (graphQLResultHasProtocolErrors(rawResult)) {\n              result.error = rawResult.extensions[PROTOCOL_ERRORS_SYMBOL];\n              // Don't emit protocol errors added by HttpLink\n              delete rawResult.extensions[PROTOCOL_ERRORS_SYMBOL];\n            }\n\n            if (\n              rawResult.extensions &&\n              Object.keys(rawResult.extensions).length\n            ) {\n              result.extensions = rawResult.extensions;\n            }\n\n            if (result.error && errorPolicy === \"none\") {\n              result.data = undefined;\n            }\n\n            if (errorPolicy === \"ignore\") {\n              delete result.error;\n            }\n\n            return result;\n          }),\n          catchError((error) => {\n            if (errorPolicy === \"ignore\") {\n              return of({\n                data: undefined,\n              } as ApolloClient.SubscribeResult<TData>);\n            }\n\n            return of({ data: undefined, error });\n          }),\n          filter((result) => !!(result.data || result.error))\n        );\n      })\n    );\n\n    return Object.assign(observable, { restart: () => restart?.() });\n  }\n\n  public broadcastQueries() {\n    if (this.onBroadcast) this.onBroadcast();\n    this.obsQueries.forEach((observableQuery) => observableQuery.notify());\n  }\n\n  // Use protected instead of private field so\n  // @apollo/experimental-nextjs-app-support can access type info.\n  protected inFlightLinkObservables = new Trie<{\n    observable?: Observable<ApolloLink.Result<any>>;\n    restart?: () => void;\n  }>(false);\n\n  private getObservableFromLink<TData = unknown>(\n    query: DocumentNode,\n    context: DefaultContext | undefined,\n    variables?: OperationVariables,\n    extensions?: Record<string, any>,\n    // Prefer context.queryDeduplication if specified.\n    deduplication: boolean = context?.queryDeduplication ??\n      this.queryDeduplication\n  ): {\n    restart: () => void;\n    observable: Observable<ApolloLink.Result<TData>>;\n  } {\n    let entry: {\n      observable?: Observable<ApolloLink.Result<TData>>;\n      // The restart function has to be on a mutable object that way if multiple\n      // client.subscribe() calls are made before the first one subscribes to\n      // the observable, the `restart` function can be updated for all\n      // deduplicated client.subscribe() calls.\n      restart?: () => void;\n    } = {};\n\n    const { serverQuery, clientQuery, operationType, hasIncrementalDirective } =\n      this.getDocumentInfo(query);\n\n    const operationName = getOperationName(query);\n    const executeContext: ApolloLink.ExecuteContext = {\n      client: this.client,\n    };\n\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      try {\n        const operation = this.incrementalHandler.prepareRequest({\n          query: serverQuery,\n          variables,\n          context: {\n            ...this.defaultContext,\n            ...context,\n            queryDeduplication: deduplication,\n          },\n          extensions,\n        });\n\n        context = operation.context;\n\n        function withRestart(source: Observable<ApolloLink.Result>) {\n          return new Observable<ApolloLink.Result>((observer) => {\n            function subscribe() {\n              return source.subscribe({\n                next: observer.next.bind(observer),\n                complete: observer.complete.bind(observer),\n                error: observer.error.bind(observer),\n              });\n            }\n            let subscription = subscribe();\n\n            entry.restart ||= () => {\n              subscription.unsubscribe();\n              subscription = subscribe();\n            };\n\n            return () => {\n              subscription.unsubscribe();\n              entry.restart = undefined;\n            };\n          });\n        }\n\n        if (deduplication) {\n          const printedServerQuery = print(serverQuery);\n          const varJson = canonicalStringify(variables);\n\n          entry = inFlightLinkObservables.lookup(printedServerQuery, varJson);\n\n          if (!entry.observable) {\n            entry.observable = execute(link, operation, executeContext).pipe(\n              withRestart,\n              finalize(() => {\n                if (\n                  inFlightLinkObservables.peek(printedServerQuery, varJson) ===\n                  entry\n                ) {\n                  inFlightLinkObservables.remove(printedServerQuery, varJson);\n                }\n              }),\n              // We don't want to replay the last emitted value for\n              // subscriptions and instead opt to wait to receive updates until\n              // the subscription emits new values.\n              operationType === OperationTypeNode.SUBSCRIPTION ?\n                share()\n              : shareReplay({ refCount: true })\n            ) as Observable<ApolloLink.Result<TData>>;\n          }\n        } else {\n          entry.observable = execute(link, operation, executeContext).pipe(\n            withRestart\n          ) as Observable<ApolloLink.Result<TData>>;\n        }\n      } catch (error) {\n        entry.observable = throwError(() => error);\n      }\n    } else {\n      entry.observable = of({ data: {} } as ApolloLink.Result<TData>);\n    }\n\n    if (clientQuery) {\n      const { operation } = getOperationDefinition(query)!;\n      if (__DEV__) {\n        invariant(\n          this.localState,\n          \"%s '%s' contains `@client` fields but local state has not been configured.\",\n          operation[0].toUpperCase() + operation.slice(1),\n          operationName ?? \"(anonymous)\"\n        );\n      }\n\n      invariant(\n        !hasIncrementalDirective,\n        \"%s '%s' contains `@client` and `@defer` directives. These cannot be used together.\",\n        operation[0].toUpperCase() + operation.slice(1),\n        operationName ?? \"(anonymous)\"\n      );\n\n      entry.observable = entry.observable.pipe(\n        mergeMap((result) => {\n          return from(\n            this.localState!.execute<TData>({\n              client: this.client,\n              document: clientQuery,\n              remoteResult: result as FormattedExecutionResult<TData>,\n              context,\n              variables,\n            })\n          );\n        })\n      );\n    }\n\n    return {\n      restart: () => entry.restart?.(),\n      observable: entry.observable.pipe(\n        catchError((error) => {\n          error = toErrorLike(error);\n          registerLinkError(error);\n          throw error;\n        })\n      ),\n    };\n  }\n\n  private getResultsFromLink<TData, TVariables extends OperationVariables>(\n    options: {\n      query: DocumentNode;\n      variables: TVariables;\n      context: DefaultContext | undefined;\n      fetchPolicy: WatchQueryFetchPolicy;\n      errorPolicy: ErrorPolicy;\n    },\n    {\n      queryInfo,\n      cacheWriteBehavior,\n      observableQuery,\n    }: {\n      queryInfo: QueryInfo<TData, TVariables>;\n      cacheWriteBehavior: CacheWriteBehavior;\n      observableQuery: ObservableQuery<TData, TVariables> | undefined;\n    }\n  ): Observable<ObservableQuery.Result<TData>> {\n    const requestId = (queryInfo.lastRequestId = this.generateRequestId());\n    const { errorPolicy } = options;\n\n    // Performing transformForLink here gives this.cache a chance to fill in\n    // missing fragment definitions (for example) before sending this document\n    // through the link chain.\n    const linkDocument = this.cache.transformForLink(options.query);\n\n    return this.getObservableFromLink<TData>(\n      linkDocument,\n      options.context,\n      options.variables\n    ).observable.pipe(\n      map((incoming) => {\n        // Use linkDocument rather than queryInfo.document so the\n        // operation/fragments used to write the result are the same as the\n        // ones used to obtain it from the link.\n        const result = queryInfo.markQueryResult(incoming, {\n          ...options,\n          document: linkDocument,\n          cacheWriteBehavior,\n        });\n        const hasErrors = graphQLResultHasError(result);\n\n        if (hasErrors && errorPolicy === \"none\") {\n          queryInfo.resetLastWrite();\n          observableQuery?.[\"resetNotifications\"]();\n          throw new CombinedGraphQLErrors(result);\n        }\n\n        const aqr = {\n          data: result.data as TData,\n          ...(queryInfo.hasNext ?\n            {\n              loading: true,\n              networkStatus: NetworkStatus.streaming,\n              dataState: \"streaming\",\n              partial: true,\n            }\n          : {\n              dataState: result.data ? \"complete\" : \"empty\",\n              loading: false,\n              networkStatus: NetworkStatus.ready,\n              partial: !result.data,\n            }),\n        } as ObservableQuery.Result<TData>;\n\n        // In the case we start multiple network requests simulatenously, we\n        // want to ensure we properly set `data` if we're reporting on an old\n        // result which will not be caught by the conditional above that ends up\n        // throwing the markError result.\n        if (hasErrors) {\n          if (errorPolicy === \"none\") {\n            aqr.data = void 0 as TData;\n            aqr.dataState = \"empty\";\n          }\n          if (errorPolicy !== \"ignore\") {\n            aqr.error = new CombinedGraphQLErrors(result);\n            if (aqr.dataState !== \"streaming\") {\n              aqr.networkStatus = NetworkStatus.error;\n            }\n          }\n        }\n\n        return aqr;\n      }),\n      catchError((error) => {\n        // Avoid storing errors from older interrupted queries.\n        if (requestId >= queryInfo.lastRequestId && errorPolicy === \"none\") {\n          queryInfo.resetLastWrite();\n          observableQuery?.[\"resetNotifications\"]();\n          throw error;\n        }\n\n        const aqr: ObservableQuery.Result<TData> = {\n          data: undefined,\n          dataState: \"empty\",\n          loading: false,\n          networkStatus: NetworkStatus.ready,\n          partial: true,\n        };\n\n        if (errorPolicy !== \"ignore\") {\n          aqr.error = error;\n          aqr.networkStatus = NetworkStatus.error;\n        }\n\n        return of(aqr);\n      })\n    );\n  }\n\n  public fetchObservableWithInfo<TData, TVariables extends OperationVariables>(\n    options: ApolloClient.WatchQueryOptions<TData, TVariables>,\n    {\n      // The initial networkStatus for this fetch, most often\n      // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n      // or setVariables.\n      networkStatus = NetworkStatus.loading,\n      query = options.query,\n      fetchQueryOperator = (x) => x,\n      onCacheHit = () => {},\n      observableQuery,\n    }: {\n      networkStatus?: NetworkStatus;\n      query?: DocumentNode;\n      fetchQueryOperator?: <T>(source: Observable<T>) => Observable<T>;\n      onCacheHit?: () => void;\n      observableQuery?: ObservableQuery<TData, TVariables> | undefined;\n    }\n  ): ObservableAndInfo<TData> {\n    const variables = this.getVariables(query, options.variables) as TVariables;\n\n    const defaults = this.defaultOptions.watchQuery;\n    let {\n      fetchPolicy = (defaults && defaults.fetchPolicy) || \"cache-first\",\n      errorPolicy = (defaults && defaults.errorPolicy) || \"none\",\n      returnPartialData = false,\n      notifyOnNetworkStatusChange = true,\n      context = {},\n    } = options;\n\n    if (\n      this.prioritizeCacheValues &&\n      (fetchPolicy === \"network-only\" || fetchPolicy === \"cache-and-network\")\n    ) {\n      fetchPolicy = \"cache-first\";\n    }\n\n    const normalized = Object.assign({}, options, {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      notifyOnNetworkStatusChange,\n      context,\n    });\n\n    const queryInfo = new QueryInfo<TData, TVariables>(this, observableQuery);\n\n    const fromVariables = (variables: TVariables) => {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n\n      const cacheWriteBehavior =\n        fetchPolicy === \"no-cache\" ? CacheWriteBehavior.FORBID\n          // Watched queries must opt into overwriting existing data on refetch,\n          // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n        : (\n          networkStatus === NetworkStatus.refetch &&\n          normalized.refetchWritePolicy !== \"merge\"\n        ) ?\n          CacheWriteBehavior.OVERWRITE\n        : CacheWriteBehavior.MERGE;\n      const observableWithInfo = this.fetchQueryByPolicy<TData, TVariables>(\n        normalized,\n        { queryInfo, cacheWriteBehavior, onCacheHit, observableQuery }\n      );\n      observableWithInfo.observable =\n        observableWithInfo.observable.pipe(fetchQueryOperator);\n\n      if (\n        // If we're in standby, postpone advancing options.fetchPolicy using\n        // applyNextFetchPolicy.\n        normalized.fetchPolicy !== \"standby\"\n      ) {\n        observableQuery?.[\"applyNextFetchPolicy\"](\n          \"after-fetch\",\n          options as any\n        );\n      }\n\n      return observableWithInfo;\n    };\n\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    const cleanupCancelFn = () => {\n      this.fetchCancelFns.delete(queryInfo.id);\n    };\n    this.fetchCancelFns.set(queryInfo.id, (error) => {\n      fetchCancelSubject.next({\n        kind: \"E\",\n        error,\n        source: \"network\",\n      });\n    });\n\n    const fetchCancelSubject = new Subject<QueryNotification.Value<TData>>();\n    let observable: Observable<QueryNotification.Value<TData>>,\n      containsDataFromLink: boolean;\n\n    // If the query has @export(as: ...) directives, then we need to\n    // process those directives asynchronously. When there are no\n    // @export directives (the common case), we deliberately avoid\n    // wrapping the result of this.fetchQueryByPolicy in a Promise,\n    // since the timing of result delivery is (unfortunately) important\n    // for backwards compatibility. TODO This code could be simpler if\n    // we deprecated and removed LocalState.\n    if (this.getDocumentInfo(normalized.query).hasClientExports) {\n      if (__DEV__) {\n        invariant(\n          this.localState,\n          \"Query '%s' contains `@client` fields with variables provided by `@export` but local state has not been configured.\",\n          getOperationName(normalized.query, \"(anonymous)\")\n        );\n      }\n\n      observable = from(\n        this.localState!.getExportedVariables({\n          client: this.client,\n          document: normalized.query,\n          variables: normalized.variables,\n          context: normalized.context,\n        })\n      ).pipe(mergeMap((variables) => fromVariables(variables).observable));\n\n      // there is just no way we can synchronously get the *right* value here,\n      // so we will assume `true`, which is the behaviour before the bug fix in\n      // #10597. This means that bug is not fixed in that case, and is probably\n      // un-fixable with reasonable effort for the edge case of @export as\n      // directives.\n      containsDataFromLink = true;\n    } else {\n      const sourcesWithInfo = fromVariables(normalized.variables);\n      containsDataFromLink = sourcesWithInfo.fromLink;\n      observable = sourcesWithInfo.observable;\n    }\n\n    return {\n      // Merge `observable` with `fetchCancelSubject`, in a way that completing or\n      // erroring either of them will complete the merged obserable.\n      observable: new Observable<QueryNotification.Value<TData>>((observer) => {\n        observer.add(cleanupCancelFn);\n        observable.subscribe(observer);\n        fetchCancelSubject.subscribe(observer);\n      }).pipe(share()),\n      fromLink: containsDataFromLink,\n    };\n  }\n\n  public refetchQueries<TResult>({\n    updateCache,\n    include,\n    optimistic = false,\n    removeOptimistic = optimistic ? makeUniqueId(\"refetchQueries\") : void 0,\n    onQueryUpdated,\n  }: InternalRefetchQueriesOptions<\n    ApolloCache,\n    TResult\n  >): InternalRefetchQueriesMap<TResult> {\n    const includedQueriesByOq = new Map<\n      ObservableQuery<any>,\n      {\n        oq: ObservableQuery<any>;\n        lastDiff?: Cache.DiffResult<any>;\n        diff?: Cache.DiffResult<any>;\n      }\n    >();\n\n    if (include) {\n      this.getObservableQueries(include).forEach((oq) => {\n        if (oq.options.fetchPolicy === \"cache-only\") {\n          return;\n        }\n\n        const current = oq.getCurrentResult();\n        includedQueriesByOq.set(oq, {\n          oq,\n          lastDiff: {\n            result: current?.data,\n            complete: !current?.partial,\n          },\n        });\n      });\n    }\n\n    const results: InternalRefetchQueriesMap<TResult> = new Map();\n\n    if (updateCache) {\n      const handled = new Set<ObservableQuery<any>>();\n      this.cache.batch({\n        update: updateCache,\n\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: (optimistic && removeOptimistic) || false,\n\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic,\n\n        onWatchUpdated(watch, diff, lastDiff) {\n          const oq = watch.watcher;\n\n          if (oq instanceof ObservableQuery && !handled.has(oq)) {\n            handled.add(oq);\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesByOq.delete(oq);\n\n              let result:\n                | TResult\n                | boolean\n                | Promise<ApolloClient.QueryResult<any>> = onQueryUpdated(\n                oq,\n                diff,\n                lastDiff\n              );\n\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq\n                  .refetch()\n                  .retain(/* create a persistent subscription on the query */);\n              }\n\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(\n                  oq,\n                  result as InternalRefetchQueriesResult<TResult>\n                );\n              }\n\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n\n            if (\n              onQueryUpdated !== null &&\n              oq.options.fetchPolicy !== \"cache-only\"\n            ) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesByOq.set(oq, { oq, lastDiff, diff });\n            }\n          }\n        },\n      });\n    }\n\n    if (includedQueriesByOq.size) {\n      includedQueriesByOq.forEach(({ oq, lastDiff, diff }) => {\n        let result:\n          | TResult\n          | boolean\n          | Promise<ApolloClient.QueryResult<any>>\n          | undefined;\n\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            diff = oq.getCacheDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq\n            .refetch()\n            .retain(/* create a persistent subscription on the query */);\n        }\n\n        if (result !== false) {\n          results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  }\n\n  private noCacheWarningsByCause = new WeakSet<object>();\n\n  public maskOperation<TData = unknown>(\n    options: MaskOperationOptions<TData>\n  ): MaybeMasked<TData> {\n    const { document, data } = options;\n\n    if (__DEV__) {\n      const { fetchPolicy, cause = {} } = options;\n      const operationType = getOperationDefinition(document)?.operation;\n\n      if (\n        this.dataMasking &&\n        fetchPolicy === \"no-cache\" &&\n        !isFullyUnmaskedOperation(document) &&\n        !this.noCacheWarningsByCause.has(cause)\n      ) {\n        this.noCacheWarningsByCause.add(cause);\n\n        invariant.warn(\n          '[%s]: Fragments masked by data masking are inaccessible when using fetch policy \"no-cache\". Please add `@unmask` to each fragment spread to access the data.',\n          getOperationName(document, `Unnamed ${operationType ?? \"operation\"}`)\n        );\n      }\n    }\n\n    return (\n      this.dataMasking ?\n        maskOperation(data, document, this.cache)\n      : data) as MaybeMasked<TData>;\n  }\n\n  public maskFragment<TData = unknown>(options: MaskFragmentOptions<TData>) {\n    const { data, fragment, fragmentName } = options;\n\n    return this.dataMasking ?\n        maskFragment(data, fragment, this.cache, fragmentName)\n      : data;\n  }\n\n  private fetchQueryByPolicy<TData, TVariables extends OperationVariables>(\n    {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      context,\n    }: {\n      query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n      variables: TVariables;\n      fetchPolicy: WatchQueryFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      returnPartialData?: boolean;\n      context?: DefaultContext;\n    },\n    {\n      cacheWriteBehavior,\n      onCacheHit,\n      queryInfo,\n      observableQuery,\n    }: {\n      cacheWriteBehavior: CacheWriteBehavior;\n      onCacheHit: () => void;\n      queryInfo: QueryInfo<TData, TVariables>;\n      observableQuery: ObservableQuery<TData, TVariables> | undefined;\n    }\n  ): ObservableAndInfo<TData> {\n    const readCache = () =>\n      this.cache.diff<any>({\n        query,\n        variables,\n        returnPartialData: true,\n        optimistic: true,\n      });\n\n    const resultsFromCache = (\n      diff: Cache.DiffResult<TData>,\n      networkStatus: NetworkStatus\n    ): Observable<QueryNotification.FromCache<TData>> => {\n      const data = diff.result;\n\n      if (__DEV__ && !returnPartialData && data !== null) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      const toResult = (\n        data: TData | DeepPartial<TData> | undefined\n      ): ObservableQuery.Result<TData> => {\n        // TODO: Eventually we should move this handling into\n        // queryInfo.getDiff() directly. Since getDiff is updated to return null\n        // on returnPartialData: false, we should take advantage of that instead\n        // of having to patch it elsewhere.\n        if (!diff.complete && !returnPartialData) {\n          data = undefined;\n        }\n\n        return {\n          // TODO: Handle partial data\n          data: data as TData | undefined,\n          dataState:\n            diff.complete ? \"complete\"\n            : data ? \"partial\"\n            : \"empty\",\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus,\n          partial: !diff.complete,\n        } as ObservableQuery.Result<TData>;\n      };\n\n      const fromData = (\n        data: TData | DeepPartial<TData> | undefined\n      ): Observable<QueryNotification.FromCache<TData>> => {\n        return of({\n          kind: \"N\",\n          value: toResult(data),\n          source: \"cache\",\n        });\n      };\n\n      if (\n        // Don't attempt to run forced resolvers if we have incomplete cache\n        // data and partial isn't allowed since this result would get set to\n        // `undefined` anyways in `toResult`.\n        (diff.complete || returnPartialData) &&\n        this.getDocumentInfo(query).hasForcedResolvers\n      ) {\n        if (__DEV__) {\n          invariant(\n            this.localState,\n            \"Query '%s' contains `@client` fields but local state has not been configured.\",\n            getOperationName(query, \"(anonymous)\")\n          );\n        }\n        onCacheHit();\n\n        return from(\n          this.localState!.execute<TData>({\n            client: this.client,\n            document: query,\n            remoteResult: data ? { data } : undefined,\n            context,\n            variables,\n            onlyRunForcedResolvers: true,\n            returnPartialData: true,\n          }).then(\n            (resolved): QueryNotification.FromCache<TData> => ({\n              kind: \"N\",\n              value: toResult(resolved.data || void 0),\n              source: \"cache\",\n            })\n          )\n        );\n      }\n\n      // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n      // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n      // data was incorrectly returned from the cache on refetch:\n      // if diff.missing exists, we should not return cache data.\n      if (\n        errorPolicy === \"none\" &&\n        networkStatus === NetworkStatus.refetch &&\n        diff.missing\n      ) {\n        return fromData(void 0);\n      }\n\n      return fromData(data || undefined);\n    };\n\n    const resultsFromLink = () =>\n      this.getResultsFromLink<TData, TVariables>(\n        {\n          query,\n          variables,\n          context,\n          fetchPolicy,\n          errorPolicy,\n        },\n        {\n          cacheWriteBehavior,\n          queryInfo,\n          observableQuery,\n        }\n      ).pipe(\n        validateDidEmitValue(),\n        materialize(),\n        map(\n          (result): QueryNotification.FromNetwork<TData> => ({\n            ...result,\n            source: \"network\",\n          })\n        )\n      );\n\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\": {\n        const diff = readCache();\n\n        if (diff.complete) {\n          return {\n            fromLink: false,\n            observable: resultsFromCache(diff, NetworkStatus.ready),\n          };\n        }\n\n        if (returnPartialData) {\n          return {\n            fromLink: true,\n            observable: concat(\n              resultsFromCache(diff, NetworkStatus.loading),\n              resultsFromLink()\n            ),\n          };\n        }\n\n        return { fromLink: true, observable: resultsFromLink() };\n      }\n\n      case \"cache-and-network\": {\n        const diff = readCache();\n\n        if (diff.complete || returnPartialData) {\n          return {\n            fromLink: true,\n            observable: concat(\n              resultsFromCache(diff, NetworkStatus.loading),\n              resultsFromLink()\n            ),\n          };\n        }\n\n        return { fromLink: true, observable: resultsFromLink() };\n      }\n\n      case \"cache-only\":\n        return {\n          fromLink: false,\n          observable: concat(\n            resultsFromCache(readCache(), NetworkStatus.ready)\n          ),\n        };\n\n      case \"network-only\":\n        return { fromLink: true, observable: resultsFromLink() };\n\n      case \"no-cache\":\n        return { fromLink: true, observable: resultsFromLink() };\n\n      case \"standby\":\n        return { fromLink: false, observable: EMPTY };\n    }\n  }\n}\n\nfunction validateDidEmitValue<T>() {\n  let didEmitValue = false;\n\n  return tap<T>({\n    next() {\n      didEmitValue = true;\n    },\n    complete() {\n      invariant(\n        didEmitValue,\n        \"The link chain completed without emitting a value. This is likely unintentional and should be updated to emit a value before completing.\"\n      );\n    },\n  });\n}\n\n// Return types used by fetchQueryByPolicy and other private methods above.\ninterface ObservableAndInfo<TData> {\n  // Metadata properties that can be returned in addition to the Observable.\n  fromLink: boolean;\n  observable: Observable<QueryNotification.Value<TData>>;\n}\n\nfunction isFullyUnmaskedOperation(document: DocumentNode) {\n  let isUnmasked = true;\n\n  visit(document, {\n    FragmentSpread: (node) => {\n      isUnmasked =\n        !!node.directives &&\n        node.directives.some((directive) => directive.name.value === \"unmask\");\n\n      if (!isUnmasked) {\n        return BREAK;\n      }\n    },\n  });\n\n  return isUnmasked;\n}\n\nfunction addNonReactiveToNamedFragments(document: DocumentNode) {\n  return visit(document, {\n    FragmentSpread: (node) => {\n      // Do not add `@nonreactive` if the fragment is marked with `@unmask`\n      // since we want to react to changes in this fragment.\n      if (\n        node.directives?.some((directive) => directive.name.value === \"unmask\")\n      ) {\n        return;\n      }\n\n      return {\n        ...node,\n        directives: [\n          ...(node.directives || []),\n          {\n            kind: Kind.DIRECTIVE,\n            name: { kind: Kind.NAME, value: \"nonreactive\" },\n          } satisfies DirectiveNode,\n        ],\n      };\n    },\n  });\n}\n","import type { ApolloClient, OperationVariables } from \"@apollo/client\";\n\nimport { compact } from \"./compact.js\";\n\ntype OptionsUnion<TData, TVariables extends OperationVariables> =\n  | ApolloClient.WatchQueryOptions<TData, TVariables>\n  | ApolloClient.QueryOptions<TData, TVariables>\n  | ApolloClient.MutateOptions<TData, TVariables, any>;\n\n/** @internal */\nexport function mergeOptions<\n  TDefaultOptions extends Partial<OptionsUnion<any, any>>,\n  TOptions extends TDefaultOptions,\n>(\n  defaults: TDefaultOptions | Partial<TDefaultOptions> | undefined,\n  options: TOptions | Partial<TOptions>\n): TOptions & TDefaultOptions {\n  return compact(\n    defaults,\n    options,\n    options.variables && {\n      variables: compact({\n        ...(defaults && defaults.variables),\n        ...options.variables,\n      }),\n    }\n  );\n}\n","import { __DEV__ } from \"@apollo/client/utilities/environment\";\n\nimport { isNonNullObject } from \"./isNonNullObject.js\";\n\n/** @internal only to be imported in tests */\nexport function deepFreeze(value: any) {\n  const workSet = new Set([value]);\n  workSet.forEach((obj) => {\n    if (isNonNullObject(obj) && shallowFreeze(obj) === obj) {\n      Object.getOwnPropertyNames(obj).forEach((name) => {\n        if (isNonNullObject(obj[name])) workSet.add(obj[name]);\n      });\n    }\n  });\n  return value;\n}\n\nfunction shallowFreeze<T extends object>(obj: T): T | null {\n  if (__DEV__ && !Object.isFrozen(obj)) {\n    try {\n      Object.freeze(obj);\n    } catch (e) {\n      // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but\n      // they all throw a TypeError when you try, so we re-throw any exceptions\n      // that are not TypeErrors, since that would be unexpected.\n      if (e instanceof TypeError) return null;\n      throw e;\n    }\n  }\n  return obj;\n}\n","import type { OperationDefinitionNode, ValueNode } from \"graphql\";\n\nimport { valueToObjectRepresentation } from \"./valueToObjectRepresentation.js\";\n\n/** @internal */\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined\n): Record<string, any> {\n  const defaultValues = {};\n  const defs = definition && definition.variableDefinitions;\n  if (defs && defs.length) {\n    defs.forEach((def) => {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(\n          defaultValues,\n          def.variable.name,\n          def.defaultValue as ValueNode\n        );\n      }\n    });\n  }\n  return defaultValues;\n}\n","import { equal } from \"@wry/equality\";\nimport type {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n} from \"graphql\";\nimport type { OptimisticWrapperFunction } from \"optimism\";\nimport { wrap } from \"optimism\";\n\nimport type { OperationVariables } from \"@apollo/client\";\nimport type {\n  DeepPartial,\n  Reference,\n  StoreObject,\n} from \"@apollo/client/utilities\";\nimport {\n  addTypenameToDocument,\n  cacheSizes,\n  canonicalStringify,\n  DocumentTransform,\n  isReference,\n  print,\n} from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { getInMemoryCacheMemoryInternals } from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport { defaultCacheSizes } from \"../../utilities/caching/sizes.js\";\nimport { ApolloCache } from \"../core/cache.js\";\nimport type { Cache } from \"../core/types/Cache.js\";\n\nimport { EntityStore, supportsResultCaching } from \"./entityStore.js\";\nimport { hasOwn, normalizeConfig } from \"./helpers.js\";\nimport { Policies } from \"./policies.js\";\nimport { forgetCache, makeVar, recallCache } from \"./reactiveVars.js\";\nimport { StoreReader } from \"./readFromStore.js\";\nimport type { InMemoryCacheConfig, NormalizedCacheObject } from \"./types.js\";\nimport { StoreWriter } from \"./writeToStore.js\";\n\ntype BroadcastOptions = Pick<\n  Cache.BatchOptions<InMemoryCache>,\n  \"optimistic\" | \"onWatchUpdated\"\n>;\n\nexport class InMemoryCache extends ApolloCache {\n  private data!: EntityStore;\n  private optimisticData!: EntityStore;\n\n  protected config: InMemoryCacheConfig;\n  private watches = new Set<Cache.WatchOptions<any, any>>();\n\n  private storeReader!: StoreReader;\n  private storeWriter!: StoreWriter;\n  private addTypenameTransform = new DocumentTransform(addTypenameToDocument);\n\n  private maybeBroadcastWatch!: OptimisticWrapperFunction<\n    [Cache.WatchOptions<any, any>, BroadcastOptions?],\n    any,\n    [Cache.WatchOptions<any, any>]\n  >;\n\n  // Override the default value, since InMemoryCache result objects are frozen\n  // in development and expected to remain logically immutable in production.\n  public readonly assumeImmutableResults = true;\n\n  // Dynamically imported code can augment existing typePolicies or\n  // possibleTypes by calling cache.policies.addTypePolicies or\n  // cache.policies.addPossibletypes.\n  public readonly policies: Policies;\n\n  public readonly makeVar = makeVar;\n\n  constructor(config: InMemoryCacheConfig = {}) {\n    super();\n    this.config = normalizeConfig(config);\n\n    this.policies = new Policies({\n      cache: this,\n      dataIdFromObject: this.config.dataIdFromObject,\n      possibleTypes: this.config.possibleTypes,\n      typePolicies: this.config.typePolicies,\n    });\n\n    this.init();\n  }\n\n  private init() {\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    const rootStore = (this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching,\n    }));\n\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of EntityStore Layer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = rootStore.stump;\n\n    this.resetResultCache();\n  }\n\n  private resetResultCache() {\n    const { fragments } = this.config;\n\n    this.addTypenameTransform.resetCache();\n    fragments?.resetCaches();\n\n    // The StoreWriter is mostly stateless and so doesn't really need to be\n    // reset, but it does need to have its writer.storeReader reference updated,\n    // so it's simpler to update this.storeWriter as well.\n    this.storeWriter = new StoreWriter(\n      this,\n      (this.storeReader = new StoreReader({ cache: this, fragments })),\n      fragments\n    );\n\n    this.maybeBroadcastWatch = wrap(\n      (c: Cache.WatchOptions, options?: BroadcastOptions) => {\n        return this.broadcastWatch(c, options);\n      },\n      {\n        max:\n          cacheSizes[\"inMemoryCache.maybeBroadcastWatch\"] ||\n          defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"],\n        makeCacheKey: (c: Cache.WatchOptions) => {\n          // Return a cache key (thus enabling result caching) only if we're\n          // currently using a data store that can track cache dependencies.\n          const store = c.optimistic ? this.optimisticData : this.data;\n          if (supportsResultCaching(store)) {\n            const { optimistic, id, variables } = c;\n            return store.makeCacheKey(\n              c.query,\n              // Different watches can have the same query, optimistic\n              // status, rootId, and variables, but if their callbacks are\n              // different, the (identical) result needs to be delivered to\n              // each distinct callback. The easiest way to achieve that\n              // separation is to include c.callback in the cache key for\n              // maybeBroadcastWatch calls. See issue #5733.\n              c.callback,\n              canonicalStringify({ optimistic, id, variables })\n            );\n          }\n        },\n      }\n    );\n\n    // Since we have thrown away all the cached functions that depend on the\n    // CacheGroup dependencies maintained by EntityStore, we should also reset\n    // all CacheGroup dependency information.\n    new Set([this.data.group, this.optimisticData.group]).forEach((group) =>\n      group.resetCaching()\n    );\n  }\n\n  public restore(data: NormalizedCacheObject): this {\n    this.init();\n    // Since calling this.init() discards/replaces the entire StoreReader, along\n    // with the result caches it maintains, this.data.replace(data) won't have\n    // to bother deleting the old data.\n    if (data) this.data.replace(data);\n    return this;\n  }\n\n  public extract(optimistic: boolean = false): NormalizedCacheObject {\n    return (optimistic ? this.optimisticData : this.data).extract();\n  }\n\n  public read<TData = unknown>(\n    options: Cache.ReadOptions<TData, OperationVariables> & {\n      returnPartialData: true;\n    }\n  ): TData | DeepPartial<TData> | null;\n\n  public read<TData = unknown>(\n    options: Cache.ReadOptions<TData, OperationVariables>\n  ): TData | null;\n\n  public read<TData = unknown>(\n    options: Cache.ReadOptions<TData, OperationVariables>\n  ): TData | DeepPartial<TData> | null {\n    const {\n      // Since read returns data or null, without any additional metadata\n      // about whether/where there might have been missing fields, the\n      // default behavior cannot be returnPartialData = true (like it is\n      // for the diff method), since defaulting to true would violate the\n      // integrity of the T in the return type. However, partial data may\n      // be useful in some cases, so returnPartialData:true may be\n      // specified explicitly.\n      returnPartialData = false,\n    } = options;\n\n    return this.storeReader.diffQueryAgainstStore<TData>({\n      ...options,\n      store: options.optimistic ? this.optimisticData : this.data,\n      config: this.config,\n      returnPartialData,\n    }).result;\n  }\n\n  public write<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(options: Cache.WriteOptions<TData, TVariables>): Reference | undefined {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public modify<Entity extends Record<string, any> = Record<string, any>>(\n    options: Cache.ModifyOptions<Entity>\n  ): boolean {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      // To my knowledge, TypeScript does not currently provide a way to\n      // enforce that an optional property?:type must *not* be undefined\n      // when present. That ability would be useful here, because we want\n      // options.id to default to ROOT_QUERY only when no options.id was\n      // provided. If the caller attempts to pass options.id with a\n      // falsy/undefined value (perhaps because cache.identify failed), we\n      // should not assume the goal was to modify the ROOT_QUERY object.\n      // We could throw, but it seems natural to return false to indicate\n      // that nothing was modified.\n      return false;\n    }\n    const store =\n      (\n        options.optimistic // Defaults to false.\n      ) ?\n        this.optimisticData\n      : this.data;\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields, false);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public diff<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(options: Cache.DiffOptions<TData, TVariables>): Cache.DiffResult<TData> {\n    return this.storeReader.diffQueryAgainstStore({\n      ...options,\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config,\n    });\n  }\n\n  public watch<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(watch: Cache.WatchOptions<TData, TVariables>): () => void {\n    if (!this.watches.size) {\n      // In case we previously called forgetCache(this) because\n      // this.watches became empty (see below), reattach this cache to any\n      // reactive variables on which it previously depended. It might seem\n      // paradoxical that we're able to recall something we supposedly\n      // forgot, but the point of calling forgetCache(this) is to silence\n      // useless broadcasts while this.watches is empty, and to allow the\n      // cache to be garbage collected. If, however, we manage to call\n      // recallCache(this) here, this cache object must not have been\n      // garbage collected yet, and should resume receiving updates from\n      // reactive variables, now that it has a watcher to notify.\n      recallCache(this);\n    }\n    this.watches.add(watch);\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n    return () => {\n      // Once we remove the last watch from this.watches, cache.broadcastWatches\n      // no longer does anything, so we preemptively tell the reactive variable\n      // system to exclude this cache from future broadcasts.\n      if (this.watches.delete(watch) && !this.watches.size) {\n        forgetCache(this);\n      }\n      // Remove this watch from the LRU cache managed by the\n      // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n      // leaks involving the closure of watch.callback.\n      this.maybeBroadcastWatch.forget(watch);\n    };\n  }\n\n  public gc(options?: {\n    // If true, also free non-essential result cache memory by bulk-releasing\n    // this.{store{Reader,Writer},maybeBroadcastWatch}. Defaults to false.\n    resetResultCache?: boolean;\n  }) {\n    canonicalStringify.reset();\n    print.reset();\n    const ids = this.optimisticData.gc();\n    if (options && !this.txCount && options.resetResultCache) {\n      this.resetResultCache();\n    }\n    return ids;\n  }\n\n  // Call this method to ensure the given root ID remains in the cache after\n  // garbage collection, along with its transitive child entities. Note that\n  // the cache automatically retains all directly written entities. By default,\n  // the retainment persists after optimistic updates are removed. Pass true\n  // for the optimistic argument if you would prefer for the retainment to be\n  // discarded when the top-most optimistic layer is removed. Returns the\n  // resulting (non-negative) retainment count.\n  public retain(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  }\n\n  // Call this method to undo the effect of the retain method, above. Once the\n  // retainment count falls to zero, the given ID will no longer be preserved\n  // during garbage collection, though it may still be preserved by other safe\n  // entities that refer to it. Returns the resulting (non-negative) retainment\n  // count, in case that's useful.\n  public release(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  }\n\n  // Returns the canonical ID for a given StoreObject, obeying typePolicies\n  // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n  // the object must contain a __typename and any primary key fields required\n  // to identify entities of that type. If you pass a query result object, be\n  // sure that none of the primary key fields have been renamed by aliasing.\n  // If you pass a Reference object, its __ref ID string will be returned.\n  public identify(object: StoreObject | Reference): string | undefined {\n    if (isReference(object)) return object.__ref;\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      invariant.warn(e);\n    }\n  }\n\n  public evict(options: Cache.EvictOptions): boolean {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        // See comment in modify method about why we return false when\n        // options.id exists but is falsy/undefined.\n        return false;\n      }\n      options = { ...options, id: \"ROOT_QUERY\" };\n    }\n    try {\n      // It's unlikely that the eviction will end up invoking any other\n      // cache update operations while it's running, but {in,de}crementing\n      // this.txCount still seems like a good idea, for uniformity with\n      // the other update methods.\n      ++this.txCount;\n      // Pass this.data as a limit on the depth of the eviction, so evictions\n      // during optimistic updates (when this.data is temporarily set equal to\n      // this.optimisticData) do not escape their optimistic Layer.\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public reset(options?: Cache.ResetOptions): Promise<void> {\n    this.init();\n\n    canonicalStringify.reset();\n\n    if (options && options.discardWatches) {\n      // Similar to what happens in the unsubscribe function returned by\n      // cache.watch, applied to all current watches.\n      this.watches.forEach((watch) => this.maybeBroadcastWatch.forget(watch));\n      this.watches.clear();\n      forgetCache(this);\n    } else {\n      // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n      // this.broadcastWatches() triggers a broadcast to every current watcher\n      // (letting them know their data is now missing). This default behavior is\n      // convenient because it means the watches do not have to be manually\n      // reestablished after resetting the cache. To prevent this broadcast and\n      // cancel all watches, pass true for options.discardWatches.\n      this.broadcastWatches();\n    }\n\n    return Promise.resolve();\n  }\n\n  public removeOptimistic(idToRemove: string) {\n    const newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  }\n\n  private txCount = 0;\n\n  public batch<TUpdateResult>(\n    options: Cache.BatchOptions<InMemoryCache, TUpdateResult>\n  ): TUpdateResult {\n    const {\n      update,\n      optimistic = true,\n      removeOptimistic,\n      onWatchUpdated,\n    } = options;\n\n    let updateResult: TUpdateResult;\n    const perform = (layer?: EntityStore): TUpdateResult => {\n      const { data, optimisticData } = this;\n      ++this.txCount;\n      if (layer) {\n        this.data = this.optimisticData = layer;\n      }\n      try {\n        return (updateResult = update(this));\n      } finally {\n        --this.txCount;\n        this.data = data;\n        this.optimisticData = optimisticData;\n      }\n    };\n\n    const alreadyDirty = new Set<Cache.WatchOptions>();\n\n    if (onWatchUpdated && !this.txCount) {\n      // If an options.onWatchUpdated callback is provided, we want to call it\n      // with only the Cache.WatchOptions objects affected by options.update,\n      // but there might be dirty watchers already waiting to be broadcast that\n      // have nothing to do with the update. To prevent including those watchers\n      // in the post-update broadcast, we perform this initial broadcast to\n      // collect the dirty watchers, so we can re-dirty them later, after the\n      // post-update broadcast, allowing them to receive their pending\n      // broadcasts the next time broadcastWatches is called, just as they would\n      // if we never called cache.batch.\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch) {\n          alreadyDirty.add(watch);\n          return false;\n        },\n      });\n    }\n\n    if (typeof optimistic === \"string\") {\n      // Note that there can be multiple layers with the same optimistic ID.\n      // When removeOptimistic(id) is called for that id, all matching layers\n      // will be removed, and the remaining layers will be reapplied.\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      // Ensure both this.data and this.optimisticData refer to the root\n      // (non-optimistic) layer of the cache during the update. Note that\n      // this.data could be a Layer if we are currently executing an optimistic\n      // update function, but otherwise will always be an EntityStore.Root\n      // instance.\n      perform(this.data);\n    } else {\n      // Otherwise, leave this.data and this.optimisticData unchanged and run\n      // the update with broadcast batching.\n      perform();\n    }\n\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n\n    // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n    // takes the else branch and calls this.broadcastWatches(options), which\n    // does nothing when this.txCount > 0.\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch, diff) {\n          const result = onWatchUpdated.call(this, watch, diff);\n          if (result !== false) {\n            // Since onWatchUpdated did not return false, this diff is\n            // about to be broadcast to watch.callback, so we don't need\n            // to re-dirty it with the other alreadyDirty watches below.\n            alreadyDirty.delete(watch);\n          }\n          return result;\n        },\n      });\n      // Silently re-dirty any watches that were already dirty before the update\n      // was performed, and were not broadcast just now.\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach((watch) => this.maybeBroadcastWatch.dirty(watch));\n      }\n    } else {\n      // If alreadyDirty is empty or we don't have an onWatchUpdated\n      // function, we don't need to go to the trouble of wrapping\n      // options.onWatchUpdated.\n      this.broadcastWatches(options);\n    }\n\n    return updateResult!;\n  }\n\n  public performTransaction(\n    update: (cache: InMemoryCache) => any,\n    optimisticId?: string | null\n  ) {\n    return this.batch({\n      update,\n      optimistic: optimisticId || optimisticId !== null,\n    });\n  }\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return this.addTypenameTransform.transformDocument(\n      this.addFragmentsToDocument(document)\n    );\n  }\n\n  public fragmentMatches(\n    fragment: InlineFragmentNode | FragmentDefinitionNode,\n    typename: string\n  ): boolean {\n    return this.policies.fragmentMatches(fragment, typename);\n  }\n\n  public lookupFragment(fragmentName: string): FragmentDefinitionNode | null {\n    return this.config.fragments?.lookup(fragmentName) || null;\n  }\n\n  protected broadcastWatches(options?: BroadcastOptions) {\n    if (!this.txCount) {\n      this.watches.forEach((c) => this.maybeBroadcastWatch(c, options));\n    }\n  }\n\n  private addFragmentsToDocument(document: DocumentNode) {\n    const { fragments } = this.config;\n    return fragments ? fragments.transform(document) : document;\n  }\n\n  // This method is wrapped by maybeBroadcastWatch, which is called by\n  // broadcastWatches, so that we compute and broadcast results only when\n  // the data that would be broadcast might have changed. It would be\n  // simpler to check for changes after recomputing a result but before\n  // broadcasting it, but this wrapping approach allows us to skip both\n  // the recomputation and the broadcast, in most cases.\n  private broadcastWatch(c: Cache.WatchOptions, options?: BroadcastOptions) {\n    const { lastDiff } = c;\n\n    // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n    // currently requires no additional properties, so we can use c (a\n    // WatchOptions object) as DiffOptions, without having to allocate a new\n    // object, and without having to enumerate the relevant properties (query,\n    // variables, etc.) explicitly. There will be some additional properties\n    // (lastDiff, callback, etc.), but cache.diff ignores them.\n    const diff = this.diff<any>(c);\n\n    if (options) {\n      if (c.optimistic && typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n\n      if (\n        options.onWatchUpdated &&\n        options.onWatchUpdated.call(this, c, diff, lastDiff) === false\n      ) {\n        // Returning false from the onWatchUpdated callback will prevent\n        // calling c.callback(diff) for this watcher.\n        return;\n      }\n    }\n\n    if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n      c.callback((c.lastDiff = diff), lastDiff);\n    }\n  }\n\n  /**\n   * @experimental\n   * @internal\n   * This is not a stable API - it is used in development builds to expose\n   * information to the DevTools.\n   * Use at your own risk!\n   */\n  public declare getMemoryInternals?: typeof getInMemoryCacheMemoryInternals;\n}\n\nif (__DEV__) {\n  InMemoryCache.prototype.getMemoryInternals = getInMemoryCacheMemoryInternals;\n}\n","import { brand, isBranded } from \"./utils.js\";\n\nexport declare namespace ServerParseError {\n  export interface Options {\n    response: Response;\n    bodyText: string;\n  }\n\n  namespace DocumentationTypes {\n    interface InstanceProperties {\n      /**\n       * The raw [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) object provided by the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n       */\n      readonly response: Response;\n      /**\n       * The status code returned by the server in the response. This is provided\n       * as a shortcut for `response.status`.\n       */\n      readonly statusCode: number;\n      /**\n       * The raw response body text.\n       */\n      readonly bodyText: string;\n    }\n  }\n}\n\n/**\n * Represents a failure to parse the response as JSON from the server. This\n * error helps debug issues where the server returns malformed JSON or non-JSON\n * content.\n *\n * @remarks\n *\n * This error occurs when Apollo Client receives a response from the server but\n * cannot parse it as valid JSON. This typically happens when the server returns\n * HTML error pages, plain text responses, or malformed JSON instead of the\n * expected GraphQL JSON response format.\n *\n * @example\n *\n * ```ts\n * import { ServerParseError } from \"@apollo/client/errors\";\n *\n * // Check if an error is a ServerParseError instance\n * if (ServerParseError.is(error)) {\n *   console.log(`Failed to parse response from ${error.response.url}`);\n *   console.log(`Raw response: ${error.bodyText}`);\n *   console.log(`Status code: ${error.statusCode}`);\n *\n *   // Access the original parse error\n *   console.log(`Parse error: ${error.cause}`);\n * }\n * ```\n */\nexport class ServerParseError extends Error {\n  /**\n   * A method that determines whether an error is a `ServerParseError`\n   * object. This method enables TypeScript to narrow the error type.\n   *\n   * @example\n   *\n   * ```ts\n   * if (ServerParseError.is(error)) {\n   *   // TypeScript now knows `error` is a ServerParseError object\n   *   console.log(error.statusCode);\n   * }\n   * ```\n   */\n  static is(error: unknown): error is ServerParseError {\n    return isBranded(error, \"ServerParseError\");\n  }\n  /** {@inheritDoc @apollo/client!ServerParseError.DocumentationTypes.InstanceProperties#response:member} */\n  readonly response: Response;\n\n  /** {@inheritDoc @apollo/client!ServerParseError.DocumentationTypes.InstanceProperties#statusCode:member} */\n  readonly statusCode: number;\n\n  /** {@inheritDoc @apollo/client!ServerParseError.DocumentationTypes.InstanceProperties#bodyText:member} */\n  readonly bodyText: string;\n\n  constructor(originalParseError: unknown, options: ServerParseError.Options) {\n    super(\n      originalParseError instanceof Error ?\n        originalParseError.message\n      : \"Could not parse server response\",\n      { cause: originalParseError }\n    );\n    this.name = \"ServerParseError\";\n    this.response = options.response;\n    this.statusCode = options.response.status;\n    this.bodyText = options.bodyText;\n\n    brand(this);\n    Object.setPrototypeOf(this, ServerParseError.prototype);\n  }\n}\n","import type { FieldNode } from \"graphql\";\n\nimport { getStoreKeyName } from \"./getStoreKeyName.js\";\nimport { valueToObjectRepresentation } from \"./valueToObjectRepresentation.js\";\n\n/** @internal */\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach((directive) => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables\n          )\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables)\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n","const { toString } = Object.prototype;\n\n/**\n * Deeply clones a value to create a new instance.\n *\n * @internal\n */\nexport function cloneDeep<T>(value: T): T {\n  return __cloneDeep(value);\n}\n\nfunction __cloneDeep<T>(val: T, seen?: Map<any, any>): T {\n  switch (toString.call(val)) {\n    case \"[object Array]\": {\n      seen = seen || new Map();\n      if (seen.has(val)) return seen.get(val);\n      const copy: T & any[] = (val as any).slice(0);\n      seen.set(val, copy);\n      copy.forEach(function (child, i) {\n        copy[i] = __cloneDeep(child, seen);\n      });\n      return copy;\n    }\n\n    case \"[object Object]\": {\n      seen = seen || new Map();\n      if (seen.has(val)) return seen.get(val);\n      // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n      // possible in all JS environments, so we will assume they exist/work.\n      const copy = Object.create(Object.getPrototypeOf(val));\n      seen.set(val, copy);\n      Object.keys(val as T & Record<string, any>).forEach((key) => {\n        copy[key] = __cloneDeep((val as any)[key], seen);\n      });\n      return copy;\n    }\n\n    default:\n      return val;\n  }\n}\n","import { StrongCache, WeakCache } from \"@wry/caches\";\n\ninterface CleanableCache {\n  size: number;\n  max?: number;\n  clean: () => void;\n}\nconst scheduledCleanup = new WeakSet<CleanableCache>();\nfunction schedule(cache: CleanableCache) {\n  if (cache.size <= (cache.max || -1)) {\n    return;\n  }\n  if (!scheduledCleanup.has(cache)) {\n    scheduledCleanup.add(cache);\n    setTimeout(() => {\n      cache.clean();\n      scheduledCleanup.delete(cache);\n    }, 100);\n  }\n}\n/**\n * @internal\n * A version of WeakCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of WeakCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `WeakCache`.\n */\nexport const AutoCleanedWeakCache = function (\n  max?: number | undefined,\n  dispose?: ((value: any, key: any) => void) | undefined\n) {\n  /*\n  Some builds of `WeakCache` are function prototypes, some are classes.\n  This library still builds with an ES5 target, so we can't extend the\n  real classes.\n  Instead, we have to use this workaround until we switch to a newer build\n  target.\n  */\n  const cache = new WeakCache(max, dispose);\n  cache.set = function (key: any, value: any) {\n    const ret = WeakCache.prototype.set.call(this, key, value);\n    schedule(this as any as CleanableCache);\n    return ret;\n  };\n  return cache;\n} as any as typeof WeakCache;\n/**\n * @internal\n */\nexport type AutoCleanedWeakCache<K extends object, V> = WeakCache<K, V>;\n\n/**\n * @internal\n * A version of StrongCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of StrongCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `StrongCache`.\n */\nexport const AutoCleanedStrongCache = function (\n  max?: number | undefined,\n  dispose?: ((value: any, key: any) => void) | undefined\n) {\n  /*\n  Some builds of `StrongCache` are function prototypes, some are classes.\n  This library still builds with an ES5 target, so we can't extend the\n  real classes.\n  Instead, we have to use this workaround until we switch to a newer build\n  target.\n  */\n  const cache = new StrongCache(max, dispose);\n  cache.set = function (key: any, value: any) {\n    const ret = StrongCache.prototype.set.call(this, key, value);\n    schedule(this as any as CleanableCache);\n    return ret;\n  };\n  return cache;\n} as any as typeof StrongCache;\n/**\n * @internal\n */\nexport type AutoCleanedStrongCache<K, V> = StrongCache<K, V>;\n","import type { ASTNode } from \"graphql\";\nimport { BREAK, visit } from \"graphql\";\n\n/** @internal */\nexport function hasDirectives(names: string[], root: ASTNode, all?: boolean) {\n  const nameSet = new Set(names);\n  const uniqueCount = nameSet.size;\n\n  visit(root, {\n    Directive(node) {\n      if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n        return BREAK;\n      }\n    },\n  });\n\n  // If we found all the names, nameSet will be empty. If we only care about\n  // finding some of them, the < condition is sufficient.\n  return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\n","import { equal } from \"@wry/equality\";\nimport type { FragmentDefinitionNode } from \"graphql\";\nimport { Kind } from \"graphql\";\n\nimport type {\n  ApolloCache,\n  DocumentNode,\n  TypedDocumentNode,\n} from \"@apollo/client\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport {\n  createFragmentMap,\n  getFragmentDefinitions,\n} from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport { maskDefinition } from \"./maskDefinition.js\";\n\n/** @internal */\nexport function maskFragment<TData = unknown>(\n  data: TData,\n  document: TypedDocumentNode<TData> | DocumentNode,\n  cache: ApolloCache,\n  fragmentName?: string\n): TData {\n  const fragments = document.definitions.filter(\n    (node): node is FragmentDefinitionNode =>\n      node.kind === Kind.FRAGMENT_DEFINITION\n  );\n\n  if (typeof fragmentName === \"undefined\") {\n    invariant(\n      fragments.length === 1,\n      `Found %s fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n      fragments.length\n    );\n    fragmentName = fragments[0].name.value;\n  }\n\n  const fragment = fragments.find(\n    (fragment) => fragment.name.value === fragmentName\n  );\n\n  invariant(\n    !!fragment,\n    `Could not find fragment with name \"%s\".`,\n    fragmentName\n  );\n\n  if (data == null) {\n    // Maintain the original `null` or `undefined` value\n    return data;\n  }\n\n  if (equal(data, {})) {\n    // Return early and skip the masking algorithm if we don't have any data\n    // yet. This can happen when cache.diff returns an empty object which is\n    // used from watchFragment.\n    return data;\n  }\n\n  return maskDefinition(data, fragment.selectionSet, {\n    operationType: \"fragment\",\n    operationName: fragment.name.value,\n    fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n    cache,\n    mutableTargets: new WeakMap(),\n    knownChanged: new WeakSet(),\n  });\n}\n","// Checks the document for errors and throws an exception if there is an error.\n\nimport { WeakCache } from \"@wry/caches\";\nimport type { ASTNode } from \"graphql\";\nimport type { DocumentNode, OperationTypeNode } from \"graphql\";\nimport { Kind, visit } from \"graphql\";\nimport { wrap } from \"optimism\";\n\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport {\n  invariant,\n  newInvariantError,\n} from \"@apollo/client/utilities/invariant\";\n\nimport { defaultCacheSizes } from \"../../utilities/caching/sizes.js\";\nimport { cacheSizes } from \"../caching/sizes.js\";\n\nimport { getOperationName } from \"./getOperationName.js\";\n\n/**\n * Checks the document for errors and throws an exception if there is an error.\n *\n * @internal\n */\nexport const checkDocument: (\n  doc: DocumentNode,\n  expectedType?: OperationTypeNode\n) => void = wrap(\n  (doc: DocumentNode, expectedType?: OperationTypeNode): void => {\n    invariant(\n      doc && doc.kind === \"Document\",\n      `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`\n    );\n    const operations = doc.definitions.filter(\n      (d) => d.kind === \"OperationDefinition\"\n    );\n    if (__DEV__) {\n      doc.definitions.forEach((definition) => {\n        if (\n          definition.kind !== \"OperationDefinition\" &&\n          definition.kind !== \"FragmentDefinition\"\n        ) {\n          throw newInvariantError(\n            `Schema type definitions not allowed in queries. Found: \"%s\"`,\n            definition.kind\n          );\n        }\n      });\n\n      invariant(\n        operations.length <= 1,\n        `Ambiguous GraphQL document: contains %s operations`,\n        operations.length\n      );\n    }\n\n    if (expectedType) {\n      invariant(\n        operations.length == 1 && operations[0].operation === expectedType,\n        `Running a %s requires a graphql ` + `%s, but a %s was used instead.`,\n        expectedType,\n        expectedType,\n        operations[0].operation\n      );\n    }\n\n    visit(doc, {\n      Field(field, _, __, path) {\n        if (\n          field.alias &&\n          (field.alias.value === \"__typename\" ||\n            field.alias.value.startsWith(\"__ac_\")) &&\n          field.alias.value !== field.name.value\n        ) {\n          // not using `invariant` so path calculation only happens in error case\n          let current: ASTNode = doc,\n            fieldPath: string[] = [];\n          for (const key of path) {\n            current = (current as any)[key];\n            if (current.kind === Kind.FIELD) {\n              fieldPath.push(current.alias?.value || current.name.value);\n            }\n          }\n          fieldPath.splice(-1, 1, field.name.value);\n\n          throw newInvariantError(\n            '`%s` is a forbidden field alias name in the selection set for field `%s` in %s \"%s\".',\n            field.alias.value,\n            fieldPath.join(\".\"),\n            operations[0].operation,\n            getOperationName(doc, \"(anonymous)\")\n          );\n        }\n      },\n    });\n  },\n  {\n    max: cacheSizes[\"checkDocument\"] || defaultCacheSizes[\"checkDocument\"],\n    cache: WeakCache,\n  }\n);\n","import type { DocumentNode, FieldNode } from \"graphql\";\n\nimport type {\n  AsStoreObject,\n  DeepPartial,\n  isReference,\n  Reference,\n  StoreObject,\n  StoreValue,\n} from \"@apollo/client/utilities\";\n\nimport type { StorageType } from \"../../inmemory/policies.js\";\n\n// The Readonly<T> type only really works for object types, since it marks\n// all of the object's properties as readonly, but there are many cases when\n// a generic type parameter like TExisting might be a string or some other\n// primitive type, in which case we need to avoid wrapping it with Readonly.\n// SafeReadonly<string> collapses to just string, which makes string\n// assignable to SafeReadonly<any>, whereas string is not assignable to\n// Readonly<any>, somewhat surprisingly.\nexport type SafeReadonly<T> = T extends object ? Readonly<T> : T;\n\nexport type MissingTree =\n  | string\n  | {\n      readonly [key: string]: MissingTree;\n    };\n\nexport class MissingFieldError extends Error {\n  constructor(\n    public readonly message: string,\n    public readonly path: MissingTree | Array<string | number>,\n    public readonly query: DocumentNode,\n    public readonly variables?: Record<string, any>\n  ) {\n    // 'Error' breaks prototype chain here\n    super(message);\n    this.name = \"MissingFieldError\";\n\n    if (Array.isArray(this.path)) {\n      this.missing = this.message;\n      for (let i = this.path.length - 1; i >= 0; --i) {\n        this.missing = { [this.path[i]]: this.missing };\n      }\n    } else {\n      this.missing = this.path;\n    }\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully supported\n    // on Android (see issue #3236).\n    (this as any).__proto__ = MissingFieldError.prototype;\n  }\n\n  public readonly missing: MissingTree;\n}\n\nexport interface FieldSpecifier {\n  typename?: string;\n  fieldName: string;\n  field?: FieldNode;\n  args?: Record<string, any>;\n  variables?: Record<string, any>;\n}\n\nexport interface ReadFieldOptions extends FieldSpecifier {\n  from?: StoreObject | Reference;\n}\n\nexport interface ReadFieldFunction {\n  <V = StoreValue>(options: ReadFieldOptions): SafeReadonly<V> | undefined;\n  <V = StoreValue>(\n    fieldName: string,\n    from?: StoreObject | Reference\n  ): SafeReadonly<V> | undefined;\n}\n\nexport type ToReferenceFunction = (\n  objOrIdOrRef: StoreObject | string | Reference,\n  mergeIntoStore?: boolean\n) => Reference | undefined;\n\nexport type CanReadFunction = (value: StoreValue) => boolean;\n\ndeclare const _deleteModifier: unique symbol;\nexport interface DeleteModifier {\n  [_deleteModifier]: true;\n}\ndeclare const _invalidateModifier: unique symbol;\nexport interface InvalidateModifier {\n  [_invalidateModifier]: true;\n}\ndeclare const _ignoreModifier: unique symbol;\nexport interface IgnoreModifier {\n  [_ignoreModifier]: true;\n}\n\nexport type ModifierDetails = {\n  DELETE: DeleteModifier;\n  INVALIDATE: InvalidateModifier;\n  fieldName: string;\n  storeFieldName: string;\n  readField: ReadFieldFunction;\n  canRead: CanReadFunction;\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n  storage: StorageType;\n};\n\nexport type Modifier<T> = (\n  value: T,\n  details: ModifierDetails\n) => DeepPartial<T> | DeleteModifier | InvalidateModifier | undefined;\n\ntype StoreObjectValueMaybeReference<StoreVal> =\n  StoreVal extends Array<Record<string, any>> ?\n    StoreVal extends Array<infer Item> ?\n      [Item] extends [Record<string, any>] ?\n        ReadonlyArray<AsStoreObject<Item> | Reference>\n      : never\n    : never\n  : StoreVal extends Record<string, any> ? AsStoreObject<StoreVal> | Reference\n  : StoreVal;\n\nexport type AllFieldsModifier<Entity extends Record<string, any>> = Modifier<\n  Entity[keyof Entity] extends infer Value ?\n    StoreObjectValueMaybeReference<Exclude<Value, undefined>>\n  : never\n>;\n\nexport type Modifiers<T extends Record<string, any> = Record<string, unknown>> =\n  Partial<{\n    [FieldName in keyof T]: Modifier<\n      StoreObjectValueMaybeReference<Exclude<T[FieldName], undefined>>\n    >;\n  }>;\n","import type {\n  ApolloCache,\n  DocumentNode,\n  TypedDocumentNode,\n} from \"@apollo/client\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport {\n  createFragmentMap,\n  getFragmentDefinitions,\n  getOperationDefinition,\n} from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport { maskDefinition } from \"./maskDefinition.js\";\n\n/** @internal */\nexport function maskOperation<TData = unknown>(\n  data: TData,\n  document: DocumentNode | TypedDocumentNode<TData>,\n  cache: ApolloCache\n): TData {\n  const definition = getOperationDefinition(document);\n\n  invariant(\n    definition,\n    \"Expected a parsed GraphQL document with a query, mutation, or subscription.\"\n  );\n\n  if (data == null) {\n    // Maintain the original `null` or `undefined` value\n    return data;\n  }\n\n  return maskDefinition(data, definition.selectionSet, {\n    operationType: definition.operation,\n    operationName: definition.name?.value,\n    fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n    cache,\n    mutableTargets: new WeakMap(),\n    knownChanged: new WeakSet(),\n  });\n}\n","import { makeUniqueId } from \"./makeUniqueId.js\";\n\n/** @internal */\nexport function stringifyForDisplay(value: any, space = 0): string {\n  const undefId = makeUniqueId(\"stringifyForDisplay\");\n  return JSON.stringify(\n    value,\n    (_, value) => {\n      return value === void 0 ? undefId : value;\n    },\n    space\n  )\n    .split(JSON.stringify(undefId))\n    .join(\"<undefined>\");\n}\n","import type { FragmentDefinitionNode, SelectionSetNode } from \"graphql\";\nimport { Kind } from \"graphql\";\n\nimport type { ApolloCache } from \"@apollo/client/cache\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport type { FragmentMap } from \"@apollo/client/utilities/internal\";\nimport {\n  maybeDeepFreeze,\n  resultKeyNameFromField,\n} from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport { disableWarningsSlot, getFragmentMaskMode } from \"./utils.js\";\n\ninterface MaskingContext {\n  operationType: \"query\" | \"mutation\" | \"subscription\" | \"fragment\";\n  operationName: string | undefined;\n  fragmentMap: FragmentMap;\n  cache: ApolloCache;\n  mutableTargets: WeakMap<any, any>;\n  knownChanged: WeakSet<any>;\n}\n\nexport function maskDefinition(\n  data: Record<string, any>,\n  selectionSet: SelectionSetNode,\n  context: MaskingContext\n) {\n  return disableWarningsSlot.withValue(true, () => {\n    const masked = maskSelectionSet(data, selectionSet, context, false);\n\n    if (Object.isFrozen(data)) {\n      maybeDeepFreeze(masked);\n    }\n    return masked;\n  });\n}\n\nfunction getMutableTarget(\n  data: Record<string, any>,\n  mutableTargets: WeakMap<any, any>\n): typeof data {\n  if (mutableTargets.has(data)) {\n    return mutableTargets.get(data);\n  }\n\n  const mutableTarget = Array.isArray(data) ? [] : {};\n  mutableTargets.set(data, mutableTarget);\n  return mutableTarget;\n}\n\nfunction maskSelectionSet(\n  data: any,\n  selectionSet: SelectionSetNode,\n  context: MaskingContext,\n  migration: boolean,\n  path?: string | undefined\n): typeof data {\n  const { knownChanged } = context;\n  const memo = getMutableTarget(data, context.mutableTargets);\n\n  if (Array.isArray(data)) {\n    for (const [index, item] of Array.from(data.entries())) {\n      if (item === null) {\n        memo[index] = null;\n        continue;\n      }\n\n      const masked = maskSelectionSet(\n        item,\n        selectionSet,\n        context,\n        migration,\n        __DEV__ ? `${path || \"\"}[${index}]` : void 0\n      );\n      if (knownChanged.has(masked)) {\n        knownChanged.add(memo);\n      }\n\n      memo[index] = masked;\n    }\n\n    return knownChanged.has(memo) ? memo : data;\n  }\n\n  for (const selection of selectionSet.selections) {\n    let value: any;\n\n    // we later want to add acessor warnings to the final result\n    // so we need a new object to add the accessor warning to\n    if (migration) {\n      knownChanged.add(memo);\n    }\n\n    if (selection.kind === Kind.FIELD) {\n      const keyName = resultKeyNameFromField(selection);\n      const childSelectionSet = selection.selectionSet;\n\n      value = memo[keyName] || data[keyName];\n\n      if (value === void 0) {\n        continue;\n      }\n\n      if (childSelectionSet && value !== null) {\n        const masked = maskSelectionSet(\n          data[keyName],\n          childSelectionSet,\n          context,\n          migration,\n          __DEV__ ? `${path || \"\"}.${keyName}` : void 0\n        );\n\n        if (knownChanged.has(masked)) {\n          value = masked;\n        }\n      }\n\n      if (!__DEV__) {\n        memo[keyName] = value;\n      }\n      if (__DEV__) {\n        if (\n          migration &&\n          keyName !== \"__typename\" &&\n          // either the field is not present in the memo object\n          // or it has a `get` descriptor, not a `value` descriptor\n          // => it is a warning accessor and we can overwrite it\n          // with another accessor\n          !Object.getOwnPropertyDescriptor(memo, keyName)?.value\n        ) {\n          Object.defineProperty(\n            memo,\n            keyName,\n            getAccessorWarningDescriptor(\n              keyName,\n              value,\n              path || \"\",\n              context.operationName,\n              context.operationType\n            )\n          );\n        } else {\n          delete memo[keyName];\n          memo[keyName] = value;\n        }\n      }\n    }\n\n    if (\n      selection.kind === Kind.INLINE_FRAGMENT &&\n      (!selection.typeCondition ||\n        context.cache.fragmentMatches(selection, data.__typename))\n    ) {\n      value = maskSelectionSet(\n        data,\n        selection.selectionSet,\n        context,\n        migration,\n        path\n      );\n    }\n\n    if (selection.kind === Kind.FRAGMENT_SPREAD) {\n      const fragmentName = selection.name.value;\n      const fragment: FragmentDefinitionNode | null =\n        context.fragmentMap[fragmentName] ||\n        (context.fragmentMap[fragmentName] =\n          context.cache.lookupFragment(fragmentName)!);\n      invariant(\n        fragment,\n        \"Could not find fragment with name '%s'.\",\n        fragmentName\n      );\n\n      const mode = getFragmentMaskMode(selection);\n\n      if (mode !== \"mask\") {\n        value = maskSelectionSet(\n          data,\n          fragment.selectionSet,\n          context,\n          mode === \"migrate\",\n          path\n        );\n      }\n    }\n\n    if (knownChanged.has(value)) {\n      knownChanged.add(memo);\n    }\n  }\n\n  if (\"__typename\" in data && !(\"__typename\" in memo)) {\n    memo.__typename = data.__typename;\n  }\n\n  // This check prevents cases where masked fields may accidentally be\n  // returned as part of this object when the fragment also selects\n  // additional fields from the same child selection.\n  if (Object.keys(memo).length !== Object.keys(data).length) {\n    knownChanged.add(memo);\n  }\n\n  return knownChanged.has(memo) ? memo : data;\n}\n\nfunction getAccessorWarningDescriptor(\n  fieldName: string,\n  value: any,\n  path: string,\n  operationName: string | undefined,\n  operationType: string\n): PropertyDescriptor {\n  let getValue = () => {\n    if (disableWarningsSlot.getValue()) {\n      return value;\n    }\n\n    invariant.warn(\n      \"Accessing unmasked field on %s at path '%s'. This field will not be available when masking is enabled. Please read the field from the fragment instead.\",\n      operationName ?\n        `${operationType} '${operationName}'`\n      : `anonymous ${operationType}`,\n      `${path}.${fieldName}`.replace(/^\\./, \"\")\n    );\n\n    getValue = () => value;\n\n    return value;\n  };\n\n  return {\n    get() {\n      return getValue();\n    },\n    set(newValue) {\n      getValue = () => newValue;\n    },\n    enumerable: true,\n    configurable: true,\n  };\n}\n","import { WeakCache } from \"@wry/caches\";\nimport type {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n} from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { Observable } from \"rxjs\";\n\nimport type {\n  GetDataState,\n  OperationVariables,\n  TypedDocumentNode,\n} from \"@apollo/client\";\nimport type { FragmentType, Unmasked } from \"@apollo/client/masking\";\nimport type { Reference, StoreObject } from \"@apollo/client/utilities\";\nimport { cacheSizes } from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport type { NoInfer } from \"@apollo/client/utilities/internal\";\nimport {\n  equalByQuery,\n  getApolloCacheMemoryInternals,\n  getFragmentDefinition,\n  getFragmentQueryDocument,\n} from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport { defaultCacheSizes } from \"../../utilities/caching/sizes.js\";\n\nimport type { Cache } from \"./types/Cache.js\";\nimport type { MissingTree } from \"./types/common.js\";\n\nexport type Transaction = (c: ApolloCache) => void;\n\nexport declare namespace ApolloCache {\n  /**\n   * Watched fragment options.\n   */\n  export interface WatchFragmentOptions<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  > {\n    /**\n     * A GraphQL fragment document parsed into an AST with the `gql`\n     * template literal.\n     *\n     * @docGroup 1. Required options\n     */\n    fragment: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    /**\n     * An object containing a `__typename` and primary key fields\n     * (such as `id`) identifying the entity object from which the fragment will\n     * be retrieved, or a `{ __ref: \"...\" }` reference, or a `string` ID\n     * (uncommon).\n     *\n     * @docGroup 1. Required options\n     */\n    from: StoreObject | Reference | FragmentType<NoInfer<TData>> | string;\n    /**\n     * Any variables that the GraphQL fragment may depend on.\n     *\n     * @docGroup 2. Cache options\n     */\n    variables?: TVariables;\n    /**\n     * The name of the fragment defined in the fragment document.\n     *\n     * Required if the fragment document includes more than one fragment,\n     * optional otherwise.\n     *\n     * @docGroup 2. Cache options\n     */\n    fragmentName?: string;\n    /**\n     * If `true`, `watchFragment` returns optimistic results.\n     *\n     * The default value is `true`.\n     *\n     * @docGroup 2. Cache options\n     */\n    optimistic?: boolean;\n  }\n\n  /**\n   * Watched fragment results.\n   */\n  export type WatchFragmentResult<TData = unknown> =\n    | ({\n        complete: true;\n        missing?: never;\n      } & GetDataState<TData, \"complete\">)\n    | ({\n        complete: false;\n        missing: MissingTree;\n      } & GetDataState<TData, \"partial\">);\n}\n\nexport abstract class ApolloCache {\n  public readonly assumeImmutableResults: boolean = false;\n\n  // required to implement\n  // core API\n  public abstract read<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(query: Cache.ReadOptions<TData, TVariables>): Unmasked<TData> | null;\n  public abstract write<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(write: Cache.WriteOptions<TData, TVariables>): Reference | undefined;\n\n  /**\n   * Returns data read from the cache for a given query along with information\n   * about the cache result such as whether the result is complete and details\n   * about missing fields.\n   *\n   * Will return `complete` as `true` if it can fulfill the full cache result or\n   * `false` if not. When no data can be fulfilled from the cache, `null` is\n   * returned. When `returnPartialData` is `true`, non-null partial results are\n   * returned if it contains at least one field that can be fulfilled from the\n   * cache.\n   */\n  public abstract diff<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(query: Cache.DiffOptions<TData, TVariables>): Cache.DiffResult<TData>;\n  public abstract watch<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(watch: Cache.WatchOptions<TData, TVariables>): () => void;\n\n  // Empty the cache and restart all current watches (unless\n  // options.discardWatches is true).\n  public abstract reset(options?: Cache.ResetOptions): Promise<void>;\n\n  // Remove whole objects from the cache by passing just options.id, or\n  // specific fields by passing options.field and/or options.args. If no\n  // options.args are provided, all fields matching options.field (even\n  // those with arguments) will be removed. Returns true iff any data was\n  // removed from the cache.\n  public abstract evict(options: Cache.EvictOptions): boolean;\n\n  // initializer / offline / ssr API\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public abstract restore(serializedState: unknown): this;\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public abstract extract(optimistic?: boolean): unknown;\n\n  // Optimistic API\n\n  public abstract removeOptimistic(id: string): void;\n\n  // Used by data masking to determine if an inline fragment with a type\n  // condition matches a given typename. Also used by local resolvers to match a\n  // fragment against a typename.\n  //\n  // If not implemented by a cache subclass, data masking will effectively be\n  // disabled since we will not be able to accurately determine if a given type\n  // condition for a union or interface matches a particular type.\n  public abstract fragmentMatches(\n    fragment: InlineFragmentNode | FragmentDefinitionNode,\n    typename: string\n  ): boolean;\n\n  // Function used to lookup a fragment when a fragment definition is not part\n  // of the GraphQL document. This is useful for caches, such as InMemoryCache,\n  // that register fragments ahead of time so they can be referenced by name.\n  public lookupFragment(fragmentName: string): FragmentDefinitionNode | null {\n    return null;\n  }\n\n  // Transactional API\n\n  // The batch method is intended to replace/subsume both performTransaction\n  // and recordOptimisticTransaction, but performTransaction came first, so we\n  // provide a default batch implementation that's just another way of calling\n  // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n  // override the batch method to do more interesting things with its options.\n  public batch<U>(options: Cache.BatchOptions<this, U>): U {\n    const optimisticId =\n      typeof options.optimistic === \"string\" ? options.optimistic\n      : options.optimistic === false ? null\n      : void 0;\n    let updateResult: U;\n    this.performTransaction(\n      () => (updateResult = options.update(this)),\n      optimisticId\n    );\n    return updateResult!;\n  }\n\n  public abstract performTransaction(\n    transaction: Transaction,\n    // Although subclasses may implement recordOptimisticTransaction\n    // however they choose, the default implementation simply calls\n    // performTransaction with a string as the second argument, allowing\n    // performTransaction to handle both optimistic and non-optimistic\n    // (broadcast-batching) transactions. Passing null for optimisticId is\n    // also allowed, and indicates that performTransaction should apply\n    // the transaction non-optimistically (ignoring optimistic data).\n    optimisticId?: string | null\n  ): void;\n\n  public recordOptimisticTransaction(\n    transaction: Transaction,\n    optimisticId: string\n  ) {\n    this.performTransaction(transaction, optimisticId);\n  }\n\n  // Optional API\n\n  // Called once per input document, allowing the cache to make static changes\n  // to the query, such as adding __typename fields.\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  // Called before each ApolloLink request, allowing the cache to make dynamic\n  // changes to the query, such as filling in missing fragment definitions.\n  public transformForLink(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  public identify(object: StoreObject | Reference): string | undefined {\n    return;\n  }\n\n  public gc(): string[] {\n    return [];\n  }\n\n  public modify<Entity extends Record<string, any> = Record<string, any>>(\n    options: Cache.ModifyOptions<Entity>\n  ): boolean {\n    return false;\n  }\n\n  /**\n   * Read data from the cache for the specified query.\n   */\n  public readQuery<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >({\n    // spread in type definitions for discoverability in the docs\n    query,\n    variables,\n    id,\n    optimistic,\n    returnPartialData,\n  }: Cache.ReadQueryOptions<TData, TVariables>): Unmasked<TData> | null;\n  /**\n   * {@inheritDoc @apollo/client!ApolloCache#readQuery:member(1)}\n   */\n  public readQuery<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: Cache.ReadQueryOptions<TData, TVariables>,\n    /**\n     * @deprecated Pass the `optimistic` argument as part of the first argument\n     * instead of passing it as a separate option.\n     */\n    optimistic: boolean\n  ): Unmasked<TData> | null;\n  public readQuery<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: Cache.ReadQueryOptions<TData, TVariables>,\n    optimistic = !!options.optimistic\n  ): Unmasked<TData> | null {\n    return this.read({\n      ...options,\n      rootId: options.id || \"ROOT_QUERY\",\n      optimistic,\n    });\n  }\n\n  /** {@inheritDoc @apollo/client!ApolloClient#watchFragment:member(1)} */\n  public watchFragment<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: ApolloCache.WatchFragmentOptions<TData, TVariables>\n  ): Observable<ApolloCache.WatchFragmentResult<Unmasked<TData>>> {\n    const {\n      fragment,\n      fragmentName,\n      from,\n      optimistic = true,\n      ...otherOptions\n    } = options;\n    const query = this.getFragmentDoc(fragment, fragmentName);\n    // While our TypeScript types do not allow for `undefined` as a valid\n    // `from`, its possible `useFragment` gives us an `undefined` since it\n    // calls` cache.identify` and provides that value to `from`. We are\n    // adding this fix here however to ensure those using plain JavaScript\n    // and using `cache.identify` themselves will avoid seeing the obscure\n    // warning.\n    const id =\n      typeof from === \"undefined\" || typeof from === \"string\" ?\n        from\n      : this.identify(from);\n\n    if (__DEV__) {\n      const actualFragmentName =\n        fragmentName || getFragmentDefinition(fragment).name.value;\n\n      if (!id) {\n        invariant.warn(\n          \"Could not identify object passed to `from` for '%s' fragment, either because the object is non-normalized or the key fields are missing. If you are masking this object, please ensure the key fields are requested by the parent object.\",\n          actualFragmentName\n        );\n      }\n    }\n\n    const diffOptions: Cache.DiffOptions<TData, TVariables> = {\n      ...otherOptions,\n      returnPartialData: true,\n      id,\n      query,\n      optimistic,\n    };\n\n    let latestDiff: Cache.DiffResult<TData> | undefined;\n\n    return new Observable((observer) => {\n      return this.watch<TData, TVariables>({\n        ...diffOptions,\n        immediate: true,\n        callback: (diff) => {\n          let data = diff.result;\n\n          // TODO: Remove this once `watchFragment` supports `null` as valid\n          // value emitted\n          if (data === null) {\n            data = {} as any;\n          }\n\n          if (\n            // Always ensure we deliver the first result\n            latestDiff &&\n            equalByQuery(\n              query,\n              { data: latestDiff.result },\n              { data },\n              options.variables\n            )\n          ) {\n            return;\n          }\n\n          const result = {\n            data,\n            dataState: diff.complete ? \"complete\" : \"partial\",\n            complete: !!diff.complete,\n          } as ApolloCache.WatchFragmentResult<Unmasked<TData>>;\n\n          if (diff.missing) {\n            result.missing = diff.missing.missing;\n          }\n\n          latestDiff = { ...diff, result: data } as Cache.DiffResult<TData>;\n          observer.next(result);\n        },\n      });\n    });\n  }\n\n  // Make sure we compute the same (===) fragment query document every\n  // time we receive the same fragment in readFragment.\n  private getFragmentDoc = wrap(getFragmentQueryDocument, {\n    max:\n      cacheSizes[\"cache.fragmentQueryDocuments\"] ||\n      defaultCacheSizes[\"cache.fragmentQueryDocuments\"],\n    cache: WeakCache,\n  });\n\n  /**\n   * Read data from the cache for the specified fragment.\n   */\n  public readFragment<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >({\n    // spread in type definitions for discoverability in the docs\n    fragment,\n    variables,\n    fragmentName,\n    id,\n    optimistic,\n    returnPartialData,\n  }: Cache.ReadFragmentOptions<TData, TVariables>): Unmasked<TData> | null;\n  public readFragment<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: Cache.ReadFragmentOptions<TData, TVariables>,\n    /**\n     * @deprecated Pass the `optimistic` argument as part of the first argument\n     * instead of passing it as a separate option.\n     */\n    optimistic: boolean\n  ): Unmasked<TData> | null;\n  public readFragment<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: Cache.ReadFragmentOptions<TData, TVariables>,\n    optimistic = !!options.optimistic\n  ): Unmasked<TData> | null {\n    return this.read({\n      ...options,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic,\n    });\n  }\n\n  /**\n   * Writes data to the root of the cache using the specified query to validate that\n   * the shape of the data you’re writing to the cache is the same as the shape of\n   * the data required by the query. Great for prepping the cache with initial data.\n   */\n  public writeQuery<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >({\n    // spread in type definitions for discoverability in the docs\n    data,\n    query,\n    variables,\n    overwrite,\n    id,\n    broadcast,\n  }: Cache.WriteQueryOptions<TData, TVariables>): Reference | undefined;\n  public writeQuery<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >({\n    id,\n    data,\n    ...options\n  }: Cache.WriteQueryOptions<TData, TVariables>): Reference | undefined {\n    return this.write(\n      Object.assign(options, {\n        dataId: id || \"ROOT_QUERY\",\n        result: data,\n      })\n    );\n  }\n\n  /**\n   * Similar to `writeQuery` (writes data to the cache) but uses the specified\n   * fragment to validate that the shape of the data you’re writing to the cache\n   * is the same as the shape of the data required by the fragment.\n   */\n  public writeFragment<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >({\n    // spread in type definitions for discoverability in the docs\n    data,\n    fragment,\n    fragmentName,\n    variables,\n    overwrite,\n    id,\n    broadcast,\n  }: Cache.WriteFragmentOptions<TData, TVariables>): Reference | undefined;\n  public writeFragment<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >({\n    id,\n    data,\n    fragment,\n    fragmentName,\n    ...options\n  }: Cache.WriteFragmentOptions<TData, TVariables>): Reference | undefined {\n    return this.write(\n      Object.assign(options, {\n        query: this.getFragmentDoc(fragment, fragmentName),\n        dataId: id,\n        result: data,\n      })\n    );\n  }\n\n  public updateQuery<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: Cache.UpdateQueryOptions<TData, TVariables>,\n    update: (data: Unmasked<TData> | null) => Unmasked<TData> | null | void\n  ): Unmasked<TData> | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readQuery<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeQuery<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n\n  public updateFragment<\n    TData = unknown,\n    TVariables extends OperationVariables = OperationVariables,\n  >(\n    options: Cache.UpdateFragmentOptions<TData, TVariables>,\n    update: (data: Unmasked<TData> | null) => Unmasked<TData> | null | void\n  ): Unmasked<TData> | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readFragment<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeFragment<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n\n  /**\n   * @experimental\n   * @internal\n   * This is not a stable API - it is used in development builds to expose\n   * information to the DevTools.\n   * Use at your own risk!\n   */\n  public declare getMemoryInternals?: typeof getApolloCacheMemoryInternals;\n}\n\nif (__DEV__) {\n  ApolloCache.prototype.getMemoryInternals = getApolloCacheMemoryInternals;\n}\n","import {\n  CombinedProtocolErrors,\n  PROTOCOL_ERRORS_SYMBOL,\n  ServerError,\n  ServerParseError,\n} from \"@apollo/client/errors\";\nimport type { ApolloLink, ApolloPayloadResult } from \"@apollo/client/link\";\nimport { isNonNullObject } from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nconst { hasOwnProperty } = Object.prototype;\n\n/**\n * This function detects an Apollo payload result before it is transformed\n * into a FetchResult via HttpLink; it cannot detect an ApolloPayloadResult\n * once it leaves the link chain.\n */\nfunction isApolloPayloadResult(value: unknown): value is ApolloPayloadResult {\n  return isNonNullObject(value) && \"payload\" in value;\n}\n\nasync function* consumeMultipartBody(\n  response: Response\n): AsyncGenerator<string, void, void> {\n  const decoder = new TextDecoder(\"utf-8\");\n  const contentType = response.headers?.get(\"content-type\");\n\n  // parse boundary value and ignore any subsequent name/value pairs after ;\n  // https://www.rfc-editor.org/rfc/rfc9110.html#name-parameters\n  // e.g. multipart/mixed;boundary=\"graphql\";deferSpec=20220824\n  // if no boundary is specified, default to -\n  const match = contentType?.match(\n    /*\n      ;\\s*boundary=                # Match the boundary parameter\n      (?:                          # either\n        '([^']*)'                  # a string starting with ' doesn't contain ', ends with '\n        |                          # or\n        \"([^\"]*)\"                  # a string starting with \" doesn't contain \", ends with \"\n        |                          # or\n        ([^\"'].*?)                 # a string that doesn't start with ' or \", parsed non-greedily\n        )                          # end of the group\n      \\s*                          # optional whitespace\n      (?:;|$)                        # match a semicolon or end of string\n    */\n    /;\\s*boundary=(?:'([^']+)'|\"([^\"]+)\"|([^\"'].+?))\\s*(?:;|$)/i\n  );\n  const boundary = \"\\r\\n--\" + (match?.findLast((val) => !!val) || \"-\");\n  let buffer = \"\";\n  invariant(\n    response.body && typeof response.body.getReader === \"function\",\n    \"Unknown type for `response.body`. Please use a `fetch` implementation that is WhatWG-compliant and that uses WhatWG ReadableStreams for `body`.\"\n  );\n\n  const stream = response.body;\n  const reader = stream.getReader();\n  let done = false;\n  let encounteredBoundary = false;\n  let value: Uint8Array<ArrayBufferLike> | string | undefined;\n\n  // check to see if we received the final boundary, which is a normal boundary followed by \"--\"\n  // as described in https://www.rfc-editor.org/rfc/rfc2046#section-5.1.1\n  const passedFinalBoundary = () =>\n    encounteredBoundary && buffer[0] == \"-\" && buffer[1] == \"-\";\n\n  try {\n    while (!done) {\n      ({ value, done } = await reader.read());\n      const chunk = typeof value === \"string\" ? value : decoder.decode(value);\n      const searchFrom = buffer.length - boundary.length + 1;\n      buffer += chunk;\n      let bi = buffer.indexOf(boundary, searchFrom);\n      while (bi > -1 && !passedFinalBoundary()) {\n        encounteredBoundary = true;\n        let message: string;\n        [message, buffer] = [\n          buffer.slice(0, bi),\n          buffer.slice(bi + boundary.length),\n        ];\n        const i = message.indexOf(\"\\r\\n\\r\\n\");\n        const headers = parseHeaders(message.slice(0, i));\n        const contentType = headers[\"content-type\"];\n        if (\n          contentType &&\n          contentType.toLowerCase().indexOf(\"application/json\") === -1\n        ) {\n          throw new Error(\n            \"Unsupported patch content type: application/json is required.\"\n          );\n        }\n        // nb: Technically you'd want to slice off the beginning \"\\r\\n\" but since\n        // this is going to be `JSON.parse`d there is no need.\n        const body = message.slice(i);\n\n        if (body) {\n          yield body;\n        }\n        bi = buffer.indexOf(boundary);\n      }\n      if (passedFinalBoundary()) {\n        return;\n      }\n    }\n    throw new Error(\"premature end of multipart body\");\n  } finally {\n    reader.cancel();\n  }\n}\n\nexport async function readMultipartBody<\n  T extends object = Record<string, unknown>,\n>(response: Response, nextValue: (value: T) => void) {\n  for await (const body of consumeMultipartBody(response)) {\n    const result = parseJsonEncoding(response, body);\n    if (Object.keys(result).length == 0) continue;\n    if (isApolloPayloadResult(result)) {\n      if (Object.keys(result).length === 1 && result.payload === null) {\n        return;\n      }\n      let next = { ...result.payload };\n      if (\"errors\" in result) {\n        next.extensions = {\n          ...next.extensions,\n          [PROTOCOL_ERRORS_SYMBOL]: new CombinedProtocolErrors(\n            result.errors ?? []\n          ),\n        };\n      }\n      nextValue(next as T);\n    } else {\n      nextValue(result);\n    }\n  }\n}\n\nfunction parseHeaders(headerText: string): Record<string, string> {\n  const headersInit: Record<string, string> = {};\n  headerText.split(\"\\n\").forEach((line) => {\n    const i = line.indexOf(\":\");\n    if (i > -1) {\n      // normalize headers to lowercase\n      const name = line.slice(0, i).trim().toLowerCase();\n      const value = line.slice(i + 1).trim();\n      headersInit[name] = value;\n    }\n  });\n  return headersInit;\n}\n\nfunction parseJsonEncoding(response: Response, bodyText: string) {\n  if (response.status >= 300) {\n    throw new ServerError(\n      `Response not successful: Received status code ${response.status}`,\n      { response, bodyText }\n    );\n  }\n\n  try {\n    return JSON.parse(bodyText);\n  } catch (err) {\n    throw new ServerParseError(err, { response, bodyText });\n  }\n}\n\nfunction parseGraphQLResponseJsonEncoding(\n  response: Response,\n  bodyText: string\n) {\n  try {\n    return JSON.parse(bodyText);\n  } catch (err) {\n    throw new ServerParseError(err, { response, bodyText });\n  }\n}\n\nfunction parseResponse(response: Response, bodyText: string) {\n  const contentType = response.headers.get(\"content-type\");\n\n  if (contentType?.includes(\"application/graphql-response+json\")) {\n    return parseGraphQLResponseJsonEncoding(response, bodyText);\n  }\n\n  return parseJsonEncoding(response, bodyText);\n}\n\nexport function parseAndCheckHttpResponse(\n  operations: ApolloLink.Operation | ApolloLink.Operation[]\n) {\n  return (response: Response) =>\n    response.text().then((bodyText) => {\n      const result = parseResponse(response, bodyText);\n\n      if (\n        !Array.isArray(result) &&\n        !hasOwnProperty.call(result, \"data\") &&\n        !hasOwnProperty.call(result, \"errors\")\n      ) {\n        throw new ServerError(\n          `Server response was malformed for query '${\n            Array.isArray(operations) ?\n              operations.map((op) => op.operationName)\n            : operations.operationName\n          }'.`,\n          { response, bodyText }\n        );\n      }\n      return result;\n    });\n}\n","import type {\n  ArgumentNode,\n  BooleanValueNode,\n  DirectiveNode,\n  SelectionNode,\n  ValueNode,\n  VariableNode,\n} from \"graphql\";\n\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\n/** @internal */\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(directives).every(\n    ({ directive, ifArgument }) => {\n      let evaledValue: boolean = false;\n      if (ifArgument.value.kind === \"Variable\") {\n        evaledValue =\n          variables && variables[(ifArgument.value as VariableNode).name.value];\n        invariant(\n          evaledValue !== void 0,\n          `Invalid variable referenced in @%s directive.`,\n          directive.name.value\n        );\n      } else {\n        evaledValue = (ifArgument.value as BooleanValueNode).value;\n      }\n      return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    }\n  );\n}\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === \"skip\" || value === \"include\";\n}\n\ntype InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach((directive) => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @%s directive.`,\n        directiveName\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === \"if\",\n        `Invalid argument for the @%s directive.`,\n        directiveName\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"),\n        `Argument for the @%s directive must be a variable or a boolean value.`,\n        directiveName\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n","import {\n  argumentsObjectFromField,\n  DeepMerger,\n  isArray,\n  isNonEmptyArray,\n  isNonNullObject,\n} from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport { hasOwn } from \"./helpers.js\";\nimport type {\n  KeyArgsFunction,\n  KeyFieldsFunction,\n  KeySpecifier,\n} from \"./policies.js\";\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nconst specifierInfoCache: Record<\n  string,\n  {\n    paths?: string[][];\n    keyFieldsFn?: KeyFieldsFunction;\n    keyArgsFn?: KeyArgsFunction;\n  }\n> = {};\n\nfunction lookupSpecifierInfo(spec: KeySpecifier) {\n  // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n  // just arrays of strings or nested KeySpecifier arrays, and the order of the\n  // array elements is important (and suitably preserved by JSON.stringify).\n  const cacheKey = JSON.stringify(spec);\n  return specifierInfoCache[cacheKey] || (specifierInfoCache[cacheKey] = {});\n}\n\nexport function keyFieldsFnFromSpecifier(\n  specifier: KeySpecifier\n): KeyFieldsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return (\n    info.keyFieldsFn ||\n    (info.keyFieldsFn = (object, context) => {\n      const extract: typeof extractKey = (from, key) =>\n        context.readField(key, from);\n\n      const keyObject = (context.keyObject = collectSpecifierPaths(\n        specifier,\n        (schemaKeyPath) => {\n          let extracted = extractKeyPath(\n            context.storeObject,\n            schemaKeyPath,\n            // Using context.readField to extract paths from context.storeObject\n            // allows the extraction to see through Reference objects and respect\n            // custom read functions.\n            extract\n          );\n\n          if (\n            extracted === void 0 &&\n            object !== context.storeObject &&\n            hasOwn.call(object, schemaKeyPath[0])\n          ) {\n            // If context.storeObject fails to provide a value for the requested\n            // path, fall back to the raw result object, if it has a top-level key\n            // matching the first key in the path (schemaKeyPath[0]). This allows\n            // key fields included in the written data to be saved in the cache\n            // even if they are not selected explicitly in context.selectionSet.\n            // Not being mentioned by context.selectionSet is convenient here,\n            // since it means these extra fields cannot be affected by field\n            // aliasing, which is why we can use extractKey instead of\n            // context.readField for this extraction.\n            extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n          }\n\n          invariant(\n            extracted !== void 0,\n            `Missing field '%s' while extracting keyFields from %s`,\n            schemaKeyPath.join(\".\"),\n            object\n          );\n\n          return extracted;\n        }\n      ));\n\n      return `${context.typename}:${JSON.stringify(keyObject)}`;\n    })\n  );\n}\n\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nexport function keyArgsFnFromSpecifier(\n  specifier: KeySpecifier\n): KeyArgsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return (\n    info.keyArgsFn ||\n    (info.keyArgsFn = (args, { field, variables, fieldName }) => {\n      const collected = collectSpecifierPaths(specifier, (keyPath) => {\n        const firstKey = keyPath[0];\n        const firstChar = firstKey.charAt(0);\n\n        if (firstChar === \"@\") {\n          if (field && isNonEmptyArray(field.directives)) {\n            const directiveName = firstKey.slice(1);\n            // If the directive appears multiple times, only the first\n            // occurrence's arguments will be used. TODO Allow repetition?\n            // TODO Cache this work somehow, a la aliasMap?\n            const d = field.directives.find(\n              (d) => d.name.value === directiveName\n            );\n            // Fortunately argumentsObjectFromField works for DirectiveNode!\n            const directiveArgs = d && argumentsObjectFromField(d, variables);\n            // For directives without arguments (d defined, but directiveArgs ===\n            // null), the presence or absence of the directive still counts as\n            // part of the field key, so we return null in those cases. If no\n            // directive with this name was found for this field (d undefined and\n            // thus directiveArgs undefined), we return undefined, which causes\n            // this value to be omitted from the key object returned by\n            // collectSpecifierPaths.\n            return (\n              directiveArgs &&\n              extractKeyPath(\n                directiveArgs,\n                // If keyPath.length === 1, this code calls extractKeyPath with an\n                // empty path, which works because it uses directiveArgs as the\n                // extracted value.\n                keyPath.slice(1)\n              )\n            );\n          }\n          // If the key started with @ but there was no corresponding directive,\n          // we want to omit this value from the key object, not fall through to\n          // treating @whatever as a normal argument name.\n          return;\n        }\n\n        if (firstChar === \"$\") {\n          const variableName = firstKey.slice(1);\n          if (variables && hasOwn.call(variables, variableName)) {\n            const varKeyPath = keyPath.slice(0);\n            varKeyPath[0] = variableName;\n            return extractKeyPath(variables, varKeyPath);\n          }\n          // If the key started with $ but there was no corresponding variable, we\n          // want to omit this value from the key object, not fall through to\n          // treating $whatever as a normal argument name.\n          return;\n        }\n\n        if (args) {\n          return extractKeyPath(args, keyPath);\n        }\n      });\n\n      const suffix = JSON.stringify(collected);\n\n      // If no arguments were passed to this field, and it didn't have any other\n      // field key contributions from directives or variables, hide the empty\n      // :{} suffix from the field key. However, a field passed no arguments can\n      // still end up with a non-empty :{...} suffix if its key configuration\n      // refers to directives or variables.\n      if (args || suffix !== \"{}\") {\n        fieldName += \":\" + suffix;\n      }\n\n      return fieldName;\n    })\n  );\n}\n\nexport function collectSpecifierPaths(\n  specifier: KeySpecifier,\n  extractor: (path: string[]) => any\n): Record<string, any> {\n  // For each path specified by specifier, invoke the extractor, and repeatedly\n  // merge the results together, with appropriate ancestor context.\n  const merger = new DeepMerger();\n  return getSpecifierPaths(specifier).reduce((collected, path) => {\n    let toMerge = extractor(path);\n    if (toMerge !== void 0) {\n      // This path is not expected to contain array indexes, so the toMerge\n      // reconstruction will not contain arrays. TODO Fix this?\n      for (let i = path.length - 1; i >= 0; --i) {\n        toMerge = { [path[i]]: toMerge };\n      }\n      collected = merger.merge(collected, toMerge);\n    }\n    return collected;\n  }, {});\n}\n\nexport function getSpecifierPaths(spec: KeySpecifier): string[][] {\n  const info = lookupSpecifierInfo(spec);\n\n  if (!info.paths) {\n    const paths: string[][] = (info.paths = []);\n    const currentPath: string[] = [];\n\n    spec.forEach((s, i) => {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach((p) => paths.push(currentPath.concat(p)));\n        currentPath.length = 0;\n      } else {\n        currentPath.push(s);\n        if (!isArray(spec[i + 1])) {\n          paths.push(currentPath.slice(0));\n          currentPath.length = 0;\n        }\n      }\n    });\n  }\n\n  return info.paths!;\n}\n\nfunction extractKey<TObj extends Record<string, any>, TKey extends string>(\n  object: TObj,\n  key: TKey\n): TObj[TKey] | undefined {\n  return object[key];\n}\n\nexport function extractKeyPath(\n  object: Record<string, any>,\n  path: string[],\n  extract?: typeof extractKey\n): any {\n  // For each key in path, extract the corresponding child property from obj,\n  // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n  // possible). The final result of path.reduce is normalized so unexpected leaf\n  // objects have their keys safely sorted. That final result is difficult to\n  // type as anything other than any. You're welcome to try to improve the\n  // return type, but keep in mind extractKeyPath is not a public function\n  // (exported only for testing), so the effort may not be worthwhile unless the\n  // limited set of actual callers (see above) pass arguments that TypeScript\n  // can statically type. If we know only that path is some array of strings\n  // (and not, say, a specific tuple of statically known strings), any (or\n  // possibly unknown) is the honest answer.\n  extract = extract || extractKey;\n  return normalize(\n    path.reduce(function reducer(obj, key): any {\n      return isArray(obj) ?\n          obj.map((child) => reducer(child, key))\n        : obj && extract!(obj, key);\n    }, object)\n  );\n}\n\nfunction normalize<T>(value: T): T {\n  // Usually the extracted value will be a scalar value, since most primary\n  // key fields are scalar, but just in case we get an object or an array, we\n  // need to do some normalization of the order of (nested) keys.\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize) as any;\n    }\n    return collectSpecifierPaths(Object.keys(value).sort(), (path) =>\n      extractKeyPath(value, path)\n    ) as T;\n  }\n  return value;\n}\n","import type { DirectiveNode, FieldNode } from \"graphql\";\n\nimport { valueToObjectRepresentation } from \"./valueToObjectRepresentation.js\";\n\n/** @internal */\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables?: Record<string, any>\n): Object | null {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables)\n    );\n    return argObj;\n  }\n  return null;\n}\n","import type { FormattedExecutionResult, GraphQLFormattedError } from \"graphql\";\n\nimport type { ApolloLink } from \"@apollo/client/link\";\n\nimport { brand, isBranded } from \"./utils.js\";\n\nexport declare namespace CombinedGraphQLErrors {\n  export interface MessageFormatterOptions {\n    /**\n     * The raw result returned from the server.\n     */\n    result: ApolloLink.Result<unknown>;\n\n    /**\n     * The default message formatter. Call this to get a string with the default\n     * formatted message.\n     *\n     * @remarks\n     * To format part of the message using the default message formatter, call\n     * the `defaultFormatMessage` function provided to the `options` argument of\n     * your message formatter.\n     *\n     * @example\n     *\n     * The following example prepends a string to the message and uses the\n     * default message formatter to format the error messages.\n     *\n     * ```ts\n     * CombinedGraphQLErrors.formatMessage = (errors, { defaultFormatMessage }) => {\n     *   return `[GraphQL errors]: ${defaultFormatMessage(errors)}`;\n     * };\n     * ```\n     */\n    defaultFormatMessage: (\n      errors: ReadonlyArray<GraphQLFormattedError>\n    ) => string;\n  }\n\n  /**\n   * By default, `CombinedGraphQLErrors` formats the `message` property by\n   * joining each error's `message` field with a newline. To customize the\n   * format of the `message`, such as changing the delimiter or adding a message\n   * prefix, override the static `formatMessage` method.\n   *\n   * @example\n   *\n   * The following example demonstrates how to format the error message by\n   * joining each error with a comma.\n   *\n   * ```ts\n   * import { CombinedGraphQLErrors } from \"@apollo/client/errors\";\n   *\n   * CombinedGraphQLErrors.formatMessage = (errors) => {\n   *   return errors.map((error) => error.message).join(\", \");\n   * };\n   * ```\n   *\n   * @remarks\n   *\n   * See the [`formatMessage`](https://www.apollographql.com/docs/react/api/errors/CombinedGraphQLErrors#formatmessage) docs for details about the parameters provided to the `formatMessage` function.\n   *\n   * > [!NOTE]\n   * > The message formatter needs to be configured before any operation is executed by Apollo Client, otherwise the default message formatter is used. We recommend configuring the message formatter before initializing your `ApolloClient` instance.\n   *\n   * @param errors - The array of GraphQL errors returned from the server in the\n   * `errors` field of the response.\n   * @param options - Additional context that could be useful when formatting\n   * the message.\n   */\n  export type MessageFormatter = (\n    errors: ReadonlyArray<GraphQLFormattedError>,\n    options: MessageFormatterOptions\n  ) => string;\n\n  namespace DocumentationTypes {\n    /**\n     * A function that formats the error message used for the error's `message`\n     * property. Override this method to provide your own formatting.\n     *\n     * @remarks\n     *\n     * The `formatMessage` function is called by the `CombinedGraphQLErrors`\n     * constructor to provide a formatted message as the `message` property of the\n     * `CombinedGraphQLErrors` object. Follow the [\"Providing a custom message\n     * formatter\"](https://www.apollographql.com/docs/react/api/errors/CombinedGraphQLErrors#providing-a-custom-message-formatter) guide to learn how to modify the message format.\n     *\n     * @param errors - The array of GraphQL errors returned from the server in\n     * the `errors` field of the response.\n     * @param options - Additional context that could be useful when formatting\n     * the message.\n     */\n    function formatMessage(\n      errors: ReadonlyArray<GraphQLFormattedError>,\n      options: MessageFormatterOptions\n    ): string;\n\n    interface InstanceProperties {\n      /**\n       * The raw list of GraphQL errors returned by the `errors` field in the GraphQL response.\n       */\n      readonly errors: ReadonlyArray<GraphQLFormattedError>;\n\n      /**\n       * Partial data returned in the `data` field of the GraphQL response.\n       */\n      readonly data: Record<string, unknown> | null | undefined;\n\n      /**\n       * Extensions returned by the `extensions` field in the GraphQL response.\n       */\n      readonly extensions: Record<string, unknown> | undefined;\n    }\n\n    /**\n     * A method that determines whether an error is a `{{errorClass}}`\n     * object. This method enables TypeScript to narrow the error type.\n     *\n     * @example\n     *\n     * ```ts\n     * if ({{errorClass}}.is(error)) {\n     *   // TypeScript now knows `error` is a `{{errorClass}}` object\n     *   console.log(error.errors);\n     * }\n     * ```\n     */\n    function is(error: unknown): boolean;\n  }\n}\n\nfunction defaultFormatMessage(errors: ReadonlyArray<GraphQLFormattedError>) {\n  return (\n    errors\n      // Handle non-spec-compliant servers: See #1185\n      .filter((e) => e)\n      .map((e) => e.message || \"Error message not found.\")\n      .join(\"\\n\")\n  );\n}\n\n/**\n * Represents the combined list of GraphQL errors returned from the server in a\n * GraphQL response. This error type is used when your GraphQL operation returns\n * errors in the `errors` field of the response.\n *\n * @remarks\n *\n * When your GraphQL operation encounters errors on the server side (such as\n * resolver errors, validation errors, or syntax errors), the server returns\n * these errors in the `errors` array of the GraphQL response. Apollo Client\n * wraps these errors in a `CombinedGraphQLErrors` object, which provides access\n * to the individual errors while maintaining additional context about the\n * response.\n *\n * @example\n *\n * ```ts\n * import { CombinedGraphQLErrors } from \"@apollo/client/errors\";\n *\n * // Check if an error is a CombinedGraphQLErrors object\n * if (CombinedGraphQLErrors.is(error)) {\n *   // Access individual GraphQL errors\n *   error.errors.forEach((graphQLError) => {\n *     console.log(graphQLError.message);\n *     console.log(graphQLError.path);\n *     console.log(graphQLError.locations);\n *   });\n *\n *   // Access the original GraphQL result\n *   console.log(error.result);\n * }\n * ```\n */\nexport class CombinedGraphQLErrors extends Error {\n  /**\n   * {@inheritDoc @apollo/client!CombinedGraphQLErrors.DocumentationTypes.is:function(1) {\"errorClass\":\"CombinedGraphQLErrors\"}}\n   */\n  static is(error: unknown): error is CombinedGraphQLErrors {\n    return isBranded(error, \"CombinedGraphQLErrors\");\n  }\n\n  /** {@inheritDoc @apollo/client!CombinedGraphQLErrors.DocumentationTypes.formatMessage:function(1)} */\n  static formatMessage: CombinedGraphQLErrors.MessageFormatter =\n    defaultFormatMessage;\n\n  /** {@inheritDoc @apollo/client!CombinedGraphQLErrors.DocumentationTypes.InstanceProperties#errors:member} */\n  readonly errors: ReadonlyArray<GraphQLFormattedError>;\n\n  /** {@inheritDoc @apollo/client!CombinedGraphQLErrors.DocumentationTypes.InstanceProperties#data:member} */\n  readonly data: Record<string, unknown> | null | undefined;\n\n  /** {@inheritDoc @apollo/client!CombinedGraphQLErrors.DocumentationTypes.InstanceProperties#extensions:member} */\n  readonly extensions: Record<string, unknown> | undefined;\n\n  constructor(result: FormattedExecutionResult<any>);\n  constructor(\n    result: ApolloLink.Result<any>,\n    errors: ReadonlyArray<GraphQLFormattedError>\n  );\n\n  constructor(\n    result: ApolloLink.Result<any> | FormattedExecutionResult<any>,\n    errors = (result as FormattedExecutionResult<any>).errors || []\n  ) {\n    super(\n      CombinedGraphQLErrors.formatMessage(errors, {\n        result,\n        defaultFormatMessage,\n      })\n    );\n    this.errors = errors;\n    this.data = (result as Partial<FormattedExecutionResult>).data;\n    this.extensions = (result as Partial<FormattedExecutionResult>).extensions;\n    this.name = \"CombinedGraphQLErrors\";\n\n    brand(this);\n    Object.setPrototypeOf(this, CombinedGraphQLErrors.prototype);\n  }\n}\n","import { WeakCache } from \"@wry/caches\";\nimport { Trie } from \"@wry/trie\";\nimport type { DocumentNode } from \"graphql\";\nimport { wrap } from \"optimism\";\n\nimport { checkDocument } from \"@apollo/client/utilities/internal\";\nimport { invariant } from \"@apollo/client/utilities/invariant\";\n\nimport { cacheSizes } from \"../caching/sizes.js\";\n\nexport type DocumentTransformCacheKey = ReadonlyArray<unknown>;\n\ntype TransformFn = (document: DocumentNode) => DocumentNode;\n\ninterface DocumentTransformOptions {\n  /**\n   * Determines whether to cache the transformed GraphQL document. Caching can\n   * speed up repeated calls to the document transform for the same input\n   * document. Set to `false` to completely disable caching for the document\n   * transform. When disabled, this option takes precedence over the [`getCacheKey`](#getcachekey)\n   * option.\n   *\n   * @defaultValue `true`\n   */\n  cache?: boolean;\n  /**\n   * Defines a custom cache key for a GraphQL document that will determine whether to re-run the document transform when given the same input GraphQL document. Returns an array that defines the cache key. Return `undefined` to disable caching for that GraphQL document.\n   *\n   * > [!NOTE]\n   * > The items in the array can be any type, but each item needs to be\n   * > referentially stable to guarantee a stable cache key.\n   *\n   * @defaultValue `(document) => [document]`\n   */\n  getCacheKey?: (\n    document: DocumentNode\n  ) => DocumentTransformCacheKey | undefined;\n}\n\nfunction identity(document: DocumentNode) {\n  return document;\n}\n\n/**\n * A class for transforming GraphQL documents. See the [Document transforms\n * documentation](https://www.apollographql.com/docs/react/data/document-transforms) for more details on using them.\n *\n * @example\n *\n * ```ts\n * import { DocumentTransform } from \"@apollo/client/utilities\";\n * import { visit } from \"graphql\";\n *\n * const documentTransform = new DocumentTransform((doc) => {\n *   return visit(doc, {\n *     // ...\n *   });\n * });\n *\n * const transformedDoc = documentTransform.transformDocument(myDocument);\n * ```\n */\nexport class DocumentTransform {\n  private readonly transform: TransformFn;\n  private cached: boolean;\n\n  private readonly resultCache = new WeakSet<DocumentNode>();\n\n  // This default implementation of getCacheKey can be overridden by providing\n  // options.getCacheKey to the DocumentTransform constructor. In general, a\n  // getCacheKey function may either return an array of keys (often including\n  // the document) to be used as a cache key, or undefined to indicate the\n  // transform for this document should not be cached.\n  private getCacheKey(\n    document: DocumentNode\n  ): DocumentTransformCacheKey | undefined {\n    return [document];\n  }\n\n  /**\n   * Creates a DocumentTransform that returns the input document unchanged.\n   *\n   * @returns The input document\n   */\n  static identity() {\n    // No need to cache this transform since it just returns the document\n    // unchanged. This should save a bit of memory that would otherwise be\n    // needed to populate the `documentCache` of this transform.\n    return new DocumentTransform(identity, { cache: false });\n  }\n\n  /**\n   * Creates a DocumentTransform that conditionally applies one of two transforms.\n   *\n   * @param predicate - Function that determines which transform to apply\n   * @param left - Transform to apply when `predicate` returns `true`\n   * @param right - Transform to apply when `predicate` returns `false`. If not provided, it defaults to `DocumentTransform.identity()`.\n   * @returns A DocumentTransform that conditionally applies a document transform based on the predicate\n   *\n   * @example\n   *\n   * ```ts\n   * import { isQueryOperation } from \"@apollo/client/utilities\";\n   *\n   * const conditionalTransform = DocumentTransform.split(\n   *   (document) => isQueryOperation(document),\n   *   queryTransform,\n   *   mutationTransform\n   * );\n   * ```\n   */\n  static split(\n    predicate: (document: DocumentNode) => boolean,\n    left: DocumentTransform,\n    right: DocumentTransform = DocumentTransform.identity()\n  ) {\n    return Object.assign(\n      new DocumentTransform(\n        (document) => {\n          const documentTransform = predicate(document) ? left : right;\n\n          return documentTransform.transformDocument(document);\n        },\n        // Reasonably assume both `left` and `right` transforms handle their own caching\n        { cache: false }\n      ),\n      { left, right }\n    );\n  }\n\n  constructor(transform: TransformFn, options: DocumentTransformOptions = {}) {\n    this.transform = transform;\n\n    if (options.getCacheKey) {\n      // Override default `getCacheKey` function, which returns [document].\n      this.getCacheKey = options.getCacheKey;\n    }\n    this.cached = options.cache !== false;\n\n    this.resetCache();\n  }\n\n  /**\n   * Resets the internal cache of this transform, if it is cached.\n   */\n  resetCache() {\n    if (this.cached) {\n      const stableCacheKeys = new Trie<WeakKey>();\n      this.performWork = wrap(\n        DocumentTransform.prototype.performWork.bind(this),\n        {\n          makeCacheKey: (document) => {\n            const cacheKeys = this.getCacheKey(document);\n            if (cacheKeys) {\n              invariant(\n                Array.isArray(cacheKeys),\n                \"`getCacheKey` must return an array or undefined\"\n              );\n              return stableCacheKeys.lookupArray(cacheKeys);\n            }\n          },\n          max: cacheSizes[\"documentTransform.cache\"],\n          cache: WeakCache<any, any>,\n        }\n      );\n    }\n  }\n\n  private performWork(document: DocumentNode) {\n    checkDocument(document);\n    return this.transform(document);\n  }\n\n  /**\n   * Transforms a GraphQL document using the configured transform function.\n   *\n   * @remarks\n   *\n   * Note that `transformDocument` caches the transformed document. Calling\n   * `transformDocument` again with the already-transformed document will\n   * immediately return it.\n   *\n   * @param document - The GraphQL document to transform\n   * @returns The transformed document\n   *\n   * @example\n   *\n   * ```ts\n   * const document = gql`\n   *   # ...\n   * `;\n   *\n   * const documentTransform = new DocumentTransform(transformFn);\n   * const transformedDocument = documentTransform.transformDocument(document);\n   * ```\n   */\n  transformDocument(document: DocumentNode) {\n    // If a user passes an already transformed result back to this function,\n    // immediately return it.\n    if (this.resultCache.has(document)) {\n      return document;\n    }\n\n    const transformedDocument = this.performWork(document);\n\n    this.resultCache.add(transformedDocument);\n\n    return transformedDocument;\n  }\n\n  /**\n   * Combines this document transform with another document transform. The\n   * returned document transform first applies the current document transform,\n   * then applies the other document transform.\n   *\n   * @param otherTransform - The transform to apply after this one\n   * @returns A new DocumentTransform that applies both transforms in sequence\n   *\n   * @example\n   *\n   * ```ts\n   * const combinedTransform = addTypenameTransform.concat(\n   *   removeDirectivesTransform\n   * );\n   * ```\n   */\n  concat(otherTransform: DocumentTransform): DocumentTransform {\n    return Object.assign(\n      new DocumentTransform(\n        (document) => {\n          return otherTransform.transformDocument(\n            this.transformDocument(document)\n          );\n        },\n        // Reasonably assume both transforms handle their own caching\n        { cache: false }\n      ),\n      {\n        left: this,\n        right: otherTransform,\n      }\n    );\n  }\n\n  /**\n   * @internal\n   * Used to iterate through all transforms that are concatenations or `split` links.\n   */\n  readonly left?: DocumentTransform;\n  /**\n   * @internal\n   * Used to iterate through all transforms that are concatenations or `split` links.\n   */\n  readonly right?: DocumentTransform;\n}\n","import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n","import { inspect } from './inspect.mjs';\n/* c8 ignore next 3 */\n\nconst isProduction =\n  globalThis.process && // eslint-disable-next-line no-undef\n  process.env.NODE_ENV === 'production';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport const instanceOf =\n  /* c8 ignore next 6 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  isProduction\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = inspect(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n","import type { OperatorFunction } from \"rxjs\";\nimport { Observable } from \"rxjs\";\n\nexport function filterMap<T, R>(\n  fn: (value: T, context: undefined) => R | undefined\n): OperatorFunction<T, R>;\nexport function filterMap<T, R, Context>(\n  fn: (value: T, context: Context) => R | undefined,\n  makeContext: () => NoInfer<Context>\n): OperatorFunction<T, R>;\nexport function filterMap<T, R>(\n  fn: (value: T, context: any) => R | undefined,\n  makeContext = () => undefined\n): OperatorFunction<T, R> {\n  return (source) =>\n    new Observable<R>((subscriber) => {\n      let context = makeContext();\n      return source.subscribe({\n        next(value) {\n          let result: R | undefined;\n          try {\n            result = fn(value, context);\n          } catch (e) {\n            subscriber.error(e);\n          }\n          if (result === undefined) {\n            return;\n          }\n          subscriber.next(result);\n        },\n        error(err) {\n          subscriber.error(err);\n        },\n        complete() {\n          subscriber.complete();\n        },\n      });\n    });\n}\n","import { ApolloLink } from \"@apollo/client/link\";\nimport { compact } from \"@apollo/client/utilities/internal\";\n\nexport declare namespace ClientAwarenessLink {\n  /**\n   * Options passed to `ClientAwarenessLink` through [request context](https://apollographql.com/docs/react/api/link/introduction#managing-context). Previous\n   * non-terminating links in the link chain also can set these values to\n   * customize the behavior of `ClientAwarenessLink` for each operation.\n   *\n   * > [!NOTE]\n   * > Some of these values can also be provided to the `ClientAwarenessLink`\n   * > constructor. If a value is provided to both, the value in `context` takes\n   * > precedence.\n   */\n  export interface ContextOptions {\n    /** {@inheritDoc @apollo/client/link/client-awareness!ClientAwarenessLink.Options#clientAwareness:member} */\n    clientAwareness?: ClientAwarenessLink.ClientAwarenessOptions;\n  }\n\n  export interface ClientAwarenessOptions {\n    /**\n     * A custom name (e.g., `iOS`) that identifies this particular client among your set of clients. Apollo Server and Apollo Studio use this property as part of the [client awareness](https://www.apollographql.com/docs/apollo-server/monitoring/metrics#identifying-distinct-clients) feature.\n     *\n     * This option can either be set as part of the Apollo Client constructor call or when manually constructing a `HttpLink`, `BatchHttpLink` or `ClientAwarenessLink`.\n     */\n    name?: string;\n    /**\n     * A custom version that identifies the current version of this particular client (e.g., `1.2`). Apollo Server and Apollo Studio use this property as part of the [client awareness](https://www.apollographql.com/docs/apollo-server/monitoring/metrics#identifying-distinct-clients) feature.\n     *\n     * This is **not** the version of Apollo Client that you are using, but rather any version string that helps you differentiate between versions of your client.\n     *\n     * This option can either be set as part of the Apollo Client constructor call or when manually constructing a `HttpLink`, `BatchHttpLink` or `ClientAwarenessLink`.\n     */\n    version?: string;\n    /**\n     * Determines how `name` and `version` are sent in outgoing requests.\n     *\n     * If `name` and `version` are not provided, this option will be ignored.\n     * (These options can either be set as part of the Apollo Client constructor call or when manually constructing a `HttpLink`, `BatchHttpLink` or `ClientAwarenessLink`.)\n     *\n     * - If set to `\"headers\"`, `name` and `version` will be sent in the request headers as `apollographql-client-name` and `apollographql-client-version`, respectively.\n     * - If set to `false`, `name` and `version` will not be included in outgoing requests.\n     *\n     * @defaultValue \"headers\"\n     */\n    transport?: \"headers\" | false;\n  }\n  export interface EnhancedClientAwarenessOptions {\n    /**\n     * Determines how the the version information of Apollo Client is sent in outgoing requests.\n     *\n     * - If set to `\"extensions\"`, library `name` and `version` will be sent in an object in the request extensions as `clientLibrary`.\n     * - If set to `false`, library name and version will not be included in outgoing requests.\n     *\n     * @defaultValue \"extensions\"\n     */\n    transport?: \"extensions\" | false;\n  }\n\n  export interface Options {\n    /**\n     * Configures the \"client awareness\" feature.\n     * This feature allows you to identify distinct applications in Apollo Studio\n     * and Apollo Server logs (and other monitoring or analytics tools) by adding\n     * information about the your application to outgoing requests.\n     */\n    clientAwareness?: ClientAwarenessLink.ClientAwarenessOptions;\n    /**\n     * Configures the \"enhanced client awareness\" feature.\n     * This feature allows you to identify the version of the Apollo Client library\n     * used in your application in Apollo Studio (and other monitoring or analytics tools)\n     * by adding information about the Apollo Client library to outgoing requests.\n     */\n    enhancedClientAwareness?: ClientAwarenessLink.EnhancedClientAwarenessOptions;\n  }\n}\n\n/**\n * `ClientAwarenessLink` provides support for providing client awareness\n * features.\n *\n * @remarks\n *\n * Client awareness adds identifying information about the client to HTTP\n * requests for use with metrics reporting tools, such as [Apollo GraphOS](https://apollographql.com/docs/graphos/platform).\n * It is included in the functionality of [`HttpLink`](https://apollographql.com/docs/react/api/link/apollo-link-http) by default.\n *\n * Client awareness distinguishes between user-provided client awareness\n * (provided by the `clientAwareness` option) and enhanced client awareness\n * (provided by the `enhancedClientAwareness` option). User-provided client\n * awareness enables you to set a customized client name and version for\n * identification in metrics reporting tools. Enhanced client awareness enables\n * the identification of the Apollo Client package name and version.\n *\n * @example\n *\n * ```ts\n * import { ClientAwarenessLink } from \"@apollo/client/link/client-awareness\";\n *\n * const link = new ClientAwarenessLink({\n *   clientAwareness: {\n *     name: \"My Client\",\n *     version: \"1\",\n *   },\n *   enhancedClientAwareness: {\n *     transport: \"extensions\",\n *   },\n * });\n * ```\n */\nexport class ClientAwarenessLink extends ApolloLink {\n  constructor(options: ClientAwarenessLink.Options = {}) {\n    super((operation, forward) => {\n      const client = operation.client;\n\n      const clientOptions = client[\"queryManager\"].clientOptions;\n      const context = operation.getContext();\n      {\n        const {\n          name,\n          version,\n          transport = \"headers\",\n        } = compact(\n          {},\n          clientOptions.clientAwareness,\n          options.clientAwareness,\n          context.clientAwareness\n        );\n\n        if (transport === \"headers\") {\n          operation.setContext(({ headers, extensions }) => {\n            return {\n              headers: compact(\n                // setting these first so that they can be overridden by user-provided headers\n                {\n                  \"apollographql-client-name\": name,\n                  \"apollographql-client-version\": version,\n                },\n                headers\n              ),\n            };\n          });\n        }\n      }\n      {\n        const { transport = \"extensions\" } = compact(\n          {},\n          clientOptions.enhancedClientAwareness,\n          options.enhancedClientAwareness\n        );\n        if (transport === \"extensions\") {\n          operation.extensions = compact(\n            // setting these first so that it can be overridden by user-provided extensions\n            {\n              clientLibrary: {\n                name: \"@apollo/client\",\n                version: client.version,\n              },\n            },\n            operation.extensions\n          );\n        }\n      }\n\n      return forward(operation);\n    });\n  }\n}\n",null,"import type { ASTNode } from \"graphql\";\nimport { print as origPrint } from \"graphql\";\n\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport {\n  AutoCleanedWeakCache,\n  registerGlobalCache,\n} from \"@apollo/client/utilities/internal\";\n\nimport { cacheSizes, defaultCacheSizes } from \"../caching/index.js\";\n\nlet printCache!: AutoCleanedWeakCache<ASTNode, string>;\n\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n *\n * @remarks This is the same function as the GraphQL.js `print` function but\n * with an added cache to avoid recomputation when encountering the same\n * `ASTNode` more than once.\n */\nexport const print = Object.assign(\n  (ast: ASTNode) => {\n    let result = printCache.get(ast);\n\n    if (!result) {\n      result = origPrint(ast);\n      printCache.set(ast, result);\n    }\n    return result;\n  },\n  {\n    reset() {\n      printCache = new AutoCleanedWeakCache<ASTNode, string>(\n        cacheSizes.print || defaultCacheSizes.print\n      );\n    },\n  }\n);\nprint.reset();\n\nif (__DEV__) {\n  registerGlobalCache(\"print\", () => (printCache ? printCache.size : 0));\n}\n",null,"import { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { global } from \"@apollo/client/utilities/internal/globals\";\n\nimport type { ErrorCodes } from \"../../invariantErrorCodes.js\";\nimport { version } from \"../../version.js\";\n// eslint-disable-next-line local-rules/import-from-inside-other-export\nimport { stringifyForDisplay } from \"../internal/stringifyForDisplay.js\";\n\nconst genericMessage = \"Invariant Violation\";\nexport class InvariantError extends Error {\n  constructor(message = genericMessage) {\n    super(message);\n    this.name = genericMessage;\n\n    Object.setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nconst verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"] as const;\ntype VerbosityLevel = (typeof verbosityLevels)[number];\ntype ConsoleMethodName = Exclude<VerbosityLevel, \"silent\">;\nlet verbosityLevel = verbosityLevels.indexOf(__DEV__ ? \"log\" : \"silent\");\n\nexport function invariant(\n  condition: any,\n  ...args: [message?: string | number, ...any[]]\n): asserts condition {\n  if (!condition) {\n    throw newInvariantError(...args);\n  }\n}\n\nfunction wrapConsoleMethod<M extends ConsoleMethodName>(name: M) {\n  return function (message?: string | number, ...args: any[]) {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      const method = console[name] || console.log;\n\n      if (typeof message === \"number\") {\n        const arg0 = message;\n        message = getHandledErrorMsg(arg0);\n        if (!message) {\n          message = getFallbackErrorMsg(arg0, args);\n          args = [];\n        }\n      }\n\n      method(message, ...args);\n    }\n  } as (typeof console)[M];\n}\n\ninvariant.debug = wrapConsoleMethod(\"debug\");\ninvariant.log = wrapConsoleMethod(\"log\");\ninvariant.warn = wrapConsoleMethod(\"warn\");\ninvariant.error = wrapConsoleMethod(\"error\");\n\nexport function setVerbosity(level: VerbosityLevel): VerbosityLevel {\n  const old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */\nexport function newInvariantError(\n  message?: string | number,\n  ...optionalParams: unknown[]\n) {\n  return new InvariantError(\n    getHandledErrorMsg(message, optionalParams) ||\n      getFallbackErrorMsg(message, optionalParams)\n  );\n}\n\n// This is duplicated between `@apollo/client/dev` and `@apollo/client/utilities/invariant` to prevent circular references.\nexport const ApolloErrorMessageHandler = Symbol.for(\n  \"ApolloErrorMessageHandler_\" + version\n);\ndeclare global {\n  interface Window {\n    [ApolloErrorMessageHandler]?: {\n      (message: string | number, args: string[]): string | undefined;\n    } & ErrorCodes;\n  }\n}\n\nfunction stringify(arg: any) {\n  if (typeof arg == \"string\") {\n    return arg;\n  }\n\n  try {\n    return stringifyForDisplay(arg, 2).slice(0, 1000);\n  } catch {\n    return \"<non-serializable>\";\n  }\n}\n\nfunction getHandledErrorMsg(\n  message?: string | number,\n  messageArgs: unknown[] = []\n) {\n  if (!message) return;\n  return (\n    global[ApolloErrorMessageHandler] &&\n    global[ApolloErrorMessageHandler](message, messageArgs.map(stringify))\n  );\n}\n\nfunction getFallbackErrorMsg(\n  message?: string | number,\n  messageArgs: unknown[] = []\n) {\n  if (!message) return;\n  if (typeof message === \"string\") {\n    return messageArgs.reduce<string>(\n      (msg, arg) => msg.replace(/%[sdfo]/, stringify(arg)),\n      message\n    );\n  }\n  return `An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#${encodeURIComponent(\n    JSON.stringify({\n      version,\n      message,\n      args: messageArgs.map(stringify),\n    })\n  )}`;\n}\n","import type { ASTNode } from \"graphql\";\nimport { BREAK, visit } from \"graphql\";\n\nexport function hasForcedResolvers(document: ASTNode) {\n  let forceResolvers = false;\n  visit(document, {\n    Directive: {\n      enter(node) {\n        if (node.name.value === \"client\" && node.arguments) {\n          forceResolvers = node.arguments.some(\n            (arg) =>\n              arg.name.value === \"always\" &&\n              arg.value.kind === \"BooleanValue\" &&\n              arg.value.value === true\n          );\n          if (forceResolvers) {\n            return BREAK;\n          }\n        }\n      },\n    },\n  });\n  return forceResolvers;\n}\n","import type { ApolloLink } from \"@apollo/client/link\";\n\nexport const selectURI = (\n  operation: ApolloLink.Operation,\n  fallbackURI?: string | ((operation: ApolloLink.Operation) => string)\n) => {\n  const context = operation.getContext();\n  const contextURI = context.uri;\n\n  if (contextURI) {\n    return contextURI;\n  } else if (typeof fallbackURI === \"function\") {\n    return fallbackURI(operation);\n  } else {\n    return (fallbackURI as string) || \"/graphql\";\n  }\n};\n","import { __DEV__ } from \"@apollo/client/utilities/environment\";\n\nimport { cacheSizes, defaultCacheSizes } from \"../caching/sizes.js\";\n\nimport { AutoCleanedStrongCache } from \"./caches.js\";\nimport { registerGlobalCache } from \"./getMemoryInternals.js\";\n\n/**\n * Serializes a value to JSON with object keys in a consistent, sorted order.\n *\n * @remarks\n *\n * Unlike `JSON.stringify()`, this function ensures that object keys are always\n * serialized in the same alphabetical order, regardless of their original order.\n * This makes it suitable for creating consistent cache keys from objects,\n * comparing objects by their serialized representation, or generating\n * deterministic hashes of objects.\n *\n * To achieve performant sorting, this function uses a `Map` from JSON-serialized\n * arrays of keys (in any order) to sorted arrays of the same keys, with a\n * single sorted array reference shared by all permutations of the keys.\n *\n * As a drawback, this function will add a little more memory for every object\n * encountered that has different (more, less, a different order of) keys than\n * in the past.\n *\n * In a typical application, this extra memory usage should not play a\n * significant role, as `canonicalStringify` will be called for only a limited\n * number of object shapes, and the cache will not grow beyond a certain point.\n * But in some edge cases, this could be a problem. Use canonicalStringify.reset()\n * as a way to clear the memoization cache.\n *\n * @param value - The value to stringify\n * @returns JSON string with consistently ordered object keys\n *\n * @example\n *\n * ```ts\n * import { canonicalStringify } from \"@apollo/client/utilities\";\n *\n * const obj1 = { b: 2, a: 1 };\n * const obj2 = { a: 1, b: 2 };\n *\n * console.log(canonicalStringify(obj1)); // '{\"a\":1,\"b\":2}'\n * console.log(canonicalStringify(obj2)); // '{\"a\":1,\"b\":2}'\n * ```\n */\nexport const canonicalStringify = Object.assign(\n  function canonicalStringify(value: any): string {\n    return JSON.stringify(value, stableObjectReplacer);\n  },\n  {\n    reset() {\n      // Clearing the sortingMap will reclaim all cached memory, without\n      // affecting the logical results of canonicalStringify, but potentially\n      // sacrificing performance until the cache is refilled.\n      sortingMap = new AutoCleanedStrongCache<string, readonly string[]>(\n        cacheSizes.canonicalStringify || defaultCacheSizes.canonicalStringify\n      );\n    },\n  }\n);\n\nif (__DEV__) {\n  registerGlobalCache(\"canonicalStringify\", () => sortingMap.size);\n}\n\n// Values are JSON-serialized arrays of object keys (in any order), and values\n// are sorted arrays of the same keys.\nlet sortingMap!: AutoCleanedStrongCache<string, readonly string[]>;\ncanonicalStringify.reset();\n\n// The JSON.stringify function takes an optional second argument called a\n// replacer function. This function is called for each key-value pair in the\n// object being stringified, and its return value is used instead of the\n// original value. If the replacer function returns a new value, that value is\n// stringified as JSON instead of the original value of the property.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter\nfunction stableObjectReplacer(key: string, value: any) {\n  if (value && typeof value === \"object\") {\n    const proto = Object.getPrototypeOf(value);\n    // We don't want to mess with objects that are not \"plain\" objects, which\n    // means their prototype is either Object.prototype or null. This check also\n    // prevents needlessly rearranging the indices of arrays.\n    if (proto === Object.prototype || proto === null) {\n      const keys = Object.keys(value);\n      // If keys is already sorted, let JSON.stringify serialize the original\n      // value instead of creating a new object with keys in the same order.\n      if (keys.every(everyKeyInOrder)) return value;\n      const unsortedKey = JSON.stringify(keys);\n      let sortedKeys = sortingMap.get(unsortedKey);\n      if (!sortedKeys) {\n        keys.sort();\n        const sortedKey = JSON.stringify(keys);\n        // Checking for sortedKey in the sortingMap allows us to share the same\n        // sorted array reference for all permutations of the same set of keys.\n        sortedKeys = sortingMap.get(sortedKey) || keys;\n        sortingMap.set(unsortedKey, sortedKeys);\n        sortingMap.set(sortedKey, sortedKeys);\n      }\n      const sortedObject = Object.create(proto);\n      // Reassigning the keys in sorted order will cause JSON.stringify to\n      // serialize them in sorted order.\n      sortedKeys.forEach((key) => {\n        sortedObject[key] = value[key];\n      });\n      return sortedObject;\n    }\n  }\n  return value;\n}\n\n// Since everything that happens in stableObjectReplacer benefits from being as\n// efficient as possible, we use a static function as the callback for\n// keys.every in order to test if the provided keys are already sorted without\n// allocating extra memory for a callback.\nfunction everyKeyInOrder(\n  key: string,\n  i: number,\n  keys: readonly string[]\n): boolean {\n  return i === 0 || keys[i - 1] <= key;\n}\n","import type {\n  FieldNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionSetNode,\n} from \"graphql\";\n\nimport type { OperationVariables } from \"@apollo/client\";\nimport { disableWarningsSlot } from \"@apollo/client/masking\";\nimport type {\n  Reference,\n  StoreObject,\n  StoreValue,\n} from \"@apollo/client/utilities\";\nimport { isReference } from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport type { FragmentMap } from \"@apollo/client/utilities/internal\";\nimport {\n  argumentsObjectFromField,\n  getStoreKeyName,\n  isArray,\n  isNonNullObject,\n  storeKeyNameFromField,\n  stringifyForDisplay,\n} from \"@apollo/client/utilities/internal\";\nimport {\n  invariant,\n  newInvariantError,\n} from \"@apollo/client/utilities/invariant\";\n\nimport type {\n  CanReadFunction,\n  FieldSpecifier,\n  ReadFieldFunction,\n  ReadFieldOptions,\n  SafeReadonly,\n  ToReferenceFunction,\n} from \"../core/types/common.js\";\n\nimport {\n  defaultDataIdFromObject,\n  fieldNameFromStoreName,\n  hasOwn,\n  selectionSetMatchesResult,\n  storeValueIsStoreObject,\n  TypeOrFieldNameRegExp,\n} from \"./helpers.js\";\nimport type { InMemoryCache } from \"./inMemoryCache.js\";\nimport {\n  keyArgsFnFromSpecifier,\n  keyFieldsFnFromSpecifier,\n} from \"./key-extractor.js\";\nimport { cacheSlot } from \"./reactiveVars.js\";\nimport type {\n  IdGetter,\n  MergeInfo,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from \"./types.js\";\nimport type { WriteContext } from \"./writeToStore.js\";\n\nexport type TypePolicies = {\n  [__typename: string]: TypePolicy;\n};\n\n// TypeScript 3.7 will allow recursive type aliases, so this should work:\n// type KeySpecifier = (string | KeySpecifier)[]\nexport type KeySpecifier = ReadonlyArray<string | KeySpecifier>;\n\nexport type KeyFieldsContext = {\n  // The __typename of the incoming object, even if the __typename field was\n  // aliased to another name in the raw result object. May be undefined when\n  // dataIdFromObject is called for objects without __typename fields.\n  typename: string | undefined;\n\n  // The object to be identified, after processing to remove aliases and\n  // normalize identifiable child objects with references.\n  storeObject: StoreObject;\n\n  // Handy tool for reading additional fields from context.storeObject, either\n  // readField(\"fieldName\") to read storeObject[fieldName], or readField(\"name\",\n  // objectOrReference) to read from another object or Reference. If you read a\n  // field with a read function, that function will be invoked.\n  readField: ReadFieldFunction;\n\n  // If you are writing a custom keyFields function, and you plan to use the raw\n  // result object passed as the first argument, you may also need access to the\n  // selection set and available fragments for this object, just in case any\n  // fields have aliases. Since this logic is tricky to get right, and these\n  // context properties are not even always provided (for example, they are\n  // omitted when calling cache.identify(object), where object is assumed to be\n  // a StoreObject), we recommend you use context.storeObject (which has already\n  // been de-aliased) and context.readField (which can read from references as\n  // well as objects) instead of the raw result object in your keyFields\n  // functions, or just rely on the internal implementation of keyFields:[...]\n  // syntax to get these details right for you.\n  selectionSet?: SelectionSetNode;\n  fragmentMap?: FragmentMap;\n\n  // Internal. May be set by the KeyFieldsFunction to report fields that were\n  // involved in computing the ID. Never passed in by the caller.\n  keyObject?: Record<string, any>;\n};\n\nexport type KeyFieldsFunction = (\n  object: Readonly<StoreObject>,\n  context: KeyFieldsContext\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\ntype KeyFieldsResult = Exclude<ReturnType<KeyFieldsFunction>, KeySpecifier>;\n\n// TODO Should TypePolicy be a generic type, with a TObject or TEntity\n// type parameter?\nexport type TypePolicy = {\n  // Allows defining the primary key fields for this type, either using an\n  // array of field names or a function that returns an arbitrary string.\n  keyFields?: KeySpecifier | KeyFieldsFunction | false;\n\n  // Allows defining a merge function (or merge:true/false shorthand) to\n  // be used for merging objects of this type wherever they appear, unless\n  // the parent field also defines a merge function/boolean (that is,\n  // parent field merge functions take precedence over type policy merge\n  // functions). In many cases, defining merge:true for a given type\n  // policy can save you from specifying merge:true for all the field\n  // policies where that type might be encountered.\n  merge?: FieldMergeFunction | boolean;\n\n  // In the rare event that your schema happens to use a different\n  // __typename for the root Query, Mutation, and/or Schema types, you can\n  // express your deviant preferences by enabling one of these options.\n  queryType?: true;\n  mutationType?: true;\n  subscriptionType?: true;\n\n  fields?: {\n    [fieldName: string]: FieldPolicy<any> | FieldReadFunction<any>;\n  };\n};\n\nexport type KeyArgsFunction = (\n  args: Record<string, any> | null,\n  context: {\n    typename: string;\n    fieldName: string;\n    field: FieldNode | null;\n    variables?: Record<string, any>;\n  }\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\nexport type FieldPolicy<\n  // The internal representation used to store the field's data in the\n  // cache. Must be JSON-serializable if you plan to serialize the result\n  // of cache.extract() using JSON.\n  TExisting = any,\n  // The type of the incoming parameter passed to the merge function,\n  // typically matching the GraphQL response format, but with Reference\n  // objects substituted for any identifiable child objects. Often the\n  // same as TExisting, but not necessarily.\n  TIncoming = TExisting,\n  // The type that the read function actually returns, using TExisting\n  // data and options.args as input. Usually the same as TIncoming.\n  TReadResult = TIncoming,\n  // Allows FieldFunctionOptions definition to be overwritten by the\n  // developer\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions,\n> = {\n  keyArgs?: KeySpecifier | KeyArgsFunction | false;\n  read?: FieldReadFunction<TExisting, TReadResult, TOptions>;\n  merge?: FieldMergeFunction<TExisting, TIncoming, TOptions> | boolean;\n};\n\nexport type StorageType = Record<string, any>;\n\nfunction argsFromFieldSpecifier(spec: FieldSpecifier) {\n  return (\n    spec.args !== void 0 ? spec.args\n    : spec.field ? argumentsObjectFromField(spec.field, spec.variables)\n    : null\n  );\n}\n\nexport interface FieldFunctionOptions<\n  TArgs = Record<string, any>,\n  TVariables extends OperationVariables = Record<string, any>,\n> {\n  args: TArgs | null;\n\n  // The name of the field, equal to options.field.name.value when\n  // options.field is available. Useful if you reuse the same function for\n  // multiple fields, and you need to know which field you're currently\n  // processing. Always a string, even when options.field is null.\n  fieldName: string;\n\n  // The full field key used internally, including serialized key arguments.\n  storeFieldName: string;\n\n  // The FieldNode object used to read this field. Useful if you need to\n  // know about other attributes of the field, such as its directives. This\n  // option will be null when a string was passed to options.readField.\n  field: FieldNode | null;\n\n  variables?: TVariables;\n\n  // Utilities for dealing with { __ref } objects.\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n\n  // A handy place to put field-specific data that you want to survive\n  // across multiple read function calls. Useful for field-level caching,\n  // if your read function does any expensive work.\n  storage: StorageType;\n\n  cache: InMemoryCache;\n\n  // Helper function for reading other fields within the current object.\n  // If a foreign object or reference is provided, the field will be read\n  // from that object instead of the current object, so this function can\n  // be used (together with isReference) to examine the cache outside the\n  // current object. If a FieldNode is passed instead of a string, and\n  // that FieldNode has arguments, the same options.variables will be used\n  // to compute the argument values. Note that this function will invoke\n  // custom read functions for other fields, if defined. Always returns\n  // immutable data (enforced with Object.freeze in development).\n  readField: ReadFieldFunction;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  canRead: CanReadFunction;\n\n  // Instead of just merging objects with { ...existing, ...incoming }, this\n  // helper function can be used to merge objects in a way that respects any\n  // custom merge functions defined for their fields.\n  mergeObjects: MergeObjectsFunction;\n}\n\ntype MergeObjectsFunction = <T extends StoreObject | Reference>(\n  existing: T,\n  incoming: T\n) => T;\n\nexport type FieldReadFunction<\n  TExisting = any,\n  TReadResult = TExisting,\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions,\n> = (\n  // When reading a field, one often needs to know about any existing\n  // value stored for that field. If the field is read before any value\n  // has been written to the cache, this existing parameter will be\n  // undefined, which makes it easy to use a default parameter expression\n  // to supply the initial value. This parameter is positional (rather\n  // than one of the named options) because that makes it possible for the\n  // developer to annotate it with a type, without also having to provide\n  // a whole new type for the options object.\n  existing: SafeReadonly<TExisting> | undefined,\n  options: TOptions\n) => TReadResult | undefined;\n\nexport type FieldMergeFunction<\n  TExisting = any,\n  TIncoming = TExisting,\n  // Passing the whole FieldFunctionOptions makes the current definition\n  // independent from its implementation\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions,\n> = (\n  existing: SafeReadonly<TExisting> | undefined,\n  // The incoming parameter needs to be positional as well, for the same\n  // reasons discussed in FieldReadFunction above.\n  incoming: SafeReadonly<TIncoming>,\n  options: TOptions\n) => SafeReadonly<TExisting>;\n\nconst nullKeyFieldsFn: KeyFieldsFunction = () => void 0;\nconst simpleKeyArgsFn: KeyArgsFunction = (_args, context) => context.fieldName;\n\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nconst mergeTrueFn: FieldMergeFunction<any> = (\n  existing,\n  incoming,\n  { mergeObjects }\n) => mergeObjects(existing, incoming);\nconst mergeFalseFn: FieldMergeFunction<any> = (_, incoming) => incoming;\n\nexport type PossibleTypesMap = {\n  [supertype: string]: string[];\n};\n\ntype InternalFieldPolicy = {\n  typename: string;\n  keyFn?: KeyArgsFunction;\n  read?: FieldReadFunction<any>;\n  merge?: FieldMergeFunction<any>;\n};\n\nexport class Policies {\n  private typePolicies: {\n    [__typename: string]: {\n      keyFn?: KeyFieldsFunction;\n      merge?: FieldMergeFunction<any>;\n      fields: {\n        [fieldName: string]: InternalFieldPolicy;\n      };\n    };\n  } = {};\n\n  private toBeAdded: {\n    [__typename: string]: TypePolicy[];\n  } = {};\n\n  // Map from subtype names to sets of supertype names. Note that this\n  // representation inverts the structure of possibleTypes (whose keys are\n  // supertypes and whose values are arrays of subtypes) because it tends\n  // to be much more efficient to search upwards than downwards.\n  private supertypeMap = new Map<string, Set<string>>();\n\n  // Any fuzzy subtypes specified by possibleTypes will be converted to\n  // RegExp objects and recorded here. Every key of this map can also be\n  // found in supertypeMap. In many cases this Map will be empty, which\n  // means no fuzzy subtype checking will happen in fragmentMatches.\n  private fuzzySubtypes = new Map<string, RegExp>();\n\n  public readonly cache: InMemoryCache;\n\n  public readonly rootIdsByTypename: Record<string, string> = {};\n  public readonly rootTypenamesById: Record<string, string> = {};\n\n  public readonly usingPossibleTypes = false;\n\n  constructor(\n    private config: {\n      cache: InMemoryCache;\n      dataIdFromObject?: KeyFieldsFunction;\n      possibleTypes?: PossibleTypesMap;\n      typePolicies?: TypePolicies;\n    }\n  ) {\n    this.config = {\n      dataIdFromObject: defaultDataIdFromObject,\n      ...config,\n    };\n\n    this.cache = this.config.cache;\n\n    this.setRootTypename(\"Query\");\n    this.setRootTypename(\"Mutation\");\n    this.setRootTypename(\"Subscription\");\n\n    if (config.possibleTypes) {\n      this.addPossibleTypes(config.possibleTypes);\n    }\n\n    if (config.typePolicies) {\n      this.addTypePolicies(config.typePolicies);\n    }\n  }\n\n  public identify(\n    object: StoreObject,\n    partialContext?: Partial<KeyFieldsContext>\n  ): [string?, StoreObject?] {\n    const policies = this;\n\n    const typename =\n      (partialContext &&\n        (partialContext.typename || partialContext.storeObject?.__typename)) ||\n      object.__typename;\n\n    // It should be possible to write root Query fields with writeFragment,\n    // using { __typename: \"Query\", ... } as the data, but it does not make\n    // sense to allow the same identification behavior for the Mutation and\n    // Subscription types, since application code should never be writing\n    // directly to (or reading directly from) those root objects.\n    if (typename === this.rootTypenamesById.ROOT_QUERY) {\n      return [\"ROOT_QUERY\"];\n    }\n\n    // Default context.storeObject to object if not otherwise provided.\n    const storeObject =\n      (partialContext && partialContext.storeObject) || object;\n\n    const context: KeyFieldsContext = {\n      ...partialContext,\n      typename,\n      storeObject,\n      readField:\n        (partialContext && partialContext.readField) ||\n        (((...args) => {\n          const options = normalizeReadFieldOptions(args, storeObject);\n          return policies.readField(options, {\n            store: policies.cache[\"data\"],\n            variables: options.variables,\n          });\n        }) satisfies ReadFieldFunction),\n    };\n\n    let id: KeyFieldsResult;\n\n    const policy = typename && this.getTypePolicy(typename);\n    let keyFn = (policy && policy.keyFn) || this.config.dataIdFromObject;\n\n    disableWarningsSlot.withValue(true, () => {\n      while (keyFn) {\n        const specifierOrId = keyFn({ ...object, ...storeObject }, context);\n        if (isArray(specifierOrId)) {\n          keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n        } else {\n          id = specifierOrId;\n          break;\n        }\n      }\n    });\n\n    id = id ? String(id) : void 0;\n    return context.keyObject ? [id, context.keyObject] : [id];\n  }\n\n  public addTypePolicies(typePolicies: TypePolicies) {\n    Object.keys(typePolicies).forEach((typename) => {\n      const { queryType, mutationType, subscriptionType, ...incoming } =\n        typePolicies[typename];\n\n      // Though {query,mutation,subscription}Type configurations are rare,\n      // it's important to call setRootTypename as early as possible,\n      // since these configurations should apply consistently for the\n      // entire lifetime of the cache. Also, since only one __typename can\n      // qualify as one of these root types, these three properties cannot\n      // be inherited, unlike the rest of the incoming properties. That\n      // restriction is convenient, because the purpose of this.toBeAdded\n      // is to delay the processing of type/field policies until the first\n      // time they're used, allowing policies to be added in any order as\n      // long as all relevant policies (including policies for supertypes)\n      // have been added by the time a given policy is used for the first\n      // time. In other words, since inheritance doesn't matter for these\n      // properties, there's also no need to delay their processing using\n      // the this.toBeAdded queue.\n      if (queryType) this.setRootTypename(\"Query\", typename);\n      if (mutationType) this.setRootTypename(\"Mutation\", typename);\n      if (subscriptionType) this.setRootTypename(\"Subscription\", typename);\n\n      if (hasOwn.call(this.toBeAdded, typename)) {\n        this.toBeAdded[typename].push(incoming);\n      } else {\n        this.toBeAdded[typename] = [incoming];\n      }\n    });\n  }\n\n  private updateTypePolicy(\n    typename: string,\n    incoming: TypePolicy,\n    existingFieldPolicies: Record<string, InternalFieldPolicy>\n  ) {\n    const existing = this.getTypePolicy(typename);\n    const { keyFields, fields } = incoming;\n\n    function setMerge(\n      existing: { merge?: FieldMergeFunction | boolean },\n      merge?: FieldMergeFunction | boolean\n    ) {\n      existing.merge =\n        typeof merge === \"function\" ? merge\n          // Pass merge:true as a shorthand for a merge implementation\n          // that returns options.mergeObjects(existing, incoming).\n        : merge === true ? mergeTrueFn\n          // Pass merge:false to make incoming always replace existing\n          // without any warnings about data clobbering.\n        : merge === false ? mergeFalseFn\n        : existing.merge;\n    }\n\n    // Type policies can define merge functions, as an alternative to\n    // using field policies to merge child objects.\n    setMerge(existing, incoming.merge);\n\n    existing.keyFn =\n      // Pass false to disable normalization for this typename.\n      keyFields === false ? nullKeyFieldsFn\n        // Pass an array of strings to use those fields to compute a\n        // composite ID for objects of this typename.\n      : isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields)\n        // Pass a function to take full control over identification.\n      : typeof keyFields === \"function\" ? keyFields\n        // Leave existing.keyFn unchanged if above cases fail.\n      : existing.keyFn;\n\n    if (fields) {\n      Object.keys(fields).forEach((fieldName) => {\n        let existing = existingFieldPolicies[fieldName] as\n          | InternalFieldPolicy\n          | undefined;\n        // Field policy inheritance is atomic/shallow: you can't inherit a\n        // field policy and then override just its read function, since read\n        // and merge functions often need to cooperate, so changing only one\n        // of them would be a recipe for inconsistency.\n        // So here we avoid merging an inherited field policy with an updated one.\n        if (!existing || existing?.typename !== typename) {\n          existing = existingFieldPolicies[fieldName] = { typename };\n        }\n        const incoming = fields[fieldName];\n\n        if (typeof incoming === \"function\") {\n          existing.read = incoming;\n        } else {\n          const { keyArgs, read, merge } = incoming;\n\n          existing.keyFn =\n            // Pass false to disable argument-based differentiation of\n            // field identities.\n            keyArgs === false ? simpleKeyArgsFn\n              // Pass an array of strings to use named arguments to\n              // compute a composite identity for the field.\n            : isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs)\n              // Pass a function to take full control over field identity.\n            : typeof keyArgs === \"function\" ? keyArgs\n              // Leave existing.keyFn unchanged if above cases fail.\n            : existing.keyFn;\n\n          if (typeof read === \"function\") {\n            existing.read = read;\n          }\n\n          setMerge(existing, merge);\n        }\n\n        if (existing.read && existing.merge) {\n          // If we have both a read and a merge function, assume\n          // keyArgs:false, because read and merge together can take\n          // responsibility for interpreting arguments in and out. This\n          // default assumption can always be overridden by specifying\n          // keyArgs explicitly in the FieldPolicy.\n          existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n        }\n      });\n    }\n  }\n\n  private setRootTypename(\n    which: \"Query\" | \"Mutation\" | \"Subscription\",\n    typename: string = which\n  ) {\n    const rootId = \"ROOT_\" + which.toUpperCase();\n    const old = this.rootTypenamesById[rootId];\n    if (typename !== old) {\n      invariant(\n        !old || old === which,\n        `Cannot change root %s __typename more than once`,\n        which\n      );\n      // First, delete any old __typename associated with this rootId from\n      // rootIdsByTypename.\n      if (old) delete this.rootIdsByTypename[old];\n      // Now make this the only __typename that maps to this rootId.\n      this.rootIdsByTypename[typename] = rootId;\n      // Finally, update the __typename associated with this rootId.\n      this.rootTypenamesById[rootId] = typename;\n    }\n  }\n\n  public addPossibleTypes(possibleTypes: PossibleTypesMap) {\n    (this.usingPossibleTypes as boolean) = true;\n    Object.keys(possibleTypes).forEach((supertype) => {\n      // Make sure all types have an entry in this.supertypeMap, even if\n      // their supertype set is empty, so we can return false immediately\n      // from policies.fragmentMatches for unknown supertypes.\n      this.getSupertypeSet(supertype, true);\n\n      possibleTypes[supertype].forEach((subtype) => {\n        this.getSupertypeSet(subtype, true)!.add(supertype);\n        const match = subtype.match(TypeOrFieldNameRegExp);\n        if (!match || match[0] !== subtype) {\n          // TODO Don't interpret just any invalid typename as a RegExp.\n          this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n        }\n      });\n    });\n  }\n\n  private getTypePolicy(typename: string): Policies[\"typePolicies\"][string] {\n    if (!hasOwn.call(this.typePolicies, typename)) {\n      const policy: Policies[\"typePolicies\"][string] = (this.typePolicies[\n        typename\n      ] = {} as any);\n      policy.fields = {};\n\n      // When the TypePolicy for typename is first accessed, instead of\n      // starting with an empty policy object, inherit any properties or\n      // fields from the type policies of the supertypes of typename.\n      //\n      // Any properties or fields defined explicitly within the TypePolicy\n      // for typename will take precedence, and if there are multiple\n      // supertypes, the properties of policies whose types were added\n      // later via addPossibleTypes will take precedence over those of\n      // earlier supertypes. TODO Perhaps we should warn about these\n      // conflicts in development, and recommend defining the property\n      // explicitly in the subtype policy?\n      //\n      // Field policy inheritance is atomic/shallow: you can't inherit a\n      // field policy and then override just its read function, since read\n      // and merge functions often need to cooperate, so changing only one\n      // of them would be a recipe for inconsistency.\n      //\n      // Once the TypePolicy for typename has been accessed, its properties can\n      // still be updated directly using addTypePolicies, but future changes to\n      // inherited supertype policies will not be reflected in this subtype\n      // policy, because this code runs at most once per typename.\n      let supertypes = this.supertypeMap.get(typename);\n      if (!supertypes && this.fuzzySubtypes.size) {\n        // To make the inheritance logic work for unknown typename strings that\n        // may have fuzzy supertypes, we give this typename an empty supertype\n        // set and then populate it with any fuzzy supertypes that match.\n        supertypes = this.getSupertypeSet(typename, true)!;\n        // This only works for typenames that are directly matched by a fuzzy\n        // supertype. What if there is an intermediate chain of supertypes?\n        // While possible, that situation can only be solved effectively by\n        // specifying the intermediate relationships via possibleTypes, manually\n        // and in a non-fuzzy way.\n        this.fuzzySubtypes.forEach((regExp, fuzzy) => {\n          if (regExp.test(typename)) {\n            // The fuzzy parameter is just the original string version of regExp\n            // (not a valid __typename string), but we can look up the\n            // associated supertype(s) in this.supertypeMap.\n            const fuzzySupertypes = this.supertypeMap.get(fuzzy);\n            if (fuzzySupertypes) {\n              fuzzySupertypes.forEach((supertype) =>\n                supertypes!.add(supertype)\n              );\n            }\n          }\n        });\n      }\n      if (supertypes && supertypes.size) {\n        supertypes.forEach((supertype) => {\n          const { fields, ...rest } = this.getTypePolicy(supertype);\n          Object.assign(policy, rest);\n          Object.assign(policy.fields, fields);\n        });\n      }\n    }\n\n    const inbox = this.toBeAdded[typename];\n    if (inbox && inbox.length) {\n      // Merge the pending policies into this.typePolicies, in the order they\n      // were originally passed to addTypePolicy.\n      inbox.splice(0).forEach((policy) => {\n        this.updateTypePolicy(\n          typename,\n          policy,\n          this.typePolicies[typename].fields\n        );\n      });\n    }\n\n    return this.typePolicies[typename];\n  }\n\n  private getFieldPolicy(\n    typename: string | undefined,\n    fieldName: string\n  ): InternalFieldPolicy | undefined {\n    if (typename) {\n      return this.getTypePolicy(typename).fields[fieldName];\n    }\n  }\n\n  private getSupertypeSet(\n    subtype: string,\n    createIfMissing: boolean\n  ): Set<string> | undefined {\n    let supertypeSet = this.supertypeMap.get(subtype);\n    if (!supertypeSet && createIfMissing) {\n      this.supertypeMap.set(subtype, (supertypeSet = new Set<string>()));\n    }\n    return supertypeSet;\n  }\n\n  public fragmentMatches(\n    fragment: InlineFragmentNode | FragmentDefinitionNode,\n    typename: string | undefined,\n    result?: Record<string, any>,\n    variables?: Record<string, any>\n  ): boolean {\n    if (!fragment.typeCondition) return true;\n\n    // If the fragment has a type condition but the object we're matching\n    // against does not have a __typename, the fragment cannot match.\n    if (!typename) return false;\n\n    const supertype = fragment.typeCondition.name.value;\n    // Common case: fragment type condition and __typename are the same.\n    if (typename === supertype) return true;\n\n    if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {\n      const typenameSupertypeSet = this.getSupertypeSet(typename, true)!;\n      const workQueue = [typenameSupertypeSet];\n      const maybeEnqueue = (subtype: string) => {\n        const supertypeSet = this.getSupertypeSet(subtype, false);\n        if (\n          supertypeSet &&\n          supertypeSet.size &&\n          workQueue.indexOf(supertypeSet) < 0\n        ) {\n          workQueue.push(supertypeSet);\n        }\n      };\n\n      // We need to check fuzzy subtypes only if we encountered fuzzy\n      // subtype strings in addPossibleTypes, and only while writing to\n      // the cache, since that's when selectionSetMatchesResult gives a\n      // strong signal of fragment matching. The StoreReader class calls\n      // policies.fragmentMatches without passing a result object, so\n      // needToCheckFuzzySubtypes is always false while reading.\n      let needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n      let checkingFuzzySubtypes = false;\n\n      // It's important to keep evaluating workQueue.length each time through\n      // the loop, because the queue can grow while we're iterating over it.\n      for (let i = 0; i < workQueue.length; ++i) {\n        const supertypeSet = workQueue[i];\n\n        if (supertypeSet.has(supertype)) {\n          if (!typenameSupertypeSet.has(supertype)) {\n            if (checkingFuzzySubtypes) {\n              invariant.warn(\n                `Inferring subtype %s of supertype %s`,\n                typename,\n                supertype\n              );\n            }\n            // Record positive results for faster future lookup.\n            // Unfortunately, we cannot safely cache negative results,\n            // because new possibleTypes data could always be added to the\n            // Policies class.\n            typenameSupertypeSet.add(supertype);\n          }\n          return true;\n        }\n\n        supertypeSet.forEach(maybeEnqueue);\n\n        if (\n          needToCheckFuzzySubtypes &&\n          // Start checking fuzzy subtypes only after exhausting all\n          // non-fuzzy subtypes (after the final iteration of the loop).\n          i === workQueue.length - 1 &&\n          // We could wait to compare fragment.selectionSet to result\n          // after we verify the supertype, but this check is often less\n          // expensive than that search, and we will have to do the\n          // comparison anyway whenever we find a potential match.\n          selectionSetMatchesResult(fragment.selectionSet, result!, variables)\n        ) {\n          // We don't always need to check fuzzy subtypes (if no result\n          // was provided, or !this.fuzzySubtypes.size), but, when we do,\n          // we only want to check them once.\n          needToCheckFuzzySubtypes = false;\n          checkingFuzzySubtypes = true;\n\n          // If we find any fuzzy subtypes that match typename, extend the\n          // workQueue to search through the supertypes of those fuzzy\n          // subtypes. Otherwise the for-loop will terminate and we'll\n          // return false below.\n          this.fuzzySubtypes.forEach((regExp, fuzzyString) => {\n            const match = typename.match(regExp);\n            if (match && match[0] === typename) {\n              maybeEnqueue(fuzzyString);\n            }\n          });\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public hasKeyArgs(typename: string | undefined, fieldName: string) {\n    const policy = this.getFieldPolicy(typename, fieldName);\n    return !!(policy && policy.keyFn);\n  }\n\n  public getStoreFieldName(fieldSpec: FieldSpecifier): string {\n    const { typename, fieldName } = fieldSpec;\n    const policy = this.getFieldPolicy(typename, fieldName);\n    let storeFieldName: Exclude<ReturnType<KeyArgsFunction>, KeySpecifier>;\n\n    let keyFn = policy && policy.keyFn;\n    if (keyFn && typename) {\n      const context: Parameters<KeyArgsFunction>[1] = {\n        typename,\n        fieldName,\n        field: fieldSpec.field || null,\n        variables: fieldSpec.variables,\n      };\n      const args = argsFromFieldSpecifier(fieldSpec);\n      while (keyFn) {\n        const specifierOrString = keyFn(args, context);\n        if (isArray(specifierOrString)) {\n          keyFn = keyArgsFnFromSpecifier(specifierOrString);\n        } else {\n          // If the custom keyFn returns a falsy value, fall back to\n          // fieldName instead.\n          storeFieldName = specifierOrString || fieldName;\n          break;\n        }\n      }\n    }\n\n    if (storeFieldName === void 0) {\n      storeFieldName =\n        fieldSpec.field ?\n          storeKeyNameFromField(fieldSpec.field, fieldSpec.variables)\n        : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n    }\n\n    // Returning false from a keyArgs function is like configuring\n    // keyArgs: false, but more dynamic.\n    if (storeFieldName === false) {\n      return fieldName;\n    }\n\n    // Make sure custom field names start with the actual field.name.value\n    // of the field, so we can always figure out which properties of a\n    // StoreObject correspond to which original field names.\n    return fieldName === fieldNameFromStoreName(storeFieldName) ? storeFieldName\n      : fieldName + \":\" + storeFieldName;\n  }\n\n  public readField<V = StoreValue>(\n    options: ReadFieldOptions,\n    context: ReadMergeModifyContext\n  ): SafeReadonly<V> | undefined {\n    const objectOrReference = options.from;\n    if (!objectOrReference) return;\n\n    const nameOrField = options.field || options.fieldName;\n    if (!nameOrField) return;\n\n    if (options.typename === void 0) {\n      const typename = context.store.getFieldValue<string>(\n        objectOrReference,\n        \"__typename\"\n      );\n      if (typename) options.typename = typename;\n    }\n\n    const storeFieldName = this.getStoreFieldName(options);\n    const fieldName = fieldNameFromStoreName(storeFieldName);\n    const existing = context.store.getFieldValue<V>(\n      objectOrReference,\n      storeFieldName\n    );\n    const policy = this.getFieldPolicy(options.typename, fieldName);\n    const read = policy && policy.read;\n\n    if (read) {\n      const readOptions = makeFieldFunctionOptions(\n        this,\n        objectOrReference,\n        options,\n        context,\n        context.store.getStorage(\n          isReference(objectOrReference) ?\n            objectOrReference.__ref\n          : objectOrReference,\n          storeFieldName\n        )\n      );\n\n      // Call read(existing, readOptions) with cacheSlot holding this.cache.\n      return cacheSlot.withValue(this.cache, read, [\n        existing,\n        readOptions,\n      ]) as SafeReadonly<V>;\n    }\n\n    return existing;\n  }\n\n  public getReadFunction(\n    typename: string | undefined,\n    fieldName: string\n  ): FieldReadFunction | undefined {\n    const policy = this.getFieldPolicy(typename, fieldName);\n    return policy && policy.read;\n  }\n\n  public getMergeFunction(\n    parentTypename: string | undefined,\n    fieldName: string,\n    childTypename: string | undefined\n  ): FieldMergeFunction | undefined {\n    let policy:\n      | Policies[\"typePolicies\"][string]\n      | Policies[\"typePolicies\"][string][\"fields\"][string]\n      | undefined = this.getFieldPolicy(parentTypename, fieldName);\n    let merge = policy && policy.merge;\n    if (!merge && childTypename) {\n      policy = this.getTypePolicy(childTypename);\n      merge = policy && policy.merge;\n    }\n    return merge;\n  }\n\n  public runMergeFunction(\n    existing: StoreValue,\n    incoming: StoreValue,\n    { field, typename, merge }: MergeInfo,\n    context: WriteContext,\n    storage?: StorageType\n  ) {\n    if (merge === mergeTrueFn) {\n      // Instead of going to the trouble of creating a full\n      // FieldFunctionOptions object and calling mergeTrueFn, we can\n      // simply call mergeObjects, as mergeTrueFn would.\n      return makeMergeObjectsFunction(context.store)(\n        existing as StoreObject,\n        incoming as StoreObject\n      );\n    }\n\n    if (merge === mergeFalseFn) {\n      // Likewise for mergeFalseFn, whose implementation is even simpler.\n      return incoming;\n    }\n\n    // If cache.writeQuery or cache.writeFragment was called with\n    // options.overwrite set to true, we still call merge functions, but\n    // the existing data is always undefined, so the merge function will\n    // not attempt to combine the incoming data with the existing data.\n    if (context.overwrite) {\n      existing = void 0;\n    }\n\n    return merge(\n      existing,\n      incoming,\n      makeFieldFunctionOptions(\n        this,\n        // Unlike options.readField for read functions, we do not fall\n        // back to the current object if no foreignObjOrRef is provided,\n        // because it's not clear what the current object should be for\n        // merge functions: the (possibly undefined) existing object, or\n        // the incoming object? If you think your merge function needs\n        // to read sibling fields in order to produce a new value for\n        // the current field, you might want to rethink your strategy,\n        // because that's a recipe for making merge behavior sensitive\n        // to the order in which fields are written into the cache.\n        // However, readField(name, ref) is useful for merge functions\n        // that need to deduplicate child objects and references.\n        void 0,\n        {\n          typename,\n          fieldName: field.name.value,\n          field,\n          variables: context.variables,\n        },\n        context,\n        storage || {}\n      )\n    );\n  }\n}\n\nfunction makeFieldFunctionOptions(\n  policies: Policies,\n  objectOrReference: StoreObject | Reference | undefined,\n  fieldSpec: FieldSpecifier,\n  context: ReadMergeModifyContext,\n  storage: StorageType\n): FieldFunctionOptions {\n  const storeFieldName = policies.getStoreFieldName(fieldSpec);\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const variables = fieldSpec.variables || context.variables;\n  const { toReference, canRead } = context.store;\n\n  return {\n    args: argsFromFieldSpecifier(fieldSpec),\n    field: fieldSpec.field || null,\n    fieldName,\n    storeFieldName,\n    variables,\n    isReference,\n    toReference,\n    storage,\n    cache: policies.cache,\n    canRead,\n    readField<T>(...args: any[]) {\n      return policies.readField<T>(\n        normalizeReadFieldOptions(args, objectOrReference, variables),\n        context\n      );\n    },\n    mergeObjects: makeMergeObjectsFunction(context.store),\n  };\n}\n\nexport function normalizeReadFieldOptions(\n  readFieldArgs: any[],\n  objectOrReference: StoreObject | Reference | undefined,\n  variables?: ReadMergeModifyContext[\"variables\"]\n): ReadFieldOptions {\n  const { 0: fieldNameOrOptions, 1: from, length: argc } = readFieldArgs;\n\n  let options: ReadFieldOptions;\n\n  if (typeof fieldNameOrOptions === \"string\") {\n    options = {\n      fieldName: fieldNameOrOptions,\n      // Default to objectOrReference only when no second argument was\n      // passed for the from parameter, not when undefined is explicitly\n      // passed as the second argument.\n      from: argc > 1 ? from : objectOrReference,\n    };\n  } else {\n    options = { ...fieldNameOrOptions };\n    // Default to objectOrReference only when fieldNameOrOptions.from is\n    // actually omitted, rather than just undefined.\n    if (!hasOwn.call(options, \"from\")) {\n      options.from = objectOrReference;\n    }\n  }\n\n  if (__DEV__ && options.from === void 0) {\n    invariant.warn(\n      `Undefined 'from' passed to readField with arguments %s`,\n      stringifyForDisplay(Array.from(readFieldArgs))\n    );\n  }\n\n  if (void 0 === options.variables) {\n    options.variables = variables;\n  }\n\n  return options;\n}\n\nfunction makeMergeObjectsFunction(\n  store: NormalizedCache\n): MergeObjectsFunction {\n  return function mergeObjects(existing, incoming) {\n    if (isArray(existing) || isArray(incoming)) {\n      throw newInvariantError(\"Cannot automatically merge arrays\");\n    }\n\n    // These dynamic checks are necessary because the parameters of a\n    // custom merge function can easily have the any type, so the type\n    // system cannot always enforce the StoreObject | Reference parameter\n    // types of options.mergeObjects.\n    if (isNonNullObject(existing) && isNonNullObject(incoming)) {\n      const eType = store.getFieldValue(existing, \"__typename\");\n      const iType = store.getFieldValue(incoming, \"__typename\");\n      const typesDiffer = eType && iType && eType !== iType;\n\n      if (typesDiffer) {\n        return incoming;\n      }\n\n      if (isReference(existing) && storeValueIsStoreObject(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // existing.__ref, preferring/overwriting any fields contributed by the\n        // newer incoming StoreObject.\n        store.merge(existing.__ref, incoming);\n        return existing;\n      }\n\n      if (storeValueIsStoreObject(existing) && isReference(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // incoming.__ref, taking fields from the older existing object only if\n        // those fields are not already present in the newer StoreObject\n        // identified by incoming.__ref.\n        store.merge(existing, incoming.__ref);\n        return incoming;\n      }\n\n      if (\n        storeValueIsStoreObject(existing) &&\n        storeValueIsStoreObject(incoming)\n      ) {\n        return { ...existing, ...incoming };\n      }\n    }\n\n    return incoming;\n  };\n}\n","import type { ASTNode, print } from \"graphql\";\nimport { Observable } from \"rxjs\";\n\nimport { ApolloLink } from \"@apollo/client/link\";\nimport { filterOperationVariables } from \"@apollo/client/link/utils\";\nimport {\n  isMutationOperation,\n  isSubscriptionOperation,\n} from \"@apollo/client/utilities\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport { compact } from \"@apollo/client/utilities/internal\";\nimport { maybe } from \"@apollo/client/utilities/internal/globals\";\n\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport {\n  parseAndCheckHttpResponse,\n  readMultipartBody,\n} from \"./parseAndCheckHttpResponse.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport {\n  defaultPrinter,\n  fallbackHttpConfig,\n  selectHttpOptionsAndBodyInternal,\n} from \"./selectHttpOptionsAndBody.js\";\nimport { selectURI } from \"./selectURI.js\";\n\nconst backupFetch = maybe(() => fetch);\nfunction noop() {}\n\nexport declare namespace BaseHttpLink {\n  /**\n   * Options passed to `BaseHttpLink` through [request context](https://apollographql.com/docs/react/api/link/introduction#managing-context). Previous\n   * non-terminating links in the link chain also can set these values to\n   * customize the behavior of `BaseHttpLink` for each operation.\n   *\n   * > [!NOTE]\n   * > Some of these values can also be provided to the `HttpLink` constructor.\n   * > If a value is provided to both, the value in `context` takes precedence.\n   */\n  interface ContextOptions {\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#uri:member} */\n    uri?: string | BaseHttpLink.UriFunction;\n\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#headers:member} */\n    headers?: Record<string, string>;\n\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#credentials:member} */\n    credentials?: RequestCredentials;\n\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#fetchOptions:member} */\n    fetchOptions?: RequestInit;\n\n    /**\n     * An object that configures advanced functionality, such as support for\n     * persisted queries.\n     */\n    http?: BaseHttpLink.HttpOptions;\n  }\n\n  /**\n   * Options passed to `BaseHttpLink` through the `http` property of a request\n   * context.\n   */\n  export interface HttpOptions {\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#includeExtensions:member} */\n    includeExtensions?: boolean;\n\n    /**\n     * If `false`, the GraphQL query string is not included in the request. Set\n     * this option if you're sending a request that uses a [persisted query](https://www.apollographql.com/docs/react/api/link/persisted-queries/).\n     *\n     * @defaultValue `true`\n     */\n    includeQuery?: boolean;\n\n    /** {@inheritDoc @apollo/client/link/http!BaseHttpLink.Shared.Options#preserveHeaderCase:member} */\n    preserveHeaderCase?: boolean;\n\n    /**\n     * A list of additional `accept` headers to include in the request,\n     * as defined in https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.2\n     *\n     * @example\n     *\n     * ```json\n     * [\"application/custom+json;q=1.0\"]\n     * ```\n     */\n    accept?: string[];\n  }\n\n  export namespace Shared {\n    /** These options are shared between `BaseHttpLink` and `BaseBatchHttpLink` */\n    export interface Options {\n      /**\n       * The URL of the GraphQL endpoint to send requests to. Can also be a\n       * function that accepts an `ApolloLink.Operation` object and returns the\n       * string URL to use for that operation.\n       *\n       * @defaultValue \"/graphql\"\n       */\n      uri?: string | BaseHttpLink.UriFunction;\n\n      /**\n       * If `true`, includes the `extensions` field in operations sent to your\n       * GraphQL endpoint.\n       *\n       * @defaultValue true\n       */\n      includeExtensions?: boolean;\n\n      /**\n       * A function to use instead of calling the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch) directly\n       * when sending HTTP requests to your GraphQL endpoint. The function must\n       * conform to the signature of `fetch`.\n       *\n       * By default, the Fetch API is used unless it isn't available in your\n       * runtime environment.\n       *\n       * See [Customizing `fetch`](https://apollographql.com/docs/react/api/link/introduction#customizing-fetch).\n       */\n      fetch?: typeof fetch;\n\n      /**\n       * An object representing headers to include in every HTTP request.\n       *\n       * @example\n       *\n       * ```json\n       * {\n       *   \"Authorization\": \"Bearer 1234\"\n       * }\n       * ```\n       */\n      headers?: Record<string, string>;\n\n      /**\n       * If `true`, header names won't be automatically normalized to lowercase.\n       * This allows for non-http-spec-compliant servers that might expect\n       * capitalized header names.\n       *\n       * @defaultValue false\n       */\n      preserveHeaderCase?: boolean;\n\n      /**\n       * The credentials policy to use for each `fetch` call.\n       */\n      credentials?: RequestCredentials;\n\n      /**\n       * Any overrides of the fetch options argument to pass to the fetch call.\n       *\n       * An object containing options to use for each call to `fetch`. If a\n       * particular option is not included in this object, the default value of\n       * that option is used.\n       *\n       * > [!NOTE]\n       * > If you set `fetchOptions.method` to `GET`, `HttpLink` follows [standard\n       * > GraphQL HTTP GET encoding](http://graphql.org/learn/serving-over-http/#get-request).\n       *\n       * See [available options](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n       */\n      fetchOptions?: RequestInit;\n\n      /**\n       * If `true`, unused variables from the operation will not be stripped from\n       * the request and will instead be sent to the GraphQL endpoint.\n       *\n       * @remarks\n       * Unused variables are likely to trigger server-side validation errors,\n       * per https://spec.graphql.org/draft/#sec-All-Variables-Used.\n       * `includeUnusedVariables` can be useful if your server deviates\n       * from the GraphQL specification by not strictly enforcing that rule.\n       *\n       * @defaultValue false\n       */\n      includeUnusedVariables?: boolean;\n      /**\n       * A function to use when transforming a GraphQL document into a string. It\n       * accepts an `ASTNode` (typically a `DocumentNode`) and the original `print`\n       * function as arguments, and is expected to return a string. This option\n       * enables you to, for example, use `stripIgnoredCharacters` to remove\n       * whitespace from queries.\n       *\n       * By default the [GraphQL `print` function](https://graphql.org/graphql-js/language/#print) is used.\n       *\n       * @example\n       *\n       * ```ts\n       * import { stripIgnoredCharacters } from \"graphql\";\n       *\n       * const httpLink = new HttpLink({\n       *   uri: \"/graphql\",\n       *   print: (ast, originalPrint) => stripIgnoredCharacters(originalPrint(ast)),\n       * });\n       * ```\n       */\n      print?: BaseHttpLink.Printer;\n    }\n  }\n\n  /**\n   * Options provided to the `BaseHttpLink` constructor.\n   *\n   * > [!NOTE]\n   * > Some of these options are also available to override in [request context](https://apollographql.com/docs/react/api/link/introduction#managing-context).\n   * > Context options override the options passed to the constructor. Treat\n   * > these options as default values that are used when the request context\n   * > does not override the value.\n   */\n  interface Options extends Shared.Options {\n    /**\n     * If `true`, the link uses an HTTP `GET` request when sending query\n     * operations to your GraphQL endpoint. Mutation operations continue to use\n     * `POST` requests. If you want all operations to use `GET` requests,\n     * set `fetchOptions.method` instead.\n     *\n     * @defaultValue false\n     */\n    useGETForQueries?: boolean;\n  }\n\n  interface Body {\n    query?: string;\n    operationName?: string;\n    variables?: Record<string, any>;\n    extensions?: Record<string, any>;\n  }\n\n  type Printer = (node: ASTNode, originalPrint: typeof print) => string;\n  type UriFunction = (operation: ApolloLink.Operation) => string;\n}\n\n/**\n * `BaseHttpLink` is a terminating link that sends a GraphQL operation to a\n * remote endpoint over HTTP. It serves as a base link to `HttpLink`.\n *\n * @remarks\n *\n * `BaseHttpLink` supports both POST and GET requests, and you can configure\n * HTTP options on a per-operation basis. You can use these options for\n * authentication, persisted queries, dynamic URIs, and other granular updates.\n *\n * > [!NOTE]\n * > Prefer using `HttpLink` over `BaseHttpLink`. Use `BaseHttpLink` when you\n * > need to disable client awareness features and would like to tree-shake\n * > the implementation of `ClientAwarenessLink` out of your app bundle.\n *\n * @example\n *\n * ```ts\n * import { BaseHttpLink } from \"@apollo/client/link/http\";\n *\n * const link = new BaseHttpLink({\n *   uri: \"http://localhost:4000/graphql\",\n *   headers: {\n *     authorization: `Bearer ${token}`,\n *   },\n * });\n * ```\n */\nexport class BaseHttpLink extends ApolloLink {\n  constructor(options: BaseHttpLink.Options = {}) {\n    let {\n      uri = \"/graphql\",\n      // use default global fetch if nothing passed in\n      fetch: preferredFetch,\n      print = defaultPrinter,\n      includeExtensions,\n      preserveHeaderCase,\n      useGETForQueries,\n      includeUnusedVariables = false,\n      ...requestOptions\n    } = options;\n\n    if (__DEV__) {\n      // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n      // defined, so requests won't fail at runtime.\n      checkFetcher(preferredFetch || backupFetch);\n    }\n\n    const linkConfig = {\n      http: compact({ includeExtensions, preserveHeaderCase }),\n      options: requestOptions.fetchOptions,\n      credentials: requestOptions.credentials,\n      headers: requestOptions.headers,\n    };\n\n    super((operation) => {\n      let chosenURI = selectURI(operation, uri);\n\n      const context = operation.getContext();\n\n      const http = { ...context.http };\n      if (isSubscriptionOperation(operation.query)) {\n        http.accept = [\n          \"multipart/mixed;boundary=graphql;subscriptionSpec=1.0\",\n          ...(http.accept || []),\n        ];\n      }\n\n      const contextConfig = {\n        http,\n        options: context.fetchOptions,\n        credentials: context.credentials,\n        headers: context.headers,\n      };\n\n      //uses fallback, link, and then context to build options\n      const { options, body } = selectHttpOptionsAndBodyInternal(\n        operation,\n        print,\n        fallbackHttpConfig,\n        linkConfig,\n        contextConfig\n      );\n\n      if (body.variables && !includeUnusedVariables) {\n        body.variables = filterOperationVariables(\n          body.variables,\n          operation.query\n        );\n      }\n\n      let controller: AbortController | undefined = new AbortController();\n      let cleanupController = () => {\n        controller = undefined;\n      };\n      if (options.signal) {\n        const externalSignal: AbortSignal = options.signal;\n        // in an ideal world we could use `AbortSignal.any` here, but\n        // React Native uses https://github.com/mysticatea/abort-controller as\n        // a polyfill for `AbortController`, and it does not support `AbortSignal.any`.\n\n        const listener = () => {\n          controller?.abort(externalSignal.reason);\n        };\n        externalSignal.addEventListener(\"abort\", listener, { once: true });\n        cleanupController = () => {\n          controller?.signal.removeEventListener(\"abort\", cleanupController);\n          controller = undefined;\n          // on cleanup, we need to stop listening to `options.signal` to avoid memory leaks\n          externalSignal.removeEventListener(\"abort\", listener);\n          cleanupController = noop;\n        };\n        // react native also does not support the addEventListener `signal` option\n        // so we have to simulate that ourself\n        controller.signal.addEventListener(\"abort\", cleanupController, {\n          once: true,\n        });\n      }\n      options.signal = controller.signal;\n\n      if (useGETForQueries && !isMutationOperation(operation.query)) {\n        options.method = \"GET\";\n      }\n\n      return new Observable((observer) => {\n        if (options.method === \"GET\") {\n          const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n          if (parseError) {\n            throw parseError;\n          }\n          chosenURI = newURI;\n        } else {\n          options.body = JSON.stringify(body);\n        }\n        // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n        // fall back to the *current* global window.fetch function (see issue\n        // #7832), or (if all else fails) the backupFetch function we saved when\n        // this module was first evaluated. This last option protects against the\n        // removal of window.fetch, which is unlikely but not impossible.\n        const currentFetch =\n          preferredFetch || maybe(() => fetch) || backupFetch;\n\n        const observerNext = observer.next.bind(observer);\n        currentFetch!(chosenURI, options)\n          .then((response) => {\n            operation.setContext({ response });\n            const ctype = response.headers?.get(\"content-type\");\n\n            if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n              return readMultipartBody(response, observerNext);\n            } else {\n              return parseAndCheckHttpResponse(operation)(response).then(\n                observerNext\n              );\n            }\n          })\n          .then(() => {\n            cleanupController();\n            observer.complete();\n          })\n          .catch((err) => {\n            cleanupController();\n            observer.error(err);\n          });\n\n        return () => {\n          // XXX support canceling this request\n          // https://developers.google.com/web/updates/2017/09/abortable-fetch\n          if (controller) controller.abort();\n        };\n      });\n    });\n  }\n}\n","import type {\n  DocumentNode,\n  FormattedExecutionResult,\n  OperationTypeNode,\n} from \"graphql\";\nimport type { Observable } from \"rxjs\";\nimport { EMPTY } from \"rxjs\";\n\nimport type {\n  ApolloClient,\n  DefaultContext,\n  OperationVariables,\n} from \"@apollo/client\";\nimport type { TypeOverrides } from \"@apollo/client\";\nimport type { NotImplementedHandler } from \"@apollo/client/incremental\";\nimport { createOperation } from \"@apollo/client/link/utils\";\nimport { __DEV__ } from \"@apollo/client/utilities/environment\";\nimport type { ApplyHKTImplementationWithDefault } from \"@apollo/client/utilities/internal\";\nimport {\n  invariant,\n  newInvariantError,\n} from \"@apollo/client/utilities/invariant\";\n\nexport declare namespace ApolloLink {\n  /**\n   * Context provided for link execution, such as the client executing the\n   * request. It is separate from the request operation context.\n   */\n  export interface ExecuteContext {\n    /**\n     * The Apollo Client instance that executed the GraphQL request.\n     */\n    client: ApolloClient;\n  }\n\n  /** {@inheritDoc @apollo/client/link!ApolloLink.DocumentationTypes.ForwardFunction:function(1)} */\n  export type ForwardFunction = (\n    operation: ApolloLink.Operation\n  ) => Observable<ApolloLink.Result>;\n\n  /**\n   * The input object provided to `ApolloLink.execute` to send a GraphQL request through\n   * the link chain.\n   */\n  export interface Request {\n    /**\n     * The parsed GraphQL document that will be sent with the GraphQL request to\n     * the server.\n     */\n    query: DocumentNode;\n\n    /**\n     * The variables provided for the query.\n     */\n    variables?: OperationVariables;\n\n    /**\n     * Context provided to the link chain. Context is not sent to the server and\n     * is used to communicate additional metadata from a request to individual\n     * links in the link chain.\n     */\n    context?: DefaultContext;\n\n    /**\n     * A map of extensions that will be sent with the GraphQL request to the\n     * server.\n     */\n    extensions?: Record<string, any>;\n  }\n\n  /** {@inheritDoc @apollo/client/link!ApolloLink.DocumentationTypes.RequestHandler:function(1)} */\n  export type RequestHandler = (\n    operation: ApolloLink.Operation,\n    forward: ApolloLink.ForwardFunction\n  ) => Observable<ApolloLink.Result>;\n\n  export type AdditionalResultTypes<\n    TData = Record<string, any>,\n    TExtensions = Record<string, any>,\n  > = ApplyHKTImplementationWithDefault<\n    TypeOverrides,\n    \"AdditionalApolloLinkResultTypes\",\n    NotImplementedHandler.TypeOverrides,\n    TData,\n    TExtensions\n  >;\n\n  export type Result<\n    TData = Record<string, any>,\n    TExtensions = Record<string, any>,\n  > =\n    | FormattedExecutionResult<TData, TExtensions>\n    | AdditionalResultTypes<TData, TExtensions>;\n\n  /**\n   * The currently executed operation object provided to an `ApolloLink.RequestHandler`\n   * for each link in the link chain.\n   */\n  export interface Operation {\n    /**\n     * A `DocumentNode` that describes the operation taking place.\n     */\n    query: DocumentNode;\n\n    /**\n     * A map of GraphQL variables being sent with the operation.\n     */\n    variables: OperationVariables;\n\n    /**\n     * The string name of the GraphQL operation. If it is anonymous,\n     * `operationName` will be `undefined`.\n     */\n    operationName: string | undefined;\n\n    /**\n     * The type of the GraphQL operation, such as query or mutation.\n     */\n    operationType: OperationTypeNode;\n\n    /**\n     * A map that stores extensions data to be sent to the server.\n     */\n    extensions: Record<string, any>;\n\n    /**\n     * A function that takes either a new context object, or a function which\n     * takes in the previous context and returns a new one. See [managing\n     * context](https://apollographql.com/docs/react/api/link/introduction#managing-context).\n     */\n    setContext: {\n      (context: Partial<ApolloLink.OperationContext>): void;\n      (\n        updateContext: (\n          previousContext: Readonly<ApolloLink.OperationContext>\n        ) => Partial<ApolloLink.OperationContext>\n      ): void;\n    };\n\n    /**\n     * A function that gets the current context of the request. This can be used\n     * by links to determine which actions to perform. See [managing context](https://apollographql.com/docs/react/api/link/introduction#managing-context)\n     */\n    getContext: () => Readonly<ApolloLink.OperationContext>;\n\n    /**\n     * The Apollo Client instance executing the request.\n     */\n    readonly client: ApolloClient;\n  }\n\n  /**\n   * The `context` object that can be read and modified by links using the\n   * `operation.getContext()` and `operation.setContext()` methods.\n   */\n  export interface OperationContext extends DefaultContext {}\n\n  export namespace DocumentationTypes {\n    /**\n     * A request handler is responsible for performing some logic and executing the\n     * request, either by [forwarding](https://apollographql.com/docs/react/api/link/introduction#the-request-handler) the operation to the next link in the\n     * chain, or sending the operation to the destination that executes it, such as\n     * a GraphQL server.\n     *\n     * @param operation - The `Operation` object that provides information about the\n     * currently executed GraphQL request.\n     *\n     * @param forward - A function that is called to execute the next link in the\n     * chain.\n     */\n    export function RequestHandler(\n      operation: ApolloLink.Operation,\n      forward: ApolloLink.ForwardFunction\n    ): Observable<ApolloLink.Result>;\n\n    /**\n     * A function that when called will execute the next link in the link chain.\n     *\n     * @example\n     *\n     * ```ts\n     * const link = new ApolloLink((operation, forward) => {\n     *   // process the request\n     *\n     *   // Call `forward` to execute the next link in the chain\n     *   return forward(operation);\n     * });\n     * ```\n     *\n     * @param operation - The current `ApolloLink.Operation` object for the\n     * request.\n     */\n    export function ForwardFunction(\n      operation: ApolloLink.Operation\n    ): Observable<ApolloLink.Result>;\n  }\n}\n\n/**\n * The base class for all links in Apollo Client. A link represents either a\n * self-contained modification to a GraphQL operation or a side effect (such as\n * logging).\n *\n * @remarks\n *\n * Links enable you to customize Apollo Client's request flow by composing\n * together different pieces of functionality into a chain of links. Each\n * link represents a specific capability, such as adding authentication headers,\n * retrying failed requests, batching operations, or sending requests to a\n * GraphQL server.\n *\n * Every link must define a request handler via its constructor or by extending\n * this class and implementing the `request` method.\n *\n * @example\n *\n * ```ts\n * import { ApolloLink } from \"@apollo/client\";\n *\n * const link = new ApolloLink((operation, forward) => {\n *   console.log(\"Operation:\", operation.operationName);\n *   return forward(operation);\n * });\n * ```\n */\nexport class ApolloLink {\n  /**\n   * Creates a link that completes immediately and does not emit a result.\n   *\n   * @example\n   *\n   * ```ts\n   * const link = ApolloLink.empty();\n   * ```\n   */\n  public static empty(): ApolloLink {\n    return new ApolloLink(() => EMPTY);\n  }\n\n  /**\n   * Composes multiple links into a single composed link that executes each\n   * provided link in serial order.\n   *\n   * @example\n   *\n   * ```ts\n   * import { from, HttpLink, ApolloLink } from \"@apollo/client\";\n   * import { RetryLink } from \"@apollo/client/link/retry\";\n   * import MyAuthLink from \"../auth\";\n   *\n   * const link = ApolloLink.from([\n   *   new RetryLink(),\n   *   new MyAuthLink(),\n   *   new HttpLink({ uri: \"http://localhost:4000/graphql\" }),\n   * ]);\n   * ```\n   *\n   * @param links - An array of `ApolloLink` instances or request handlers that\n   * are executed in serial order.\n   */\n  public static from(links: ApolloLink[]): ApolloLink {\n    if (links.length === 0) return ApolloLink.empty();\n\n    const [first, ...rest] = links;\n    return first.concat(...rest);\n  }\n\n  /**\n   * Creates a link that conditionally routes a request to different links.\n   *\n   * @example\n   *\n   * ```ts\n   * import { ApolloLink, HttpLink } from \"@apollo/client\";\n   *\n   * const link = ApolloLink.split(\n   *   (operation) => operation.getContext().version === 1,\n   *   new HttpLink({ uri: \"http://localhost:4000/v1/graphql\" }),\n   *   new HttpLink({ uri: \"http://localhost:4000/v2/graphql\" })\n   * );\n   * ```\n   *\n   * @param test - A predicate function that receives the current `operation`\n   * and returns a boolean indicating which link to execute. Returning `true`\n   * executes the `left` link. Returning `false` executes the `right` link.\n   *\n   * @param left - The link that executes when the `test` function returns\n   * `true`.\n   *\n   * @param right - The link that executes when the `test` function returns\n   * `false`. If the `right` link is not provided, the request is forwarded to\n   * the next link in the chain.\n   */\n  public static split(\n    test: (op: ApolloLink.Operation) => boolean,\n    left: ApolloLink,\n    right: ApolloLink = new ApolloLink((op, forward) => forward(op))\n  ): ApolloLink {\n    const link = new ApolloLink((operation, forward) => {\n      const result = test(operation);\n\n      if (__DEV__) {\n        if (typeof result !== \"boolean\") {\n          invariant.warn(\n            \"[ApolloLink.split]: The test function returned a non-boolean value which could result in subtle bugs (e.g. such as using an `async` function which always returns a truthy value). Got `%o`.\",\n            result\n          );\n        }\n      }\n\n      return result ?\n          left.request(operation, forward)\n        : right.request(operation, forward);\n    });\n    return Object.assign(link, { left, right });\n  }\n\n  /**\n   * Executes a GraphQL request against a link. The `execute` function begins\n   * the request by calling the request handler of the link.\n   *\n   * @example\n   *\n   * ```ts\n   * const observable = ApolloLink.execute(link, { query, variables }, { client });\n   *\n   * observable.subscribe({\n   *   next(value) {\n   *     console.log(\"Received\", value);\n   *   },\n   *   error(error) {\n   *     console.error(\"Oops got error\", error);\n   *   },\n   *   complete() {\n   *     console.log(\"Request complete\");\n   *   },\n   * });\n   * ```\n   *\n   * @param link - The `ApolloLink` instance to execute the request.\n   *\n   * @param request - The GraphQL request details, such as the `query` and\n   * `variables`.\n   *\n   * @param context - The execution context for the request, such as the\n   * `client` making the request.\n   */\n  public static execute(\n    link: ApolloLink,\n    request: ApolloLink.Request,\n    context: ApolloLink.ExecuteContext\n  ): Observable<ApolloLink.Result> {\n    return link.request(createOperation(request, context), () => {\n      if (__DEV__) {\n        invariant.warn(\n          \"The terminating link provided to `ApolloLink.execute` called `forward` instead of handling the request. \" +\n            \"This results in an observable that immediately completes and does not emit a value. \" +\n            \"Please provide a terminating link that properly handles the request.\\n\\n\" +\n            \"If you are using a split link, ensure each branch contains a terminating link that handles the request.\"\n        );\n      }\n      return EMPTY;\n    });\n  }\n\n  /**\n   * Combines multiple links into a single composed link.\n   *\n   * @example\n   *\n   * ```ts\n   * const link = ApolloLink.concat(firstLink, secondLink, thirdLink);\n   * ```\n   *\n   * @param links - The links to concatenate into a single link. Each link will\n   * execute in serial order.\n   *\n   * @deprecated Use `ApolloLink.from` instead. `ApolloLink.concat` will be\n   * removed in a future major version.\n   */\n  public static concat(...links: ApolloLink[]) {\n    return ApolloLink.from(links);\n  }\n\n  constructor(request?: ApolloLink.RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  /**\n   * Concatenates a link that conditionally routes a request to different links.\n   *\n   * @example\n   *\n   * ```ts\n   * import { ApolloLink, HttpLink } from \"@apollo/client\";\n   *\n   * const previousLink = new ApolloLink((operation, forward) => {\n   *   // Handle the request\n   *\n   *   return forward(operation);\n   * });\n   *\n   * const link = previousLink.split(\n   *   (operation) => operation.getContext().version === 1,\n   *   new HttpLink({ uri: \"http://localhost:4000/v1/graphql\" }),\n   *   new HttpLink({ uri: \"http://localhost:4000/v2/graphql\" })\n   * );\n   * ```\n   *\n   * @param test - A predicate function that receives the current `operation`\n   * and returns a boolean indicating which link to execute. Returning `true`\n   * executes the `left` link. Returning `false` executes the `right` link.\n   *\n   * @param left - The link that executes when the `test` function returns\n   * `true`.\n   *\n   * @param right - The link that executes when the `test` function returns\n   * `false`. If the `right` link is not provided, the request is forwarded to\n   * the next link in the chain.\n   */\n  public split(\n    test: (op: ApolloLink.Operation) => boolean,\n    left: ApolloLink,\n    right?: ApolloLink\n  ): ApolloLink {\n    return this.concat(ApolloLink.split(test, left, right));\n  }\n\n  /**\n   * Combines the link with other links into a single composed link.\n   *\n   * @example\n   *\n   * ```ts\n   * import { ApolloLink, HttpLink } from \"@apollo/client\";\n   *\n   * const previousLink = new ApolloLink((operation, forward) => {\n   *   // Handle the request\n   *\n   *   return forward(operation);\n   * });\n   *\n   * const link = previousLink.concat(\n   *   link1,\n   *   link2,\n   *   new HttpLink({ uri: \"http://localhost:4000/graphql\" })\n   * );\n   * ```\n   */\n  public concat(...links: ApolloLink[]): ApolloLink {\n    if (links.length === 0) {\n      return this;\n    }\n\n    return links.reduce(this.combine.bind(this), this);\n  }\n\n  private combine(left: ApolloLink, right: ApolloLink) {\n    const link = new ApolloLink((operation, forward) => {\n      return left.request(operation, (op) => right.request(op, forward));\n    });\n\n    return Object.assign(link, { left, right });\n  }\n\n  /**\n   * Runs the request handler for the provided operation.\n   *\n   * > [!NOTE]\n   * > This is called by the `ApolloLink.execute` function for you and should\n   * > not be called directly. Prefer using `ApolloLink.execute` to make the\n   * > request instead.\n   */\n  public request(\n    operation: ApolloLink.Operation,\n    forward: ApolloLink.ForwardFunction\n  ): Observable<ApolloLink.Result> {\n    throw newInvariantError(\"request is not implemented\");\n  }\n\n  /**\n   * @internal\n   * Used to iterate through all links that are concatenations or `split` links.\n   */\n  readonly left?: ApolloLink;\n  /**\n   * @internal\n   * Used to iterate through all links that are concatenations or `split` links.\n   */\n  readonly right?: ApolloLink;\n\n  /**\n   * @internal\n   * Can be provided by a link that has an internal cache to report it's memory details.\n   */\n  declare getMemoryInternals?: () => unknown;\n}\n","import { equal } from \"@wry/equality\";\nimport type {\n  DirectiveNode,\n  DocumentNode,\n  FieldNode,\n  FragmentDefinitionNode,\n  FragmentSpreadNode,\n  InlineFragmentNode,\n  SelectionNode,\n  SelectionSetNode,\n} from \"graphql\";\n\nimport type { ObservableQuery } from \"@apollo/client\";\nimport type { OperationVariables } from \"@apollo/client\";\nimport type { FragmentMap } from \"@apollo/client/utilities/internal\";\n\nimport { createFragmentMap } from \"./createFragmentMap.js\";\nimport { getFragmentDefinitions } from \"./getFragmentDefinitions.js\";\nimport { getFragmentFromSelection } from \"./getFragmentFromSelection.js\";\nimport { getMainDefinition } from \"./getMainDefinition.js\";\nimport { isField } from \"./isField.js\";\nimport { resultKeyNameFromField } from \"./resultKeyNameFromField.js\";\nimport { shouldInclude } from \"./shouldInclude.js\";\n\n// Returns true if aResult and bResult are deeply equal according to the fields\n// selected by the given query, ignoring any fields marked as @nonreactive.\nexport function equalByQuery(\n  query: DocumentNode,\n  { data: aData, ...aRest }: Partial<ObservableQuery.Result<unknown>>,\n  { data: bData, ...bRest }: Partial<ObservableQuery.Result<unknown>>,\n  variables?: OperationVariables\n): boolean {\n  return (\n    equal(aRest, bRest) &&\n    equalBySelectionSet(getMainDefinition(query).selectionSet, aData, bData, {\n      fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n      variables,\n    })\n  );\n}\n\n// Encapsulates the information used by equalBySelectionSet that does not change\n// during the recursion.\ninterface CompareContext<TVariables extends OperationVariables> {\n  fragmentMap: FragmentMap;\n  variables: TVariables | undefined;\n}\n\nfunction equalBySelectionSet(\n  selectionSet: SelectionSetNode,\n  aResult: any,\n  bResult: any,\n  context: CompareContext<OperationVariables>\n): boolean {\n  if (aResult === bResult) {\n    return true;\n  }\n\n  const seenSelections = new Set<SelectionNode>();\n\n  // Returning true from this Array.prototype.every callback function skips the\n  // current field/subtree. Returning false aborts the entire traversal\n  // immediately, causing equalBySelectionSet to return false.\n  return selectionSet.selections.every((selection) => {\n    // Avoid re-processing the same selection at the same level of recursion, in\n    // case the same field gets included via multiple indirect fragment spreads.\n    if (seenSelections.has(selection)) return true;\n    seenSelections.add(selection);\n\n    // Ignore @skip(if: true) and @include(if: false) fields.\n    if (!shouldInclude(selection, context.variables)) return true;\n\n    // If the field or (named) fragment spread has a @nonreactive directive on\n    // it, we don't care if it's different, so we pretend it's the same.\n    if (selectionHasNonreactiveDirective(selection)) return true;\n\n    if (isField(selection)) {\n      const resultKey = resultKeyNameFromField(selection);\n      const aResultChild = aResult && aResult[resultKey];\n      const bResultChild = bResult && bResult[resultKey];\n      const childSelectionSet = selection.selectionSet;\n\n      if (!childSelectionSet) {\n        // These are scalar values, so we can compare them with deep equal\n        // without redoing the main recursive work.\n        return equal(aResultChild, bResultChild);\n      }\n\n      const aChildIsArray = Array.isArray(aResultChild);\n      const bChildIsArray = Array.isArray(bResultChild);\n      if (aChildIsArray !== bChildIsArray) return false;\n      if (aChildIsArray && bChildIsArray) {\n        const length = aResultChild.length;\n        if (bResultChild.length !== length) {\n          return false;\n        }\n        for (let i = 0; i < length; ++i) {\n          if (\n            !equalBySelectionSet(\n              childSelectionSet,\n              aResultChild[i],\n              bResultChild[i],\n              context\n            )\n          ) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      return equalBySelectionSet(\n        childSelectionSet,\n        aResultChild,\n        bResultChild,\n        context\n      );\n    } else {\n      const fragment = getFragmentFromSelection(selection, context.fragmentMap);\n      if (fragment) {\n        // The fragment might === selection if it's an inline fragment, but\n        // could be !== if it's a named fragment ...spread.\n        if (selectionHasNonreactiveDirective(fragment)) return true;\n\n        return equalBySelectionSet(\n          fragment.selectionSet,\n          // Notice that we reuse the same aResult and bResult values here,\n          // since the fragment ...spread does not specify a field name, but\n          // consists of multiple fields (within the fragment's selection set)\n          // that should be applied to the current result value(s).\n          aResult,\n          bResult,\n          context\n        );\n      }\n    }\n  });\n}\n\nfunction selectionHasNonreactiveDirective(\n  selection:\n    | FieldNode\n    | InlineFragmentNode\n    | FragmentSpreadNode\n    | FragmentDefinitionNode\n): boolean {\n  return (\n    !!selection.directives && selection.directives.some(directiveIsNonreactive)\n  );\n}\n\nfunction directiveIsNonreactive(dir: DirectiveNode): boolean {\n  return dir.name.value === \"nonreactive\";\n}\n",null,"import type {\n  DocumentNode,\n  FragmentDefinitionNode,\n  SelectionSetNode,\n} from \"graphql\";\n\nimport type {\n  Reference,\n  StoreObject,\n  StoreValue,\n} from \"@apollo/client/utilities\";\nimport { isReference } from \"@apollo/client/utilities\";\nimport type {\n  FragmentMap,\n  FragmentMapFunction,\n} from \"@apollo/client/utilities/internal\";\nimport {\n  compact,\n  createFragmentMap,\n  DeepMerger,\n  getFragmentDefinitions,\n  isArray,\n  isField,\n  isNonNullObject,\n  resultKeyNameFromField,\n  shouldInclude,\n} from \"@apollo/client/utilities/internal\";\n\nimport type { FragmentRegistryAPI } from \"./fragmentRegistry.js\";\nimport type { KeyFieldsContext } from \"./policies.js\";\nimport type { InMemoryCacheConfig, NormalizedCache } from \"./types.js\";\n\nexport const { hasOwnProperty: hasOwn } = Object.prototype;\n\nexport function defaultDataIdFromObject(\n  { __typename, id, _id }: Readonly<StoreObject>,\n  context?: KeyFieldsContext\n): string | undefined {\n  if (typeof __typename === \"string\") {\n    if (context) {\n      context.keyObject =\n        id != null ? { id }\n        : _id != null ? { _id }\n        : void 0;\n    }\n\n    // If there is no object.id, fall back to object._id.\n    if (id == null && _id != null) {\n      id = _id;\n    }\n\n    if (id != null) {\n      return `${__typename}:${\n        typeof id === \"number\" || typeof id === \"string\" ?\n          id\n        : JSON.stringify(id)\n      }`;\n    }\n  }\n}\n\nconst defaultConfig: InMemoryCacheConfig = {\n  dataIdFromObject: defaultDataIdFromObject,\n  resultCaching: true,\n};\n\nexport function normalizeConfig(config: InMemoryCacheConfig) {\n  return compact(defaultConfig, config);\n}\n\nexport function getTypenameFromStoreObject(\n  store: NormalizedCache,\n  objectOrReference: StoreObject | Reference\n): string | undefined {\n  return isReference(objectOrReference) ?\n      (store.get(objectOrReference.__ref, \"__typename\") as string)\n    : objectOrReference && objectOrReference.__typename;\n}\n\nexport const TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\n\nexport function fieldNameFromStoreName(storeFieldName: string): string {\n  const match = storeFieldName.match(TypeOrFieldNameRegExp);\n  return match ? match[0] : storeFieldName;\n}\n\nexport function selectionSetMatchesResult(\n  selectionSet: SelectionSetNode,\n  result: Record<string, any>,\n  variables?: Record<string, any>\n): boolean {\n  if (isNonNullObject(result)) {\n    return isArray(result) ?\n        result.every((item) =>\n          selectionSetMatchesResult(selectionSet, item, variables)\n        )\n      : selectionSet.selections.every((field) => {\n          if (isField(field) && shouldInclude(field, variables)) {\n            const key = resultKeyNameFromField(field);\n            return (\n              hasOwn.call(result, key) &&\n              (!field.selectionSet ||\n                selectionSetMatchesResult(\n                  field.selectionSet,\n                  result[key],\n                  variables\n                ))\n            );\n          }\n          // If the selection has been skipped with @skip(true) or\n          // @include(false), it should not count against the matching. If\n          // the selection is not a field, it must be a fragment (inline or\n          // named). We will determine if selectionSetMatchesResult for that\n          // fragment when we get to it, so for now we return true.\n          return true;\n        });\n  }\n  return false;\n}\n\nexport function storeValueIsStoreObject(\n  value: StoreValue\n): value is StoreObject {\n  return isNonNullObject(value) && !isReference(value) && !isArray(value);\n}\n\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger();\n}\n\nexport function extractFragmentContext(\n  document: DocumentNode,\n  fragments?: FragmentRegistryAPI\n): {\n  fragmentMap: FragmentMap;\n  lookupFragment: FragmentMapFunction;\n} {\n  // FragmentMap consisting only of fragments defined directly in document, not\n  // including other fragments registered in the FragmentRegistry.\n  const fragmentMap = createFragmentMap(getFragmentDefinitions(document));\n  return {\n    fragmentMap,\n    lookupFragment(name) {\n      let def: FragmentDefinitionNode | null = fragmentMap[name];\n      if (!def && fragments) {\n        def = fragments.lookup(name);\n      }\n      return def || null;\n    },\n  };\n}\n","// eslint-disable-next-line no-restricted-syntax\nexport * from \"./index.js\";\n\nfunction unsupported() {\n  throw new Error(\"only supported in development mode\");\n}\nexport const getApolloCacheMemoryInternals =\n    unsupported as typeof import(\"./getMemoryInternals.js\").getApolloCacheMemoryInternals,\n  getApolloClientMemoryInternals =\n    unsupported as typeof import(\"./getMemoryInternals.js\").getApolloClientMemoryInternals,\n  getInMemoryCacheMemoryInternals =\n    unsupported as typeof import(\"./getMemoryInternals.js\").getInMemoryCacheMemoryInternals;\n","import type { OptimisticDependencyFunction } from \"optimism\";\nimport { dep, Slot } from \"optimism\";\n\nimport type { ApolloCache } from \"@apollo/client\";\n\nimport type { InMemoryCache } from \"./inMemoryCache.js\";\n\nexport interface ReactiveVar<T> {\n  (newValue?: T): T;\n  onNextChange(listener: ReactiveListener<T>): () => void;\n  attachCache(cache: ApolloCache): this;\n  forgetCache(cache: ApolloCache): boolean;\n}\n\ntype ReactiveListener<T> = (value: T) => any;\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nexport const cacheSlot = new Slot<ApolloCache>();\n\nconst cacheInfoMap = new WeakMap<\n  ApolloCache,\n  {\n    vars: Set<ReactiveVar<any>>;\n    dep: OptimisticDependencyFunction<ReactiveVar<any>>;\n  }\n>();\n\nfunction getCacheInfo(cache: ApolloCache) {\n  let info = cacheInfoMap.get(cache)!;\n  if (!info) {\n    cacheInfoMap.set(\n      cache,\n      (info = {\n        vars: new Set(),\n        dep: dep(),\n      })\n    );\n  }\n  return info;\n}\n\nexport function forgetCache(cache: ApolloCache) {\n  getCacheInfo(cache).vars.forEach((rv) => rv.forgetCache(cache));\n}\n\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nexport function recallCache(cache: ApolloCache) {\n  getCacheInfo(cache).vars.forEach((rv) => rv.attachCache(cache));\n}\n\nexport function makeVar<T>(value: T): ReactiveVar<T> {\n  const caches = new Set<ApolloCache>();\n  const listeners = new Set<ReactiveListener<T>>();\n\n  const rv: ReactiveVar<T> = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue!;\n        caches.forEach((cache) => {\n          // Invalidate any fields with custom read functions that\n          // consumed this variable, so query results involving those\n          // fields will be recomputed the next time we read them.\n          getCacheInfo(cache).dep.dirty(rv);\n          // Broadcast changes to any caches that have previously read\n          // from this variable.\n          broadcast(cache);\n        });\n        // Finally, notify any listeners added via rv.onNextChange.\n        const oldListeners = Array.from(listeners);\n        listeners.clear();\n        oldListeners.forEach((listener) => listener(value));\n      }\n    } else {\n      // When reading from the variable, obtain the current cache from\n      // context via cacheSlot. This isn't entirely foolproof, but it's\n      // the same system that powers varDep.\n      const cache = cacheSlot.getValue();\n      if (cache) {\n        attach(cache);\n        getCacheInfo(cache).dep(rv);\n      }\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = (listener) => {\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n\n  const attach = (rv.attachCache = (cache) => {\n    caches.add(cache);\n    getCacheInfo(cache).vars.add(rv);\n    return rv;\n  });\n\n  rv.forgetCache = (cache) => caches.delete(cache);\n\n  return rv;\n}\n\ntype Broadcastable = ApolloCache & {\n  // This method is protected in InMemoryCache, which we are ignoring, but\n  // we still want some semblance of type safety when we call it.\n  broadcastWatches?: InMemoryCache[\"broadcastWatches\"];\n};\n\nfunction broadcast(cache: Broadcastable) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}\n","/**\n * Prints a string as a GraphQL StringValue literal. Replaces control characters\n * and excluded characters (\" U+0022 and \\\\ U+005C) with escape sequences.\n */\nexport function printString(str) {\n  return `\"${str.replace(escapedRegExp, escapedReplacer)}\"`;\n} // eslint-disable-next-line no-control-regex\n\nconst escapedRegExp = /[\\x00-\\x1f\\x22\\x5c\\x7f-\\x9f]/g;\n\nfunction escapedReplacer(str) {\n  return escapeSequences[str.charCodeAt(0)];\n} // prettier-ignore\n\nconst escapeSequences = [\n  '\\\\u0000',\n  '\\\\u0001',\n  '\\\\u0002',\n  '\\\\u0003',\n  '\\\\u0004',\n  '\\\\u0005',\n  '\\\\u0006',\n  '\\\\u0007',\n  '\\\\b',\n  '\\\\t',\n  '\\\\n',\n  '\\\\u000B',\n  '\\\\f',\n  '\\\\r',\n  '\\\\u000E',\n  '\\\\u000F',\n  '\\\\u0010',\n  '\\\\u0011',\n  '\\\\u0012',\n  '\\\\u0013',\n  '\\\\u0014',\n  '\\\\u0015',\n  '\\\\u0016',\n  '\\\\u0017',\n  '\\\\u0018',\n  '\\\\u0019',\n  '\\\\u001A',\n  '\\\\u001B',\n  '\\\\u001C',\n  '\\\\u001D',\n  '\\\\u001E',\n  '\\\\u001F',\n  '',\n  '',\n  '\\\\\"',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 2F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 3F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 4F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\\\\\',\n  '',\n  '',\n  '', // 5F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 6F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\u007F',\n  '\\\\u0080',\n  '\\\\u0081',\n  '\\\\u0082',\n  '\\\\u0083',\n  '\\\\u0084',\n  '\\\\u0085',\n  '\\\\u0086',\n  '\\\\u0087',\n  '\\\\u0088',\n  '\\\\u0089',\n  '\\\\u008A',\n  '\\\\u008B',\n  '\\\\u008C',\n  '\\\\u008D',\n  '\\\\u008E',\n  '\\\\u008F',\n  '\\\\u0090',\n  '\\\\u0091',\n  '\\\\u0092',\n  '\\\\u0093',\n  '\\\\u0094',\n  '\\\\u0095',\n  '\\\\u0096',\n  '\\\\u0097',\n  '\\\\u0098',\n  '\\\\u0099',\n  '\\\\u009A',\n  '\\\\u009B',\n  '\\\\u009C',\n  '\\\\u009D',\n  '\\\\u009E',\n  '\\\\u009F',\n];\n","/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport class Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport class Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\n/**\n * @internal\n */\nexport const QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nvar OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (OperationTypeNode = {}));\n\nexport { OperationTypeNode };\n","/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n","import type { ApolloLink } from \"@apollo/client/link\";\nimport {\n  getOperationDefinition,\n  getOperationName,\n} from \"@apollo/client/utilities/internal\";\n\nexport function createOperation(\n  request: ApolloLink.Request,\n  { client }: ApolloLink.ExecuteContext\n): ApolloLink.Operation {\n  const operation = {\n    query: request.query,\n    variables: request.variables || {},\n    extensions: request.extensions || {},\n    operationName: getOperationName(request.query),\n    operationType: getOperationDefinition(request.query)!.operation,\n  } satisfies Omit<\n    ApolloLink.Operation,\n    \"client\" | \"getContext\" | \"setContext\"\n  > as ApolloLink.Operation;\n\n  let context = { ...request.context };\n\n  const setContext: ApolloLink.Operation[\"setContext\"] = (next) => {\n    if (typeof next === \"function\") {\n      context = { ...context, ...next(getContext()) };\n    } else {\n      context = { ...context, ...next };\n    }\n  };\n  const getContext: ApolloLink.Operation[\"getContext\"] = () =>\n    Object.freeze({ ...context });\n\n  Object.defineProperty(operation, \"setContext\", {\n    enumerable: false,\n    value: setContext,\n  });\n\n  Object.defineProperty(operation, \"getContext\", {\n    enumerable: false,\n    value: getContext,\n  });\n\n  Object.defineProperty(operation, \"client\", {\n    enumerable: false,\n    value: client,\n  });\n\n  return operation;\n}\n","import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n","import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n","import type { DocumentNode, FragmentDefinitionNode } from \"graphql\";\n\n/** @internal */\nexport function getFragmentDefinitions(\n  doc: DocumentNode\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    (definition): definition is FragmentDefinitionNode =>\n      definition.kind === \"FragmentDefinition\"\n  );\n}\n","import type { DocumentNode, OperationDefinitionNode } from \"graphql\";\n\ntype OperationDefinitionWithName = OperationDefinitionNode & {\n  name: NonNullable<OperationDefinitionNode[\"name\"]>;\n};\n\n/** @internal */\nexport function getOperationName<\n  TFallback extends string | null | undefined = undefined,\n>(doc: DocumentNode, fallback?: TFallback): string | TFallback {\n  return (\n    doc.definitions.find(\n      (definition): definition is OperationDefinitionWithName =>\n        definition.kind === \"OperationDefinition\" && !!definition.name\n    )?.name.value ?? (fallback as TFallback)\n  );\n}\n","import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n","/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */\nexport function isWhiteSpace(code) {\n  return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */\n\nexport function isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */\n\nexport function isLetter(code) {\n  return (\n    (code >= 0x0061 && code <= 0x007a) || // A-Z\n    (code >= 0x0041 && code <= 0x005a) // a-z\n  );\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameStart(code) {\n  return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameContinue(code) {\n  return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n","import { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\nimport { visit } from './visitor.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? printBlockString(value) : printString(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n","import {\n  ApolloClient,\n  InMemoryCache,\n  gql,\n  HttpLink,\n  ApolloLink,\n} from \"@apollo/client\";\n\nexport const httpLink = new HttpLink({\n  uri: process.env.GRAPHQL_ENDPOINT,\n  fetch: function (uri, options) {\n    return fetch(uri, {\n      ...options,\n      next: {\n        revalidate: 1,\n      },\n    });\n  },\n});\n\nexport const client = new ApolloClient({\n  link: ApolloLink.from([httpLink]),\n  cache: new InMemoryCache({}),\n  defaultOptions: {\n    query: {\n      fetchPolicy: \"network-only\",\n    },\n  },\n});\n\n/* QUERIES */\n\nconst GET_GENERAL = gql`\n  query getGeneral {\n    GeneralInformation {\n      name\n      logo {\n        url\n      }\n      address\n      hotline1\n      hotline2\n      emergencyHotline\n      email\n      operatingHours\n      socials {\n        name\n        url\n      }\n      mapLat\n      mapLong\n    }\n  }\n`;\n\nconst GET_HEROES = gql`\n  query getHeroes {\n    SectionHero {\n      aboutusHero {\n        url\n      }\n      teamHero {\n        url\n      }\n      departmentHero {\n        url\n      }\n      serviceHero {\n        url\n      }\n      blogHero {\n        url\n      }\n      reservationHero {\n        url\n      }\n      contactHero {\n        url\n      }\n      galleryHero {\n        url\n      }\n    }\n  }\n`;\n\nconst GET_ABOUT = gql`\n  query getAbout {\n    OurStory {\n      content\n    }\n  }\n`;\n\nconst GET_DPEARTMENTS = gql`\n  query getDepartments($deptLimit: Int = 100, $staffPreviewLimit: Int = 100) {\n    Departments(limit: $deptLimit) {\n      docs {\n        id\n        slug\n        title\n        about\n        icons {\n          url\n        }\n        staffs(\n          where: {\n            status: { equals: Active }\n            AND: { role: { equals: Doctor } }\n          }\n          limit: $staffPreviewLimit\n        ) {\n          docs {\n            slug\n          }\n        }\n      }\n      totalDocs\n      limit\n    }\n  }\n`;\n\nconst GET_DEPARTMENT = gql`\n  query getDepaertment($slug: String, $staffLimit: Int = 100) {\n    Departments(where: { slug: { equals: $slug } }) {\n      docs {\n        slug\n        heroImage {\n          url\n        }\n        title\n        about\n        icons {\n          url\n        }\n        phone\n        email\n        address\n        hours\n\n        staffs(where: { status: { equals: Active } }, limit: $staffLimit) {\n          docs {\n            specialty\n            slug\n            name\n            role\n            photo {\n              url\n            }\n            years\n            languages {\n              value\n            }\n\n            schedule {\n              day\n              time\n            }\n          }\n        }\n        services {\n          value\n        }\n        conditions {\n          value\n        }\n      }\n    }\n  }\n`;\n\nconst GET_SERVICES = gql`\n  query getServices($limit: Int = 100, $page: Int = 1) {\n    Services(limit: $limit, page: $page) {\n      docs {\n        id\n        title\n        desc\n        prep\n        icon {\n          url\n        }\n        items {\n          value\n        }\n      }\n      totalDocs\n      totalPages\n      page\n      limit\n      hasNextPage\n      hasPrevPage\n    }\n  }\n`;\n\nconst GET_STAFFS = gql`\n  query getStaffs($limit: Int = 100, $page: Int = 1) {\n    Staffs(where: { status: { equals: Active } }, limit: $limit, page: $page) {\n      docs {\n        id\n        slug\n        name\n        role\n        specialty\n        years\n        languages {\n          value\n        }\n        department {\n          title\n          slug\n        }\n        photo {\n          url\n        }\n      }\n      totalDocs\n      totalPages\n      page\n      limit\n      hasNextPage\n      hasPrevPage\n    }\n  }\n`;\n\nconst GET_STAFF = gql`\n  query getStaff($slug: String) {\n    Staffs(where: { slug: { equals: $slug } }) {\n      docs {\n        name\n        role\n        specialty\n        bio\n        years\n        education {\n          value\n        }\n        languages {\n          value\n        }\n        department {\n          title\n          slug\n        }\n        schedule {\n          day\n          time\n        }\n        photo {\n          url\n        }\n      }\n    }\n  }\n`;\n\nconst GET_PATIENT = gql`\n  query getPatient($phone: String) {\n    Patients(where: { phone: { equals: $phone } }) {\n      docs {\n        id\n        fullName\n        phone\n        email\n      }\n    }\n  }\n`;\n\n// Adjusted: backend exposes single 'image' field (error indicated 'images' invalid)\nconst GET_GALLERIES = gql`\n  query getGalleries($limit: Int = 100, $page: Int = 1) {\n    Galleries(limit: $limit, page: $page) {\n      docs {\n        id\n        title\n        image {\n          url\n        }\n      }\n      totalDocs\n      totalPages\n      page\n      limit\n      hasNextPage\n      hasPrevPage\n    }\n  }\n`;\n\nconst GET_BLOGS = gql`\n  # Added $sort variable with default \"-publishedAt\" for descending order by publication time.\n  # If backend uses publishedDate instead, update the default to \"-publishedDate\" accordingly.\n  query getBlogs(\n    $limit: Int = 100\n    $page: Int = 1\n    $sort: String = \"-publishedAt\"\n  ) {\n    BlogPosts(\n      limit: $limit\n      page: $page\n      sort: $sort\n      where: { published: { equals: true } }\n    ) {\n      docs {\n        id\n        slug\n        title\n        excerpt\n        content\n\n        publishedAt\n        author {\n          name\n          photo {\n            url\n          }\n          role\n        }\n        coverImage {\n          url\n        }\n        tags {\n          value\n        }\n      }\n      totalDocs\n      totalPages\n      page\n      limit\n      hasNextPage\n      hasPrevPage\n    }\n  }\n`;\n\nconst GET_BLOG = gql`\n  query getBlog($slug: String) {\n    BlogPosts(where: { slug: { equals: $slug } }) {\n      docs {\n        id\n        slug\n        title\n        excerpt\n        content\n\n        publishedAt\n        author {\n          name\n          photo {\n            url\n          }\n          role\n        }\n        coverImage {\n          url\n        }\n        tags {\n          value\n        }\n      }\n    }\n  }\n`;\n\n/* MUTATION */\n\nexport const CREATE_PATIENT = gql`\n  mutation CreatePatient(\n    $fullName: String!\n    $phone: String!\n    $email: String\n    # Backend expects an enum/input type; previously declared as String causing mismatch.\n    $gender: Patient_gender_MutationInput\n    $dob: String\n    $address: String\n  ) {\n    createPatient(\n      data: {\n        fullName: $fullName\n        phone: $phone\n        email: $email\n        gender: $gender\n        dob: $dob\n        address: $address\n      }\n    ) {\n      id\n      fullName\n    }\n  }\n`;\n\nconst CREATE_MESSAGE = gql`\n  mutation CreateMessage(\n    $patient: String!\n    $subject: String!\n    $message: String!\n    $handled: Boolean!\n  ) {\n    createContact(\n      data: {\n        patient: $patient\n        subject: $subject\n        message: $message\n        handled: $handled\n      }\n    ) {\n      subject\n    }\n  }\n`;\n\nconst CREATE_RESERVATION = gql`\n  mutation CreateReservation(\n    $patient: String!\n    $datetime: String!\n    $symptoms: String!\n    $department: String!\n  ) {\n    createReservation(\n      data: {\n        patient: $patient\n        datetime: $datetime\n        symptoms: $symptoms\n        department: $department\n      }\n    ) {\n      id\n    }\n  }\n`;\n\nexport const getGeneral = async () => {\n  const { data } = await client.query({\n    query: GET_GENERAL,\n  });\n  return data;\n};\n\nexport const getHeroes = async () => {\n  const { data } = await client.query({\n    query: GET_HEROES,\n  });\n  return data;\n};\n\nexport const getAbout = async () => {\n  const { data } = await client.query({\n    query: GET_ABOUT,\n  });\n  return data;\n};\n\nexport const getDepartments = async (\n  deptLimit = 100,\n  staffPreviewLimit = 100\n) => {\n  const { data } = await client.query({\n    query: GET_DPEARTMENTS,\n    variables: { deptLimit, staffPreviewLimit },\n  });\n  return data;\n};\n\nexport const getDepartment = async (slug: string, staffLimit = 100) => {\n  const { data } = await client.query({\n    query: GET_DEPARTMENT,\n    variables: { slug, staffLimit },\n  });\n  return data;\n};\n\nexport const getServices = async (limit = 100, page = 1) => {\n  const { data } = await client.query({\n    query: GET_SERVICES,\n    variables: { limit, page },\n  });\n  return data;\n};\n\nexport const getStaffs = async (limit = 100, page = 1) => {\n  const { data } = await client.query({\n    query: GET_STAFFS,\n    variables: { limit, page },\n  });\n  return data;\n};\n\nexport const getStaff = async (slug: string) => {\n  const { data } = await client.query({\n    query: GET_STAFF,\n    variables: { slug },\n  });\n  return data;\n};\n\nexport const getPatient = async (phone: string) => {\n  const { data } = await client.query({\n    query: GET_PATIENT,\n    variables: { phone },\n  });\n  return data;\n};\n\nexport const getGalleries = async (limit = 100, page = 1) => {\n  const { data } = await client.query({\n    query: GET_GALLERIES,\n    variables: { limit, page },\n  });\n  return data;\n};\n\nexport const getBlogs = async (\n  limit = 100,\n  page = 1,\n  sort: string = \"-publishedAt\"\n) => {\n  const { data } = await client.query({\n    query: GET_BLOGS,\n    variables: { limit, page, sort },\n  });\n  return data;\n};\n\nexport const getBlog = async (slug: string) => {\n  const { data } = await client.query({\n    query: GET_BLOG,\n    variables: { slug },\n  });\n  return data;\n};\n\n/* END OF QUERIES */\n\n/* MUTATIONS */\n\nexport const createPatient = async (\n  fullName: string,\n  phone: string,\n  email?: string,\n  gender?: string, // Should align with Patient_gender_MutationInput enum values\n  dob?: string,\n  address?: string\n) => {\n  const { data } = await client.mutate({\n    mutation: CREATE_PATIENT,\n    variables: { fullName, phone, email, gender, dob, address },\n  });\n  return data;\n};\n\nexport const createMessage = async (\n  patient: string,\n  subject: string,\n  message: string\n) => {\n  const { data } = await client.mutate({\n    mutation: CREATE_MESSAGE,\n    variables: { patient, subject, message, handled: false },\n  });\n  return data;\n};\n\nexport const createReservation = async (\n  patient: string,\n  datetime: string,\n  symptoms: string,\n  department: string\n) => {\n  const { data } = await client.mutate({\n    mutation: CREATE_RESERVATION,\n    variables: {\n      patient,\n      datetime,\n      symptoms,\n      department,\n      status: \"pending\",\n    },\n  });\n  return data;\n};\n\n/* END OF MUTATIONS */\n","import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = { ...node };\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n\n/* c8 ignore next 8 */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n","import { isWhiteSpace } from './characterClasses.mjs';\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\n\nexport function dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nexport function isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n","import type { ApolloLink } from \"@apollo/client/link\";\nimport { print } from \"@apollo/client/utilities\";\n\nimport type { BaseHttpLink } from \"./BaseHttpLink.js\";\n\ninterface HttpConfig {\n  http?: BaseHttpLink.HttpOptions;\n  options?: any;\n  headers?: Record<string, string>;\n  credentials?: any;\n}\n\nconst defaultHttpOptions: BaseHttpLink.HttpOptions = {\n  includeQuery: true,\n  includeExtensions: true,\n  preserveHeaderCase: false,\n};\n\nconst defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: \"application/graphql-response+json,application/json;q=0.9\",\n  // The content-type header describes the type of the body of the request, and\n  // so it typically only is sent with requests that actually have bodies. One\n  // could imagine that Apollo Client would remove this header when constructing\n  // a GET request (which has no body), but we historically have not done that.\n  // This means that browsers will preflight all Apollo Client requests (even\n  // GET requests). Apollo Server's CSRF prevention feature (introduced in\n  // AS3.7) takes advantage of this fact and does not block requests with this\n  // header. If you want to drop this header from GET requests, then you should\n  // probably replace it with a `apollo-require-preflight` header, or servers\n  // with CSRF prevention enabled might block your GET request. See\n  // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n  // for more details.\n  \"content-type\": \"application/json\",\n};\n\nconst defaultOptions = {\n  method: \"POST\",\n};\n\nexport const fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions,\n};\n\nexport const defaultPrinter: BaseHttpLink.Printer = (ast, printer) =>\n  printer(ast);\n\nexport function selectHttpOptionsAndBody(\n  operation: ApolloLink.Operation,\n  fallbackConfig: HttpConfig,\n  ...configs: Array<HttpConfig>\n) {\n  configs.unshift(fallbackConfig);\n  return selectHttpOptionsAndBodyInternal(\n    operation,\n    defaultPrinter,\n    ...configs\n  );\n}\n\nexport function selectHttpOptionsAndBodyInternal(\n  operation: ApolloLink.Operation,\n  printer: BaseHttpLink.Printer,\n  ...configs: HttpConfig[]\n) {\n  let options = {} as HttpConfig & Record<string, any>;\n  let http = {} as BaseHttpLink.HttpOptions;\n\n  configs.forEach((config) => {\n    options = {\n      ...options,\n      ...config.options,\n      headers: {\n        ...options.headers,\n        ...config.headers,\n      },\n    };\n\n    if (config.credentials) {\n      options.credentials = config.credentials;\n    }\n\n    options.headers!.accept = (config.http?.accept || [])\n      .concat(options.headers!.accept)\n      .join(\",\");\n\n    http = {\n      ...http,\n      ...config.http,\n    };\n  });\n\n  options.headers = removeDuplicateHeaders(\n    options.headers!,\n    http.preserveHeaderCase\n  );\n\n  //The body depends on the http options\n  const { operationName, extensions, variables, query } = operation;\n  const body: BaseHttpLink.Body = { operationName, variables };\n\n  if (http.includeExtensions && Object.keys(extensions || {}).length)\n    (body as any).extensions = extensions;\n\n  // not sending the query (i.e persisted queries)\n  if (http.includeQuery) (body as any).query = printer(query, print);\n\n  return {\n    options,\n    body,\n  };\n}\n\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of\n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(\n  headers: Record<string, string>,\n  preserveHeaderCase: boolean | undefined\n): typeof headers {\n  // If we're not preserving the case, just remove duplicates w/ normalization.\n  if (!preserveHeaderCase) {\n    const normalizedHeaders: Record<string, string> = {};\n    Object.keys(Object(headers)).forEach((name) => {\n      normalizedHeaders[name.toLowerCase()] = headers[name];\n    });\n    return normalizedHeaders;\n  }\n\n  // If we are preserving the case, remove duplicates w/ normalization,\n  // preserving the original name.\n  // This allows for non-http-spec-compliant servers that expect intentionally\n  // capitalized header names (See #6741).\n  const headerData: Record<string, { originalName: string; value: string }> =\n    {};\n  Object.keys(Object(headers)).forEach((name) => {\n    headerData[name.toLowerCase()] = {\n      originalName: name,\n      value: headers[name],\n    };\n  });\n\n  const normalizedHeaders: Record<string, string> = {};\n  Object.keys(headerData).forEach((name) => {\n    normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n  });\n  return normalizedHeaders;\n}\n","import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport class Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      devAssert(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      devAssert(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n",null,"import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  const document = parser.parseDocument();\n  Object.defineProperty(document, 'tokenCount', {\n    enumerable: false,\n    value: parser.tokenCount,\n  });\n  return document;\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n\n  get tokenCount() {\n    return this._tokenCounter;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (maxTokens !== undefined && this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n","/**\n * Representation of a reference object inside the cache.\n */\nexport interface Reference {\n  readonly __ref: string;\n}\n\n/**\n * Determines if a given object is a reference object.\n *\n * @param obj - The object to check if its a reference object\n *\n * @example\n *\n * ```ts\n * import { isReference } from \"@apollo/client/utilities\";\n *\n * isReference({ __ref: \"User:1\" }); // true\n * isReference({ __typename: \"User\", id: 1 }); // false\n * ```\n */\nexport function isReference(obj: any): obj is Reference {\n  return Boolean(\n    obj && typeof obj === \"object\" && typeof obj.__ref === \"string\"\n  );\n}\n\n/**\n * Represents the union of valid values that can be stored in the cache.\n */\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | Reference\n  | Reference[]\n  | null\n  | undefined\n  | void\n  | Object;\n\n/**\n * Represents an object that is stored in the cache.\n */\nexport interface StoreObject {\n  __typename?: string;\n  [storeFieldName: string]: StoreValue;\n}\n\n/**\n * Workaround for a TypeScript quirk:\n * types per default have an implicit index signature that makes them\n * assignable to `StoreObject`.\n * interfaces do not have that implicit index signature, so they cannot\n * be assigned to `StoreObject`.\n * This type just maps over a type or interface that is passed in,\n * implicitly adding the index signature.\n * That way, the result can be assigned to `StoreObject`.\n *\n * This is important if some user-defined interface is used e.g.\n * in cache.modify, where the `toReference` method expects a\n * `StoreObject` as input.\n */\nexport type AsStoreObject<T extends { __typename?: string }> = {\n  [K in keyof T]: T[K];\n};\n","import type { BaseHttpLink } from \"./BaseHttpLink.js\";\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nexport function rewriteURIForGET(chosenURI: string, body: BaseHttpLink.Body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  const queryParams: string[] = [];\n  const addQueryParam = (key: string, value: string) => {\n    queryParams.push(`${key}=${encodeURIComponent(value)}`);\n  };\n\n  if (\"query\" in body) {\n    addQueryParam(\"query\", body.query!);\n  }\n  if (body.operationName) {\n    addQueryParam(\"operationName\", body.operationName);\n  }\n  if (body.variables) {\n    let serializedVariables;\n    try {\n      serializedVariables = JSON.stringify(body.variables);\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam(\"variables\", serializedVariables);\n  }\n  if (body.extensions) {\n    let serializedExtensions;\n    try {\n      serializedExtensions = JSON.stringify(body.extensions);\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam(\"extensions\", serializedExtensions);\n  }\n\n  // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n  let fragment = \"\",\n    preFragment = chosenURI;\n  const fragmentStart = chosenURI.indexOf(\"#\");\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  const queryParamsPrefix = preFragment.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n  const newURI =\n    preFragment + queryParamsPrefix + queryParams.join(\"&\") + fragment;\n  return { newURI };\n}\n","import { global } from \"@apollo/client/utilities/internal/globals\";\n\ndeclare global {\n  interface Window {\n    [cacheSizeSymbol]?: Partial<CacheSizes>;\n  }\n}\n\n/**\n * The cache sizes used by various Apollo Client caches.\n *\n * @remarks\n * All configurable caches hold memoized values. If an item is\n * cache-collected, it incurs only a small performance impact and\n * doesn't cause data loss. A smaller cache size might save you memory.\n *\n * You should choose cache sizes appropriate for storing a reasonable\n * number of values rather than every value. To prevent too much recalculation,\n * choose cache sizes that are at least large enough to hold memoized values for\n * all hooks/queries on the screen at any given time.\n */\n/*\n * We assume a \"base value\" of 1000 here, which is already very generous.\n * In most applications, it will be very unlikely that 1000 different queries\n * are on screen at the same time.\n */\nexport interface CacheSizes {\n  /**\n   * Cache size for the [`print`](https://github.com/apollographql/apollo-client/blob/main/src/utilities/graphql/print.ts) function.\n   *\n   * It is called with transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @remarks\n   * This method is called to transform a GraphQL query AST parsed by `gql`\n   * back into a GraphQL string.\n   *\n   * @privateRemarks\n   * This method is called from the `QueryManager` and various `ApolloLink`s,\n   * always with the \"serverQuery\", so the server-facing part of a transformed\n   * `DocumentNode`.\n   */\n  print: number;\n  /**\n   * Cache size for the cache of [`DocumentTransform`](https://github.com/apollographql/apollo-client/blob/main/src/utilities/graphql/DocumentTransform.ts)\n   * instances with the `cache` option set to `true`.\n   *\n   * Can be called with user-defined or already-transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @remarks\n   * The cache size here should be chosen with other `DocumentTransform`s in mind.\n   * For example, if there was a `DocumentTransform` that would take `x` `DocumentNode`s,\n   * and returned a differently-transformed `DocumentNode` depending if the app is\n   * online or offline, then we assume that the cache returns `2*x` documents.\n   * If that were concatenated with another `DocumentTransform` that would\n   * also duplicate the cache size, you'd need to account for `4*x` documents\n   * returned by the second transform.\n   *\n   * Due to an implementation detail of Apollo Client, if you use custom document\n   * transforms you should always add `n` (the \"base\" number of user-provided\n   * Documents) to the resulting cache size.\n   *\n   * If we assume that the user-provided transforms receive `n` documents and\n   * return `n` documents, the cache size should be `2*n`.\n   *\n   * If we assume that the chain of user-provided transforms receive `n` documents and\n   * return `4*n` documents, the cache size should be `5*n`.\n   *\n   * This size should also then be used in every other cache that mentions that\n   * it operates on a \"transformed\" `DocumentNode`.\n   *\n   * @privateRemarks\n   * Cache size for the `performWork` method of each [`DocumentTransform`](https://github.com/apollographql/apollo-client/blob/main/src/utilities/graphql/DocumentTransform.ts).\n   *\n   * No user-provided DocumentNode will actually be \"the last one\", as we run the\n   * `defaultDocumentTransform` before _and_ after the user-provided transforms.\n   * For that reason, we need the extra `n` here - `n` for \"before transformation\"\n   * plus the actual maximum cache size of the user-provided transform chain.\n   *\n   * This method is called from `transformDocument`, which is called from\n   * `QueryManager` with a user-provided DocumentNode.\n   * It is also called with already-transformed DocumentNodes, assuming the\n   * user provided additional transforms.\n   */\n  \"documentTransform.cache\": number;\n  /**\n   * A cache inside of [`QueryManager`](https://github.com/apollographql/apollo-client/blob/main/src/core/QueryManager.ts).\n   *\n   * It is called with transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @privateRemarks\n   * Cache size for the `transformCache` used in the `getDocumentInfo` method of `QueryManager`.\n   * Called throughout the `QueryManager` with transformed DocumentNodes.\n   */\n  \"queryManager.getDocumentInfo\": number;\n  /**\n   * A cache inside of [`PersistedQueryLink`](https://github.com/apollographql/apollo-client/blob/main/src/link/persisted-queries/index.ts).\n   *\n   * It is called with transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @remarks\n   * This cache is used to cache the hashes of persisted queries.\n   *\n   * @privateRemarks\n   * Cache size for the `hashesByQuery` cache in the `PersistedQueryLink`.\n   */\n  \"PersistedQueryLink.persistedQueryHashes\": number;\n  /**\n   * Cache used by [`canonicalStringify`](https://github.com/apollographql/apollo-client/blob/main/src/utilities/common/canonicalStringify.ts).\n   *\n   * @defaultValue\n   * Defaults to `1000`.\n   *\n   * @remarks\n   * This cache contains the sorted keys of objects that are stringified by\n   * `canonicalStringify`.\n   * It uses the stringified unsorted keys of objects as keys.\n   * The cache will not grow beyond the size of different object **shapes**\n   * encountered in an application, no matter how much actual data gets stringified.\n   *\n   * @privateRemarks\n   * Cache size for the `sortingMap` in `canonicalStringify`.\n   */\n  canonicalStringify: number;\n  /**\n   * A cache inside of [`FragmentRegistry`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/fragmentRegistry.ts).\n   *\n   * Can be called with user-defined or already-transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @privateRemarks\n   *\n   * Cache size for the `transform` method of FragmentRegistry.\n   * This function is called as part of the `defaultDocumentTransform` which will be called with\n   * user-provided and already-transformed DocumentNodes.\n   */\n  \"fragmentRegistry.transform\": number;\n  /**\n   * A cache inside of [`FragmentRegistry`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/fragmentRegistry.ts).\n   *\n   * This function is called with fragment names in the form of a string.\n   *\n   * @defaultValue\n   * Defaults to `1000`.\n   *\n   * @remarks\n   * The size of this case should be chosen with the number of fragments in\n   * your application in mind.\n   *\n   * Note:\n   * This function is a dependency of `fragmentRegistry.transform`, so having too small of a cache size here\n   * might involuntarily invalidate values in the `transform` cache.\n   *\n   * @privateRemarks\n   * Cache size for the `lookup` method of FragmentRegistry.\n   */\n  \"fragmentRegistry.lookup\": number;\n  /**\n   * Cache size for the `findFragmentSpreads` method of [`FragmentRegistry`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/fragmentRegistry.ts).\n   *\n   * This function is called with transformed `DocumentNode`s, as well as recursively\n   * with every fragment spread referenced within that, or a fragment referenced by a\n   * fragment spread.\n   *\n   * @defaultValue\n   * Defaults to `4000`.\n   *\n   * @remarks\n   *\n   * Note: This function is a dependency of `fragmentRegistry.transform`, so having too small of cache size here\n   * might involuntarily invalidate values in the `transform` cache.\n   */\n  \"fragmentRegistry.findFragmentSpreads\": number;\n  /**\n   * Cache size for the `getFragmentDoc` method of [`ApolloCache`](https://github.com/apollographql/apollo-client/blob/main/src/cache/core/cache.ts).\n   *\n   * This function is called with user-provided fragment definitions.\n   *\n   * @defaultValue\n   * Defaults to `1000`.\n   *\n   * @remarks\n   * This function is called from `readFragment` with user-provided fragment definitions.\n   */\n  \"cache.fragmentQueryDocuments\": number;\n  /**\n   * Cache used in [`removeTypenameFromVariables`](https://github.com/apollographql/apollo-client/blob/main/src/link/remove-typename/removeTypenameFromVariables.ts).\n   *\n   * This function is called transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @privateRemarks\n   * Cache size for the `getVariableDefinitions` function of `removeTypenameFromVariables`.\n   */\n  \"removeTypenameFromVariables.getVariableDefinitions\": number;\n  /**\n   * Cache size for the `maybeBroadcastWatch` method on [`InMemoryCache`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/inMemoryCache.ts).\n   *\n   * @defaultValue\n   * Defaults to `5000`.\n   *\n   * @remarks\n   * This method is used for dependency tracking in the `InMemoryCache` and\n   * prevents from unnecessary re-renders.\n   * It is recommended to keep this value significantly higher than the number of\n   * possible subscribers you will have active at the same time in your application\n   * at any time.\n   */\n  \"inMemoryCache.maybeBroadcastWatch\": number;\n  /**\n   * Cache size for the `executeSelectionSet` method on [`StoreReader`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/readFromStore.ts).\n   *\n   * @defaultValue\n   * Defaults to `50000`.\n   *\n   * @remarks\n   * Every object that is read from the cache will be cached here, so it is\n   * recommended to set this to a high value.\n   */\n  \"inMemoryCache.executeSelectionSet\": number;\n  /**\n   * Cache size for the `executeSubSelectedArray` method on [`StoreReader`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/readFromStore.ts).\n   *\n   * @defaultValue\n   * Defaults to `10000`.\n   *\n   * @remarks\n   * Every array that is read from the cache will be cached here, so it is\n   * recommended to set this to a high value.\n   */\n  \"inMemoryCache.executeSubSelectedArray\": number;\n  /**\n   * Used by the internal `checkDocument` that traverses GraphQL documents and throws an error if the document is invalid.\n   * if they are not valid.\n   */\n  checkDocument: number;\n}\n\nconst cacheSizeSymbol = Symbol.for(\"apollo.cacheSize\");\n/**\n * The global cache size configuration for Apollo Client.\n *\n * @remarks\n *\n * You can directly modify this object, but any modification will\n * only have an effect on caches that are created after the modification.\n *\n * So for global caches, such as `canonicalStringify` and `print`,\n * you might need to call `.reset` on them, which will essentially re-create them.\n *\n * Alternatively, you can set `globalThis[Symbol.for(\"apollo.cacheSize\")]` before\n * you load the Apollo Client package:\n *\n * @example\n *\n * ```ts\n * globalThis[Symbol.for(\"apollo.cacheSize\")] = {\n *   print: 100,\n * } satisfies Partial<CacheSizes>; // the `satisfies` is optional if using TypeScript\n * ```\n */\nexport const cacheSizes: Partial<CacheSizes> = { ...global[cacheSizeSymbol] };\n\nexport const enum defaultCacheSizes {\n  checkDocument = 2000,\n  canonicalStringify = 1000,\n  print = 2000,\n  \"documentTransform.cache\" = 2000,\n  \"queryManager.getDocumentInfo\" = 2000,\n  \"PersistedQueryLink.persistedQueryHashes\" = 2000,\n  \"fragmentRegistry.transform\" = 2000,\n  \"fragmentRegistry.lookup\" = 1000,\n  \"fragmentRegistry.findFragmentSpreads\" = 4000,\n  \"cache.fragmentQueryDocuments\" = 1000,\n  \"removeTypenameFromVariables.getVariableDefinitions\" = 2000,\n  \"inMemoryCache.maybeBroadcastWatch\" = 5000,\n  \"inMemoryCache.executeSelectionSet\" = 50000,\n  \"inMemoryCache.executeSubSelectedArray\" = 10000,\n}\n","import { ApolloLink } from \"@apollo/client/link\";\nimport { ClientAwarenessLink } from \"@apollo/client/link/client-awareness\";\n\nimport { BaseHttpLink } from \"./BaseHttpLink.js\";\n\nexport declare namespace HttpLink {\n  /**\n   * Options passed to `HttpLink` through [request context](https://apollographql.com/docs/react/api/link/introduction#managing-context). Previous\n   * non-terminating links in the link chain also can set these values to\n   * customize the behavior of `HttpLink` for each operation.\n   *\n   * > [!NOTE]\n   * > Some of these values can also be provided to the `HttpLink` constructor.\n   * > If a value is provided to both, the value in `context` takes precedence.\n   */\n  interface ContextOptions\n    extends BaseHttpLink.ContextOptions,\n      ClientAwarenessLink.ContextOptions {}\n\n  /**\n   * Options provided to the `HttpLink` constructor.\n   *\n   * > [!NOTE]\n   * > Some of these options are also available to override in [request context](https://apollographql.com/docs/react/api/link/introduction#managing-context).\n   * > Context options override the options passed to the constructor. Treat\n   * > these options as default values that are used when the request context\n   * > does not override the value.\n   */\n  interface Options extends BaseHttpLink.Options, ClientAwarenessLink.Options {}\n}\n\n/**\n * `HttpLink` is a terminating link that sends a GraphQL operation to a remote\n * endpoint over HTTP. It combines the functionality of `BaseHttpLink` and\n * `ClientAwarenessLink` into a single link.\n *\n * @remarks\n *\n * `HttpLink` supports both POST and GET requests, and you can configure HTTP\n * options on a per-operation basis. You can use these options for\n * authentication, persisted queries, dynamic URIs, and other granular updates.\n *\n * @example\n *\n * ```ts\n * import { HttpLink } from \"@apollo/client\";\n *\n * const link = new HttpLink({\n *   uri: \"http://localhost:4000/graphql\",\n *   // Additional options\n * });\n * ```\n */\nexport class HttpLink extends ApolloLink {\n  constructor(options: HttpLink.Options = {}) {\n    const { left, right, request } = ApolloLink.from([\n      new ClientAwarenessLink(options),\n      new BaseHttpLink(options),\n    ]);\n    super(request);\n    Object.assign(this, { left, right });\n  }\n}\n\n/**\n * @deprecated\n * Use `HttpLink` from `@apollo/client/link/http` instead.\n */\nexport const createHttpLink = (options: HttpLink.Options = {}) =>\n  new HttpLink(options);\n",null,"import type { ASTNode, FieldNode, OperationDefinitionNode } from \"graphql\";\nimport { Kind, visit } from \"graphql\";\n\nconst TYPENAME_FIELD: FieldNode = {\n  kind: Kind.FIELD,\n  name: {\n    kind: Kind.NAME,\n    value: \"__typename\",\n  },\n};\n\n/**\n * Adds `__typename` to all selection sets in the document except for the root\n * selection set.\n *\n * @param doc - The `ASTNode` to add `__typename` to\n *\n * @example\n *\n * ```ts\n * const document = gql`\n *   # ...\n * `;\n *\n * const withTypename = addTypenameToDocument(document);\n * ```\n */\nexport const addTypenameToDocument = Object.assign(\n  function <TNode extends ASTNode>(doc: TNode): TNode {\n    return visit(doc, {\n      SelectionSet: {\n        enter(node, _key, parent) {\n          // Don't add __typename to OperationDefinitions.\n          if (\n            parent &&\n            (parent as OperationDefinitionNode).kind ===\n              Kind.OPERATION_DEFINITION\n          ) {\n            return;\n          }\n\n          // No changes if no selections.\n          const { selections } = node;\n          if (!selections) {\n            return;\n          }\n\n          // If selections already have a __typename, or are part of an\n          // introspection query, do nothing.\n          const skip = selections.some((selection) => {\n            return (\n              selection.kind === Kind.FIELD &&\n              (selection.name.value === \"__typename\" ||\n                selection.name.value.lastIndexOf(\"__\", 0) === 0)\n            );\n          });\n          if (skip) {\n            return;\n          }\n\n          // If this SelectionSet is @export-ed as an input variable, it should\n          // not have a __typename field (see issue #4691).\n          const field = parent as FieldNode;\n          if (\n            field.kind === Kind.FIELD &&\n            field.directives &&\n            field.directives.some((d) => d.name.value === \"export\")\n          ) {\n            return;\n          }\n\n          // Create and return a new SelectionSet with a __typename Field.\n          return {\n            ...node,\n            selections: [...selections, TYPENAME_FIELD],\n          };\n        },\n      },\n    });\n  },\n  {\n    added(field: FieldNode): boolean {\n      return field === TYPENAME_FIELD;\n    },\n  }\n);\n","import { brand, isBranded } from \"./utils.js\";\n\n/**\n * A wrapper error type that represents a non-standard error thrown from a\n * A wrapper error type that represents a non-error value thrown from the\n * link chain, such as a symbol, primitive or plain object. Read the `cause` property to\n * determine the source of the error.\n *\n * @remarks\n *\n * This error is used to standardize error handling when non-Error values are\n * thrown in the Apollo Client link chain or other parts of the system.\n * JavaScript allows throwing any value (not just Error instances), and this\n * wrapper ensures that all thrown values can be handled consistently as\n * Error-like objects while preserving the original thrown value.\n *\n * > [!NOTE]\n * > Plain strings thrown as errors are wrapped in regular [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) objects instead of `UnconventionalError` objects since strings can be safely used as the error's `message`.\n *\n * @example\n *\n * ```ts\n * import { UnconventionalError } from \"@apollo/client/errors\";\n *\n * // Check if an error is an UnconventionalError instance\n * if (UnconventionalError.is(error)) {\n *   console.log(\"Non-standard error thrown:\", error.cause);\n *\n *   // Check the type of the original thrown value\n *   if (typeof error.cause === \"symbol\") {\n *     console.log(\"A symbol was thrown:\", error.cause.toString());\n *   } else if (typeof error.cause === \"object\") {\n *     console.log(\"An object was thrown:\", error.cause);\n *   } else {\n *     console.log(\"Unexpected value thrown:\", error.cause);\n *   }\n * }\n * ```\n */\nexport class UnconventionalError extends Error {\n  /**\n   * A method that determines whether an error is an `UnconventionalError`\n   * object. This method enables TypeScript to narrow the error type.\n   *\n   * @example\n   *\n   * ```ts\n   * if (UnconventionalError.is(error)) {\n   *   // TypeScript now knows `error` is a UnconventionalError object\n   *   console.log(\"What caused this?\", error.cause);\n   * }\n   * ```\n   */\n  static is(error: unknown): error is UnconventionalError {\n    return isBranded(error, \"UnconventionalError\");\n  }\n\n  constructor(errorType: unknown) {\n    super(\"An error of unexpected shape occurred.\", { cause: errorType });\n    this.name = \"UnconventionalError\";\n\n    brand(this);\n    Object.setPrototypeOf(this, UnconventionalError.prototype);\n  }\n}\n",null,"import type { DocumentNode } from \"@apollo/client\";\nimport { getOperationDefinition } from \"@apollo/client/utilities/internal\";\n\nfunction isOperation(\n  document: DocumentNode,\n  operation: \"query\" | \"mutation\" | \"subscription\"\n) {\n  return getOperationDefinition(document)?.operation === operation;\n}\n\n/**\n * Determine if a document is a mutation document.\n *\n * @remarks\n * If you are authoring an Apollo link, you might not need this utility.\n * Prefer using the `operationType` property the `operation` object instead.\n *\n * @param document - The GraphQL document to check\n * @returns A boolean indicating if the document is a mutation operation\n *\n * @example\n *\n * ```ts\n * import { isMutationOperation } from \"@apollo/client/utilities\";\n *\n * const mutation = gql`\n *   mutation MyMutation {\n *     # ...\n *   }\n * `;\n *\n * isMutationOperation(mutation); // true\n * ```\n */\nexport function isMutationOperation(document: DocumentNode) {\n  return isOperation(document, \"mutation\");\n}\n\n/**\n * Determine if a document is a query document.\n *\n * @remarks\n * If you are authoring an Apollo link, you might not need this utility.\n * Prefer using the `operationType` property the `operation` object instead.\n *\n * @param document - The GraphQL document to check\n * @returns A boolean indicating if the document is a query operation\n *\n * @example\n *\n * ```ts\n * import { isQueryOperation } from \"@apollo/client/utilities\";\n *\n * const query = gql`\n *   query MyQuery {\n *     # ...\n *   }\n * `;\n *\n * isQueryOperation(query); // true\n * ```\n */\nexport function isQueryOperation(document: DocumentNode) {\n  return isOperation(document, \"query\");\n}\n\n/**\n * Determine if a document is a subscription document.\n *\n * @remarks\n * If you are authoring an Apollo link, you might not need this utility.\n * Prefer using the `operationType` property the `operation` object instead.\n *\n * @param document - The GraphQL document to check\n * @returns A boolean indicating if the document is a subscription operation\n *\n * @example\n *\n * ```ts\n * import { isSubscriptionOperation } from \"@apollo/client/utilities\";\n *\n * const subscription = gql`\n *   subscription MySubscription {\n *     # ...\n *   }\n * `;\n *\n * isSubscriptionOperation(subscription); // true\n * ```\n */\nexport function isSubscriptionOperation(document: DocumentNode) {\n  return isOperation(document, \"subscription\");\n}\n"],"names":[],"mappings":"iH,E,U,C,E,O,A,C,E,C,K,A,C,S,C,Q,C,C,G,uG,E,gB,C,E,O,A,C,E,I,E,C,C,I,C,G,C,A,C,E,G,C,C,A,C,I,C,G,E,G,C,C,A,C,A,A,K,E,C,K,A,C,A,C,C,O,E,M,G,C,M,C,M,C,K,C,S,C,C,A,E,M,G,C,W,C,E,C,C,I,C,C,C,sG,E,mB,C,A,E,C,C,M,C,gB,C,S,C,E,O,S,A,C,E,E,I,A,C,C,A,I,C,O,A,C,E,E,E,E,E,C,4C,E,G,C,A,S,C,C,C,E,O,C,C,C,C,K,E,C,O,E,A,C,C,C,I,C,M,C,C,E,C,A,I,C,I,C,qB,C,A,I,C,M,C,C,C,A,C,C,C,C,C,gG,E,S,C,E,O,A,C,C,C,A,E,G,C,C,C,A,I,E,E,C,A,M,C,G,C,A,C,C,A,G,E,A,C,K,C,E,C,C,C,A,A,A,C,g2B,I,E,E,C,C,K,C,E,E,C,C,O,E,E,C,C,C,G,G,E,iB,S,E,C,E,I,C,e,C,E,I,C,M,C,C,C,C,E,C,C,C,U,C,I,C,A,I,C,W,C,I,A,C,A,A,O,E,S,C,W,C,W,G,C,I,C,M,C,C,I,C,M,E,E,E,C,S,E,E,E,C,C,C,G,O,C,A,G,E,G,I,C,A,E,Q,C,I,C,A,K,C,O,C,O,G,C,A,E,E,E,E,G,E,E,G,C,E,C,C,E,I,C,E,E,I,G,A,A,E,K,C,A,M,C,I,C,C,sG,E,M,C,C,G,C,C,A,I,E,I,C,S,M,C,A,G,E,U,C,G,G,C,I,A,K,C,A,C,C,A,C,E,C,A,E,C,A,S,E,mB,C,A,C,A,C,M,C,A,C,A,C,C,C,A,A,I,E,I,C,I,O,C,A,G,E,C,I,C,G,Q,C,I,C,I,I,I,E,E,G,E,E,I,C,C,C,C,E,I,C,E,E,I,G,C,I,E,E,K,C,G,C,E,G,A,M,A,C,C,A,A,C,A,M,E,E,E,E,A,C,A,C,E,C,Q,C,E,G,K,K,M,C,C,C,E,E,E,C,E,I,E,A,E,C,K,E,C,A,E,I,A,C,G,A,C,A,C,kG,A,G,E,I,E,A,I,E,mB,C,G,A,C,C,C,C,A,C,Q,C,G,C,S,C,Q,G,G,I,C,G,A,C,C,E,I,C,M,C,C,C,O,C,A,C,C,C,A,Q,K,E,C,G,E,I,E,A,E,E,M,I,C,I,C,C,C,M,A,E,M,I,C,I,C,C,A,A,C,I,C,W,C,M,G,I,C,W,A,E,E,E,A,A,C,C,I,C,C,E,A,C,C,E,C,A,C,C,G,G,C,U,C,S,C,E,I,E,I,C,G,O,C,A,O,I,G,G,A,E,C,O,C,I,E,I,C,G,A,C,E,C,C,E,A,C,C,C,M,C,U,C,S,C,E,I,E,I,C,G,O,C,A,I,C,U,C,K,C,O,C,I,E,I,A,C,A,C,C,C,A,A,C,C,C,A,A,C,A,C,A,C,E,E,C,A,C,A,C,A,C,A,A,C,C,A,C,C,O,C,a,C,S,C,E,I,E,I,C,G,O,C,A,I,E,I,A,A,C,C,S,C,I,C,A,K,C,O,C,I,E,I,C,E,E,C,E,E,C,C,E,A,C,C,A,O,C,M,C,S,C,E,I,E,I,C,I,O,C,A,G,E,M,G,C,E,G,K,C,A,C,C,K,G,E,M,C,E,I,C,I,C,A,C,A,C,C,E,E,C,C,G,M,C,E,C,C,A,C,A,A,K,C,E,A,A,E,A,C,C,C,C,M,E,E,C,E,E,M,I,C,G,I,E,A,C,E,A,E,C,C,I,E,A,C,A,A,E,Y,C,E,E,S,S,C,E,K,C,A,E,E,Y,C,E,O,A,C,E,K,E,I,C,Q,G,G,E,I,E,G,G,E,A,U,C,E,G,G,C,E,E,U,C,E,G,A,C,E,E,U,C,E,G,Q,C,A,C,A,C,C,8F,E,M,C,C,gB,C,I,C,qB,C,I,C,O,M,E,O,8B,E,E,G,qB,E,E,C,E,+f,E,e,C,C,U,C,S,C,C,C,M,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,E,C,S,C,E,C,A,I,E,E,I,W,C,Q,C,M,O,E,K,C,C,E,E,I,I,A,A,E,A,E,I,E,G,C,C,G,E,C,E,E,C,E,C,C,C,E,A,E,E,C,G,O,C,K,C,K,E,E,C,E,E,C,E,A,E,E,A,C,C,E,U,C,S,C,E,I,E,E,I,W,C,Q,C,A,M,C,O,E,K,C,C,E,E,I,I,E,A,G,G,K,I,C,A,C,A,E,C,C,E,C,C,I,M,E,C,M,uG,I,E,E,C,C,O,E,E,C,C,I,E,G,O,a,C,E,O,A,C,E,E,S,M,A,C,U,C,W,I,E,E,M,C,K,W,C,A,G,E,E,G,C,C,G,I,E,A,A,C,C,C,A,A,C,A,A,8F,E,I,C,E,K,E,E,C,C,8B,S,E,C,C,C,C,C,E,M,C,E,E,C,E,E,G,C,E,G,E,C,E,A,C,A,E,0I,E,qB,C,E,A,A,G,M,O,A,E,C,E,I,C,Y,C,E,O,A,C,E,O,C,C,G,E,I,E,E,C,C,C,A,C,A,C,A,e,C,E,O,A,C,E,O,A,E,G,C,A,K,E,E,C,C,C,C,G,C,C,a,C,mB,mG,I,E,E,C,C,O,E,I,C,A,A,E,C,W,C,E,O,A,C,E,G,A,E,I,E,C,qC,C,C,I,E,C,E,C,E,E,C,C,E,A,C,C,G,O,C,G,E,G,C,I,C,C,C,A,E,E,A,C,C,C,G,C,E,E,E,E,C,M,I,C,E,E,C,I,C,A,G,E,I,C,A,A,E,M,E,C,A,E,A,C,E,C,C,C,C,A,C,A,E,Y,C,E,O,A,C,E,E,C,K,C,A,qC,E,I,E,C,E,E,M,E,E,E,A,C,I,A,C,E,C,A,C,onB,I,E,E,C,C,K,C,E,E,C,C,E,K,E,E,C,C,O,E,E,C,C,G,I,E,E,C,C,E,K,E,E,C,C,O,E,E,A,C,C,O,E,E,C,C,E,K,A,E,S,C,E,S,E,C,E,I,E,E,I,C,I,C,E,I,C,O,E,S,E,E,G,A,C,C,G,G,E,G,C,E,E,O,C,M,C,I,E,G,C,C,C,E,A,C,A,C,A,C,E,Q,C,E,c,C,C,C,A,O,E,E,G,E,G,G,C,S,C,C,C,C,C,E,O,I,E,E,E,A,E,C,A,C,E,E,A,C,C,K,C,I,C,S,C,E,I,C,S,C,C,C,E,gB,C,G,C,C,C,C,C,C,A,I,C,K,C,E,C,C,C,C,A,C,Q,C,K,C,S,C,E,I,C,S,C,C,C,E,iB,C,G,A,A,C,G,C,C,C,I,C,S,C,G,C,C,E,C,M,C,G,A,C,A,C,A,E,S,C,Q,C,W,I,C,S,C,C,C,E,qB,A,C,I,C,C,C,I,C,S,E,E,E,C,C,C,S,E,C,A,C,C,E,S,C,W,C,W,I,C,M,E,C,I,C,S,E,E,E,A,C,Q,C,W,C,I,C,I,C,C,A,I,C,W,C,I,C,A,C,C,E,S,C,K,C,S,C,E,I,C,W,C,I,C,E,C,C,C,C,A,C,Q,C,M,C,S,C,E,G,C,I,C,W,C,K,C,G,A,C,C,K,C,I,C,W,E,C,A,A,C,C,E,S,C,S,C,W,G,C,I,C,W,C,Q,E,C,A,O,C,I,C,W,E,C,A,A,C,C,C,C,A,C,E,K,O,E,C,C,U,C,E,I,E,G,A,K,C,S,C,I,C,A,S,E,C,C,A,C,E,O,E,G,C,C,E,A,E,C,A,I,A,C,C,A,W,S,E,C,E,I,C,e,C,C,C,A,O,E,I,C,I,C,I,C,S,C,E,I,E,I,C,Q,O,C,A,G,E,I,C,C,E,C,E,E,E,C,G,A,E,C,C,C,C,E,C,E,A,G,A,C,C,A,C,C,A,S,C,C,I,C,S,C,E,I,E,I,C,Q,O,C,A,G,E,K,C,C,E,C,E,C,I,C,G,A,A,C,C,E,E,E,C,E,A,G,E,C,C,C,E,E,C,A,C,A,C,C,E,O,C,E,M,C,W,I,E,I,C,Q,O,C,A,G,E,Q,C,C,E,C,A,E,Q,E,C,A,A,E,I,E,C,E,A,G,A,C,C,A,C,A,C,A,A,G,C,C,M,G,A,C,E,S,E,C,C,C,C,C,E,I,E,E,E,E,G,C,A,C,E,C,C,C,E,I,C,O,E,U,C,I,C,E,E,C,I,A,C,I,E,A,C,C,O,E,G,E,A,E,C,A,I,E,E,A,C,E,G,C,E,K,A,C,I,A,G,E,A,A,K,C,C,C,C,C,A,C,E,E,A,C,G,E,C,K,K,K,S,E,A,A,G,M,A,A,C,M,C,E,C,C,A,W,C,W,O,E,G,Q,E,A,C,C,A,E,C,I,C,E,I,C,C,E,E,A,E,E,C,G,I,C,C,A,C,C,K,E,E,E,A,C,I,C,G,G,G,C,C,C,E,Q,E,E,A,E,A,Q,C,G,A,C,C,E,E,A,C,C,G,M,C,C,A,C,I,E,I,C,A,O,E,A,C,C,A,C,E,C,C,A,C,E,C,O,C,C,C,C,C,E,E,M,C,M,+B,C,C,C,Y,C,G,E,A,C,C,kB,C,E,C,A,E,C,C,K,E,C,C,C,E,I,E,E,M,C,G,O,W,C,A,G,E,e,C,A,U,C,W,O,E,E,E,C,C,A,C,A,A,E,G,A,C,M,I,C,E,E,W,G,C,C,M,E,E,E,E,C,E,I,C,K,C,C,Q,A,C,E,M,C,C,A,C,A,C,M,C,C,E,I,C,C,mG,E,U,C,A,E,A,Q,S,M,E,M,C,U,C,C,c,gG,E,Q,C,E,O,A,C,C,C,K,E,C,A,C,A,8G,I,E,E,C,C,K,S,E,C,S,A,A,C,A,E,A,G,M,C,E,Q,C,A,C,E,C,E,C,K,C,C,C,C,C,C,A,S,A,C,E,E,K,E,C,K,C,S,C,C,C,E,O,E,A,E,C,C,A,C,C,C,A,C,A,A,C,C,A,C,G,C,E,K,E,I,E,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,O,E,E,C,A,C,A,C,C,K,Q,C,c,uF,I,E,E,C,C,O,E,E,C,C,E,K,E,E,C,C,O,A,E,E,C,C,O,E,E,C,C,O,E,E,C,C,G,E,C,E,E,C,C,O,A,S,E,C,Q,G,I,O,Q,E,E,E,K,C,C,A,G,I,A,E,E,A,E,K,A,C,A,A,E,A,C,K,C,G,C,A,C,C,S,E,O,E,C,E,I,I,C,A,E,Q,C,C,C,A,C,A,A,O,E,S,C,I,C,S,C,E,I,E,I,E,E,K,C,C,C,C,I,C,C,G,C,A,E,Q,A,C,E,C,C,C,E,C,C,G,C,G,C,S,C,S,C,C,C,C,C,E,I,E,I,C,A,G,A,O,E,A,C,E,A,O,E,C,E,G,Q,E,U,C,C,A,C,E,E,A,C,I,K,C,E,G,C,C,E,E,U,C,E,G,E,C,E,E,U,C,E,G,K,C,C,C,E,c,C,E,C,C,C,C,C,A,C,G,E,K,C,C,C,M,C,E,E,G,A,E,G,C,C,A,E,E,G,C,C,O,C,W,I,A,E,A,E,G,C,I,C,E,E,E,I,C,A,E,G,C,E,E,A,I,A,C,C,C,G,E,C,C,A,C,C,C,O,C,G,E,G,E,C,O,C,G,C,C,C,A,C,C,C,C,C,A,C,C,G,C,G,C,a,C,S,C,E,G,C,O,I,C,U,C,G,A,C,C,C,G,E,C,A,E,E,G,C,G,A,A,C,A,C,A,E,S,C,O,C,S,C,C,C,E,I,E,I,C,A,O,I,A,E,E,E,C,C,A,G,A,K,C,C,C,C,E,I,E,I,E,E,Y,C,C,I,C,S,C,E,G,C,E,E,C,A,E,C,C,E,E,C,A,E,G,A,C,A,C,A,Q,G,E,C,A,A,C,C,K,C,E,I,I,C,E,C,C,A,E,C,E,M,C,E,C,C,A,C,A,C,E,E,C,C,K,C,U,C,S,C,Q,O,O,E,I,C,M,A,E,I,C,E,E,G,M,C,A,E,C,C,C,C,I,C,C,G,C,E,U,C,C,W,O,I,A,C,A,C,E,S,C,I,C,e,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,O,E,a,C,G,I,C,A,C,A,C,A,C,C,S,C,S,C,S,C,E,I,E,I,C,A,O,I,A,E,E,E,C,C,A,G,A,K,C,C,C,C,E,I,E,E,C,C,C,M,C,S,C,E,O,E,C,A,C,C,A,S,C,E,O,E,E,C,A,C,A,A,W,O,E,E,C,C,A,C,A,A,A,C,A,A,C,A,C,E,M,C,S,C,E,O,I,E,E,C,C,A,E,A,E,C,C,A,C,G,qG,I,E,E,C,C,M,S,E,C,E,E,K,E,U,C,M,E,G,E,E,E,E,E,A,C,A,C,A,A,E,A,K,E,C,E,A,E,I,G,C,E,O,A,C,A,E,I,G,S,C,E,G,E,G,E,C,C,E,C,E,I,A,C,S,C,E,G,C,O,E,E,A,I,C,C,A,A,I,E,E,C,A,I,C,K,C,G,A,A,C,A,C,A,A,C,M,A,S,C,wC,C,A,C,A,A,C,A,snB,I,E,E,C,C,C,M,E,wB,C,E,O,A,C,C,C,C,C,C,C,C,C,E,O,A,I,E,A,E,E,E,E,A,E,C,A,C,C,C,E,A,E,A,C,C,O,C,E,S,E,C,C,C,C,C,C,C,C,C,C,C,E,I,E,E,I,C,I,C,I,I,C,E,C,I,E,U,C,E,E,M,C,U,C,E,E,G,E,C,E,I,C,C,G,C,E,G,C,E,G,A,C,C,C,C,E,E,C,A,E,K,C,G,A,A,A,C,A,C,A,E,S,C,K,C,A,E,G,G,C,E,K,I,C,E,G,C,E,G,A,A,C,C,A,I,E,C,A,E,K,C,G,A,A,C,C,K,C,I,C,W,E,C,A,A,C,C,E,S,C,M,C,A,E,G,M,C,E,Q,G,G,C,I,A,M,A,E,A,C,A,A,E,K,C,G,A,A,C,C,K,C,I,C,W,E,C,A,A,C,C,E,S,C,S,C,C,C,A,O,E,E,G,E,G,M,C,W,C,iB,G,C,I,C,iB,E,I,C,iB,E,C,C,I,E,I,C,C,K,C,A,E,S,C,W,C,I,C,I,C,C,A,A,G,K,E,E,A,I,C,U,A,G,E,C,G,C,I,A,C,C,A,A,C,A,C,C,C,A,C,A,E,G,I,G,E,A,C,C,kB,C,mB,gF,I,E,E,C,C,O,E,E,C,C,M,E,C,Q,C,E,O,E,A,M,C,E,O,C,S,C,C,C,E,I,E,I,C,A,E,C,G,K,E,C,A,I,E,E,M,kB,C,O,E,C,M,E,G,E,O,I,G,C,G,E,C,G,K,E,C,E,C,C,E,E,I,K,C,C,E,I,C,A,G,I,A,A,I,E,E,I,O,C,A,A,E,E,A,E,I,C,A,C,C,C,A,E,G,C,G,C,C,C,C,A,C,C,E,I,K,E,C,A,A,E,Q,G,E,A,C,A,C,C,A,E,I,K,C,G,A,E,K,C,A,C,C,A,C,E,E,I,E,C,E,C,A,C,A,C,A,C,A,8lB,I,E,E,C,C,C,M,E,E,C,C,G,I,E,E,C,C,O,E,A,E,C,C,O,E,E,C,C,M,C,E,qB,C,E,O,C,E,S,E,C,A,C,C,E,I,E,E,I,C,I,C,E,I,C,O,E,M,C,E,E,E,C,W,C,E,E,Q,C,C,C,E,C,A,E,S,C,C,C,A,E,W,C,I,C,A,E,O,C,K,C,C,A,E,C,C,C,E,I,A,A,C,E,C,A,O,E,E,G,E,G,M,C,U,C,S,C,E,O,I,C,U,E,C,S,C,E,C,C,E,I,C,C,G,C,U,C,W,I,E,I,C,A,Q,C,A,O,C,G,E,E,G,I,A,E,E,I,C,Q,C,I,C,c,E,C,C,A,I,C,Q,A,C,A,C,E,S,C,S,C,W,I,C,S,C,C,C,A,I,E,I,C,I,O,C,A,I,C,Q,C,I,C,W,C,I,C,M,G,E,M,G,E,A,E,A,C,A,C,E,E,O,C,G,I,C,A,K,I,E,G,C,E,I,C,A,E,I,C,G,Q,C,A,G,C,E,C,E,I,C,A,G,Q,C,I,E,Y,C,C,C,E,E,I,C,E,Q,E,C,A,E,G,C,I,A,C,M,C,S,C,E,wB,C,O,E,A,O,I,E,G,M,E,C,A,E,O,C,E,A,C,A,C,S,C,E,E,G,M,E,C,A,E,K,C,C,C,C,A,C,A,C,U,O,E,G,M,E,A,C,C,C,C,C,A,E,M,E,A,C,I,C,W,C,I,C,A,E,E,M,M,C,K,C,C,A,O,C,C,C,E,K,C,G,C,Q,C,W,O,E,Q,E,C,I,C,A,C,A,C,C,C,A,C,E,U,G,G,gH,E,4B,C,C,G,C,W,M,C,E,4B,C,Q,E,W,C,C,A,G,E,A,C,A,C,Q,M,E,C,M,igB,I,E,E,C,C,G,G,G,sB,C,C,Q,C,S,C,E,I,E,K,gB,C,A,E,I,gB,C,A,E,E,I,kB,C,Q,C,A,I,E,E,A,E,C,G,e,C,A,E,E,E,I,c,C,C,I,E,E,E,G,I,C,E,E,I,G,E,A,C,C,C,C,C,A,C,G,C,C,C,I,E,Y,C,W,a,E,I,C,E,E,A,E,C,C,A,A,C,A,C,A,C,C,M,K,K,G,C,e,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,I,kB,C,Q,C,A,M,C,Q,C,I,C,E,E,G,G,K,K,K,A,A,G,qB,C,C,K,C,K,E,E,E,C,E,I,A,C,C,E,kB,C,e,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,I,kB,C,Q,C,A,M,C,C,Q,K,E,E,I,E,M,K,G,A,E,C,oB,C,C,K,C,K,E,E,E,C,E,I,A,C,C,E,M,M,E,C,M,kG,I,E,E,C,C,I,G,E,E,C,C,M,E,E,C,C,M,S,E,C,E,A,M,C,I,E,I,M,C,S,C,E,I,E,G,E,C,W,gB,C,A,E,E,C,E,E,C,A,A,E,A,C,C,A,E,C,U,A,E,M,E,A,C,E,A,E,sB,C,qB,C,S,C,E,E,A,C,C,A,I,E,C,C,G,E,C,A,A,E,I,C,C,E,O,C,E,E,C,C,A,C,M,A,C,E,C,A,C,A,C,A,C,A,C,E,A,E,A,C,A,A,C,A,C,A,O,G,C,C,C,S,E,C,C,C,sB,C,oB,C,E,A,C,A,A,C,A,A,C,A,C,A,A,E,e,C,E,O,A,C,E,M,C,E,E,C,E,C,C,C,I,E,C,C,C,E,C,C,C,A,O,C,M,A,E,C,2F,E,uB,C,A,E,C,C,M,C,gB,C,S,C,E,O,S,E,E,I,A,C,C,A,I,C,I,C,O,kB,C,A,I,C,O,C,qB,A,C,A,A,C,C,C,45B,I,E,E,C,C,O,E,E,C,C,E,K,E,E,C,C,O,E,E,C,C,I,C,E,E,E,C,C,O,A,E,S,C,E,S,I,I,E,E,I,C,I,C,E,I,C,O,E,M,E,E,E,C,C,c,C,I,C,A,E,S,C,E,C,A,E,S,E,E,E,C,C,M,E,E,E,C,C,S,C,I,C,C,C,A,O,E,E,G,E,G,M,C,I,C,S,C,E,I,E,I,C,C,I,C,I,C,C,A,G,I,E,K,G,C,E,C,C,C,E,C,C,A,C,M,C,c,C,W,G,I,C,M,C,C,K,I,E,uB,A,C,C,A,C,C,S,C,I,C,S,C,E,I,E,I,C,A,E,Y,C,mB,G,E,G,W,E,C,A,C,E,G,M,C,C,A,E,G,a,E,C,E,G,a,C,K,C,I,C,E,G,M,C,C,K,I,I,E,E,E,G,a,C,C,E,E,I,E,C,C,E,I,C,E,E,I,G,A,A,E,K,C,A,I,C,K,C,C,8F,A,C,C,A,C,A,C,E,S,C,K,C,S,C,E,I,E,I,C,A,E,Y,C,W,G,E,G,W,E,C,A,C,E,G,M,C,C,E,G,K,C,E,G,M,E,E,E,A,C,E,Q,C,E,C,C,E,I,E,E,G,E,I,C,A,E,M,C,A,C,E,K,E,A,C,K,C,G,A,A,C,A,C,A,A,C,A,C,E,S,C,Q,C,W,I,E,I,C,A,E,Y,C,W,G,E,G,W,E,C,A,C,E,G,M,C,C,E,G,M,E,E,E,C,C,I,E,E,G,E,I,C,A,E,M,C,A,C,E,K,E,A,C,Q,E,C,A,A,C,C,A,C,A,C,E,S,C,W,C,W,I,C,S,C,I,C,M,E,E,E,C,C,C,S,C,I,C,gB,C,I,A,C,A,C,O,c,C,E,S,C,U,C,K,iB,M,C,O,E,I,C,S,A,E,I,C,E,E,G,G,A,E,C,A,C,A,A,K,4B,A,E,S,C,a,C,S,C,E,O,I,C,c,E,C,A,E,S,C,a,C,I,C,I,C,E,C,C,E,I,C,C,G,C,U,C,S,C,E,O,I,C,c,E,C,A,I,C,uB,C,G,I,C,E,C,C,W,C,E,C,C,E,I,C,C,G,C,e,C,S,C,E,I,E,I,C,A,E,K,C,O,C,E,K,E,O,C,E,A,I,C,E,O,C,O,A,G,E,E,C,I,E,W,C,C,I,C,gB,C,I,C,A,E,I,C,E,C,I,E,C,C,C,S,C,W,E,G,a,C,I,C,A,E,S,C,E,E,C,C,C,A,C,C,A,E,C,C,C,M,C,uB,C,S,C,E,I,A,E,I,C,C,O,C,E,K,I,O,C,E,A,K,E,O,C,A,E,E,I,C,C,A,E,C,G,E,G,C,A,C,C,E,A,E,A,C,A,C,E,S,C,Y,C,W,I,E,I,E,E,Q,C,C,C,K,E,M,C,C,G,C,A,C,C,C,E,K,C,A,C,S,C,C,C,E,O,I,E,E,E,C,C,A,E,A,A,C,A,C,C,A,E,C,O,E,C,C,O,C,E,I,E,A,S,C,E,S,E,C,C,C,E,I,E,E,I,C,I,C,E,I,C,O,E,W,C,E,E,G,G,C,A,C,E,C,A,E,C,I,E,E,G,E,G,M,C,I,C,S,C,S,Q,E,O,E,I,C,W,A,E,I,C,E,E,G,C,A,G,E,C,A,G,C,C,C,E,A,C,C,C,C,A,C,E,K,C,C,E,G,C,C,Q,C,S,Q,E,O,E,I,C,W,A,E,I,C,E,E,G,E,A,G,E,A,C,G,C,A,E,E,A,C,A,C,A,C,C,G,K,C,C,E,K,C,C,kB,Q,E,O,E,I,C,W,A,E,I,C,E,E,G,K,A,E,C,E,C,C,E,C,E,C,A,C,A,A,E,K,I,C,A,I,K,C,C,S,C,U,O,O,E,M,G,I,C,M,A,E,I,C,E,E,G,M,C,A,E,C,C,C,C,E,C,Q,O,E,A,C,A,C,C,A,C,A,C,G,E,E,G,G,Q,C,iB,wkB,E,e,C,E,O,C,E,M,G,E,C,E,I,E,E,I,C,I,C,E,I,C,O,E,M,C,G,C,A,E,C,I,E,E,G,K,E,c,C,E,S,C,O,C,K,W,O,I,C,Q,E,A,C,A,iC,A,E,S,C,U,C,S,C,E,I,E,E,Q,C,C,U,C,I,C,I,C,G,O,A,A,C,C,A,M,E,E,A,I,C,G,C,C,M,C,C,A,C,C,C,E,O,C,C,C,Q,C,W,I,A,E,A,I,C,C,O,C,E,K,I,O,C,E,I,C,M,C,A,G,E,M,A,E,A,O,E,C,C,C,c,E,C,A,C,C,C,E,C,C,O,C,I,C,S,C,E,E,S,C,I,C,I,C,I,C,I,C,M,C,E,C,C,C,A,C,A,A,C,A,A,C,C,C,C,M,E,K,G,C,4G,E,qB,C,C,G,C,W,M,C,E,qB,C,Q,E,I,C,C,A,G,E,A,C,A,C,Q,M,E,C,M,+kB,I,E,E,C,C,M,E,E,C,C,K,E,E,Y,C,C,E,O,C,E,I,K,E,C,C,C,C,C,E,K,G,C,I,E,G,C,C,K,G,K,E,G,C,C,K,G,C,I,E,E,qB,A,E,I,E,E,I,C,I,C,E,I,C,O,E,W,C,E,E,O,C,G,C,E,E,O,C,U,C,E,E,O,C,E,C,A,E,C,C,iB,E,E,E,A,C,E,gB,C,I,I,E,C,C,C,A,Q,C,I,C,G,C,C,C,G,E,G,G,C,C,G,C,I,C,G,C,C,C,I,C,A,M,C,A,C,C,E,G,E,G,M,C,I,C,S,C,E,I,A,E,A,I,C,E,O,C,E,K,O,C,E,K,Y,O,C,E,K,W,O,C,E,K,I,O,A,C,C,I,E,G,C,C,A,A,G,A,E,C,A,C,C,I,C,A,E,G,E,C,C,G,I,C,C,C,C,C,O,E,C,A,E,S,C,I,C,I,C,I,C,E,C,C,C,C,A,C,Q,C,U,C,S,C,E,I,C,c,E,C,A,I,C,W,E,C,A,I,I,E,I,C,K,U,C,G,E,A,I,C,A,C,C,U,O,C,C,C,A,E,G,C,C,K,C,A,K,E,C,A,C,C,C,C,C,C,E,E,I,E,C,E,M,C,C,A,E,E,C,C,A,C,A,C,A,E,I,C,C,C,C,A,C,C,C,A,A,C,C,K,I,C,uB,C,G,C,C,C,E,E,C,C,G,C,C,C,W,C,W,I,A,E,I,C,I,O,C,E,K,W,O,C,E,K,O,C,E,A,K,Y,O,C,A,E,C,E,C,C,C,A,C,C,A,E,G,E,C,G,C,A,A,C,C,A,C,C,A,K,C,E,E,I,C,C,C,C,C,E,K,C,C,G,C,E,C,I,I,E,C,A,C,A,C,E,C,C,C,A,E,C,C,A,A,C,C,C,C,C,C,A,E,K,C,E,C,C,C,C,E,E,C,A,E,C,C,A,E,C,C,A,A,G,C,C,K,C,C,C,C,E,C,C,A,C,A,A,C,C,C,C,A,C,E,O,C,E,mlB,E,Y,C,E,O,C,E,G,M,I,I,E,U,E,K,C,I,C,Y,I,C,O,E,M,C,I,C,A,E,S,E,E,E,C,C,S,E,G,C,A,C,C,K,E,E,G,E,G,M,C,uB,C,S,C,E,I,A,E,K,C,O,C,E,K,E,O,C,E,I,C,M,C,E,K,I,O,C,E,K,E,O,C,E,A,I,C,I,O,C,A,E,E,I,C,C,A,E,C,I,C,C,E,A,C,A,A,C,E,E,I,A,C,G,A,E,C,C,C,K,A,E,C,A,C,C,E,S,C,I,C,S,C,E,I,C,S,E,C,I,C,M,C,E,G,C,A,C,S,E,E,C,C,A,C,C,S,C,Q,C,W,I,A,E,K,E,O,C,E,I,C,M,A,C,C,G,C,O,I,C,E,I,C,W,E,E,E,C,A,E,I,K,C,I,C,I,C,I,C,G,E,C,C,C,M,C,Q,C,I,C,I,C,C,A,C,C,C,C,A,C,A,E,C,C,K,C,O,G,C,4kB,E,M,C,E,O,A,C,E,S,E,C,C,C,S,E,I,C,I,C,E,I,A,C,A,O,E,E,G,E,G,M,C,Q,C,S,C,C,C,E,O,K,G,K,G,C,C,I,A,C,A,C,C,C,A,C,A,E,C,A,C,G,I,Y,G,igB,E,gB,C,C,W,C,S,C,C,C,M,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,E,C,S,C,E,C,A,I,E,E,I,Y,C,Q,C,M,O,E,K,C,C,E,E,I,I,C,A,E,A,E,G,G,E,G,C,C,I,C,E,E,C,E,C,C,C,E,A,E,E,C,G,Q,C,K,C,K,E,E,C,E,E,C,E,A,E,E,A,C,C,E,W,C,S,C,E,I,E,E,I,Y,C,Q,C,A,M,C,O,E,K,C,C,E,E,I,I,G,A,G,E,K,K,C,C,C,A,E,C,C,E,C,C,I,M,E,C,M,6kB,I,E,E,C,C,O,E,E,C,C,G,G,C,E,E,C,C,K,C,G,W,C,E,O,C,E,E,O,E,C,C,C,E,I,E,E,I,C,I,C,E,I,A,C,E,C,C,O,E,S,C,E,E,I,C,A,C,C,E,A,C,M,E,G,C,A,C,C,K,E,E,G,E,G,M,C,Q,C,S,C,C,C,E,G,K,G,C,I,G,C,C,I,C,M,C,C,M,I,C,A,I,C,K,C,E,G,C,E,E,A,I,C,E,C,A,E,I,C,E,O,C,A,O,I,E,A,E,E,I,C,E,C,I,C,c,C,E,E,A,E,C,C,A,C,G,C,O,C,G,C,C,E,C,K,C,E,G,C,A,C,E,C,O,E,I,C,E,A,E,E,E,E,C,K,O,E,C,E,A,I,C,E,A,C,G,E,C,C,A,A,C,A,C,E,S,C,c,C,S,C,C,C,C,C,E,O,K,G,K,G,C,C,E,gB,C,W,C,E,K,C,C,G,C,E,I,C,C,C,C,C,C,C,C,A,C,Q,C,c,C,S,C,C,C,C,C,E,G,K,G,C,I,G,C,C,A,I,C,I,I,C,K,G,G,E,G,A,E,E,C,O,C,O,C,A,C,C,A,E,E,I,E,gB,C,a,C,E,A,C,A,C,A,E,S,C,O,C,S,C,C,C,E,G,I,C,M,C,C,M,A,K,C,8B,C,C,A,I,C,O,E,E,G,C,A,E,G,C,C,Q,C,E,G,A,E,C,A,C,C,G,E,E,C,E,E,C,E,G,C,O,E,I,E,A,I,C,E,G,I,C,E,C,I,C,c,C,I,C,S,C,I,C,E,C,K,C,A,C,A,C,E,S,C,Q,C,S,C,C,C,E,I,E,E,G,E,A,C,A,A,C,A,I,C,I,C,G,A,E,C,C,E,C,C,C,G,E,E,A,A,C,A,C,C,A,A,C,C,C,C,C,A,C,oC,C,C,A,A,G,E,K,E,A,I,C,W,E,C,A,C,C,C,E,K,C,G,C,W,C,W,G,C,I,C,M,C,C,I,A,E,K,E,C,E,A,I,C,E,O,C,A,E,E,G,I,A,C,A,I,C,I,C,I,C,K,C,I,C,S,C,I,C,A,I,C,O,E,E,E,C,C,O,C,E,I,C,A,C,A,I,E,A,E,E,I,C,E,C,I,C,c,C,E,E,A,K,A,C,C,A,I,C,K,C,I,C,A,E,S,C,W,C,I,C,I,C,C,A,A,C,C,C,C,A,C,E,M,A,G,6G,I,E,E,C,C,A,E,A,C,A,C,C,A,C,O,C,E,C,S,A,K,C,A,G,O,C,C,A,E,A,C,C,E,A,C,A,C,C,A,S,C,C,Y,C,S,C,E,I,E,I,A,M,C,C,A,C,A,E,E,E,A,A,E,C,C,E,E,E,E,C,C,O,E,C,C,A,E,I,C,C,U,O,E,I,E,A,C,A,C,C,C,A,C,C,C,G,A,C,U,C,S,C,E,E,E,C,C,C,A,C,C,A,C,Q,A,C,C,O,C,W,O,M,C,I,C,G,M,A,C,A,C,C,C,C,ggB,I,E,E,C,C,K,E,E,E,Q,C,C,Y,C,E,E,S,C,A,c,C,A,E,iB,C,C,Y,C,e,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,I,a,C,Q,C,A,M,C,O,E,K,C,C,E,E,I,I,E,A,G,C,C,C,A,K,A,C,I,C,E,E,E,C,E,I,A,C,C,E,Y,C,S,C,E,I,E,E,I,a,C,Q,C,A,M,C,O,E,K,C,C,E,E,I,I,I,A,G,C,A,C,C,A,E,C,A,C,E,C,C,A,I,M,E,C,M,4kB,I,E,E,C,C,C,M,E,E,C,C,M,C,C,U,C,E,O,C,E,C,Q,E,C,C,C,E,I,E,E,I,C,I,C,E,I,A,C,E,C,C,O,E,S,C,E,E,I,C,A,C,E,C,A,A,C,M,E,E,G,E,G,M,C,c,C,S,C,C,C,C,C,Q,C,K,G,K,G,C,C,I,G,G,E,A,C,E,A,A,E,S,C,c,C,I,C,I,C,E,E,A,I,C,A,C,A,C,M,A,C,I,C,I,C,C,A,E,O,G,G,C,C,O,G,C,E,iB,C,Y,C,E,K,C,C,G,C,O,E,C,C,C,A,C,A,C,E,A,S,C,c,C,S,C,C,C,C,C,E,G,K,G,C,I,G,C,C,I,C,C,A,E,E,C,A,C,A,C,A,G,C,K,C,C,C,C,M,E,S,C,c,C,I,C,I,C,E,E,A,G,E,A,C,C,E,E,E,G,I,A,A,C,G,G,E,C,C,O,E,C,C,E,K,C,C,E,A,E,I,C,E,E,E,A,C,G,E,E,A,A,E,G,c,C,c,C,E,C,A,C,C,O,G,G,E,E,A,E,O,G,M,C,C,C,A,C,C,C,C,A,C,E,K,M,G,iG,I,E,E,C,C,O,E,S,C,E,A,S,C,Q,E,C,C,C,E,K,G,K,E,E,G,A,E,E,E,C,mB,C,E,I,C,G,C,C,C,A,C,C,I,C,A,E,S,C,Q,C,S,C,C,C,C,C,E,O,K,G,K,G,C,C,I,I,C,mB,C,I,C,G,C,C,M,C,E,E,C,A,C,C,C,A,C,E,C,E,qB,C,G,C,A,E,A,I,G,klB,I,E,E,C,C,O,E,c,C,E,O,C,E,K,I,E,C,C,C,E,K,G,C,I,E,E,S,C,G,A,E,I,E,E,I,C,I,C,E,G,C,I,C,I,G,E,O,C,E,C,A,E,O,E,G,C,A,C,C,K,E,E,G,E,G,M,C,K,C,S,C,E,I,E,E,C,C,E,C,A,O,C,A,G,I,C,O,C,Y,E,I,C,A,G,G,C,A,C,A,O,E,E,E,C,A,A,G,E,E,C,G,G,C,E,I,C,C,E,I,C,C,C,A,C,K,M,C,C,E,E,G,A,E,C,A,G,I,C,O,E,E,E,C,A,C,C,G,C,C,E,E,G,A,E,C,A,C,E,I,O,E,A,C,M,E,A,C,C,C,A,C,A,A,C,E,S,A,G,olB,E,a,C,E,O,C,E,I,K,kD,C,A,O,E,E,G,E,G,M,C,K,C,S,C,E,I,C,O,E,E,E,C,C,E,E,C,C,E,C,A,U,C,A,I,C,U,M,E,I,E,C,C,E,C,A,O,C,A,E,G,C,C,C,I,A,E,C,A,G,A,G,E,E,C,G,G,C,E,I,C,C,E,I,C,C,C,A,C,K,M,C,E,C,C,E,A,A,C,E,E,E,E,C,G,E,E,G,A,E,C,A,G,I,C,O,E,E,E,C,A,C,C,G,C,E,C,C,E,A,A,C,E,E,E,E,C,G,E,E,G,A,E,C,C,E,I,O,E,A,C,M,E,A,C,C,C,A,C,A,A,C,A,E,C,C,I,E,C,c,G,4G,I,E,E,C,C,O,E,a,C,G,A,C,E,C,C,G,G,E,a,C,E,U,C,C,A,E,I,C,E,a,C,+G,I,E,E,C,C,C,M,E,c,C,G,A,C,E,C,C,I,E,E,c,C,E,W,C,C,A,E,K,C,E,c,C,mlB,E,W,C,E,O,C,E,E,O,E,C,C,C,E,I,E,E,I,C,I,C,E,I,A,C,E,C,C,O,E,S,C,E,E,I,C,A,C,E,C,A,A,C,M,E,E,G,E,G,M,C,Q,C,S,C,C,C,Q,C,K,G,C,I,G,C,C,E,C,E,A,A,E,S,C,Q,C,I,C,I,C,E,G,C,C,C,C,C,C,K,C,E,G,C,A,C,K,C,E,G,C,A,C,S,C,K,C,I,C,C,A,I,C,A,C,C,E,S,C,O,C,S,C,C,C,E,O,E,C,E,A,I,C,M,C,A,C,C,S,C,O,C,I,C,I,C,E,G,A,E,C,C,A,C,A,Q,C,E,E,C,A,C,C,C,A,C,Q,C,c,C,S,C,C,C,C,C,Q,C,K,G,C,I,G,C,C,I,E,G,E,A,C,C,C,A,I,E,C,E,E,E,C,K,C,C,C,C,A,E,S,C,c,C,I,C,I,C,E,E,A,I,C,A,C,A,C,I,C,C,G,C,C,A,C,C,A,C,C,C,C,A,C,A,E,C,C,C,G,G,W,G,qlB,E,c,C,E,O,C,E,K,I,kD,C,A,O,E,E,G,C,C,A,C,A,E,A,C,C,I,G,A,c,G,8G,I,E,E,C,C,C,K,G,c,C,G,A,C,E,C,C,I,E,E,c,C,E,W,C,C,A,E,K,C,E,c,C,4lB,I,E,E,C,C,C,M,E,E,C,C,M,E,I,gB,C,E,O,C,E,S,E,A,C,C,C,E,I,E,E,I,C,I,C,E,I,A,C,E,C,C,O,E,S,C,E,E,I,C,A,C,E,C,A,A,C,M,E,E,G,E,G,M,C,c,C,S,C,C,C,C,C,Q,C,K,G,C,I,G,C,C,A,I,C,K,E,C,E,A,A,E,S,C,c,C,I,C,I,C,E,E,A,I,C,A,C,A,C,M,A,C,I,C,I,C,C,A,E,O,G,G,C,C,O,G,C,E,sB,C,qB,C,W,O,E,K,E,I,E,E,C,C,A,C,A,C,C,C,A,S,C,c,C,S,C,C,C,C,C,E,G,K,G,C,I,G,C,C,I,C,C,A,E,E,C,A,C,A,C,A,G,C,K,C,C,C,C,M,E,S,C,c,C,I,C,I,C,E,E,A,G,E,A,C,C,E,E,E,G,I,A,A,C,G,G,E,C,E,E,E,O,G,E,C,M,G,C,C,E,K,C,C,E,A,E,I,C,E,E,E,A,C,G,E,E,A,A,E,G,mB,C,oB,C,E,C,A,C,C,O,G,M,E,C,C,C,C,A,C,E,A,C,U,G,C,6lB,E,uB,C,E,O,C,E,S,K,6C,C,A,O,E,E,G,E,G,M,C,K,C,S,C,E,I,C,O,E,E,E,A,C,C,E,A,E,A,C,A,C,A,E,I,C,A,U,C,A,I,C,U,M,G,I,E,A,C,C,E,C,A,C,A,E,C,A,O,C,A,E,G,C,C,C,I,A,E,C,A,G,A,G,E,E,C,G,G,C,E,I,C,C,E,I,C,C,C,A,C,K,M,A,G,C,C,C,C,A,C,E,E,E,E,C,G,E,E,G,A,E,C,A,G,I,C,O,E,E,E,C,A,C,C,G,C,E,C,C,E,A,A,C,E,E,E,E,C,G,E,E,G,A,E,C,C,E,I,O,E,A,C,M,E,A,C,C,C,A,C,A,A,C,A,E,C,C,I,G,S,K,G,gI,I,E,E,C,C,M,G,C,sB,C,G,A,C,E,C,C,M,E,M,iB,C,E,oB,C,C,A,E,c,C,E,uB,C,4mB,I,E,E,C,C,C,M,E,E,C,C,G,I,E,oB,C,E,O,C,E,S,E,A,C,C,C,E,K,G,C,I,E,C,C,C,K,G,C,I,E,G,C,C,I,E,E,I,C,I,C,E,W,M,C,E,G,E,A,C,C,E,I,C,O,E,S,C,E,E,K,A,C,A,C,C,A,E,K,C,C,C,C,C,C,A,O,E,E,G,E,G,M,C,K,C,W,I,E,E,A,E,E,C,C,A,A,E,C,C,C,O,C,E,K,E,O,C,C,E,C,C,E,A,A,C,E,E,I,C,E,I,E,G,C,C,A,E,C,A,I,C,K,C,E,I,C,C,E,E,E,C,G,G,C,E,I,C,C,E,I,E,C,C,C,E,G,E,C,E,G,C,C,E,E,G,A,E,C,A,C,E,I,O,E,A,C,M,E,A,C,C,C,C,A,e,C,E,C,A,E,A,C,A,E,C,C,I,G,M,Q,E,C,G,E,S,C,E,S,E,C,C,C,C,C,E,K,G,I,G,E,K,E,C,C,C,A,I,E,E,I,C,I,C,E,I,A,C,E,C,C,O,E,S,C,E,E,I,C,A,C,C,E,A,C,I,C,E,E,C,C,I,E,E,E,A,C,E,E,C,E,K,C,C,E,C,A,C,C,K,E,E,G,E,G,M,C,Q,C,S,C,C,C,E,G,K,G,C,G,G,C,G,M,C,Q,C,G,E,C,E,E,E,Y,C,K,C,A,G,C,I,C,E,C,C,M,E,S,C,Q,C,I,C,I,C,E,G,A,E,C,C,A,C,M,E,E,G,C,A,E,I,A,E,I,C,M,G,C,I,C,I,C,C,A,O,I,C,G,C,G,E,C,C,C,C,I,C,E,E,C,A,C,C,C,A,C,Q,C,c,C,S,C,C,C,C,C,E,K,G,K,G,C,C,I,C,K,C,E,K,C,C,C,G,C,A,E,E,G,I,A,C,A,O,E,I,C,A,I,C,C,A,E,I,C,A,E,W,A,C,C,A,C,A,C,A,C,E,S,C,c,C,S,C,C,C,C,C,E,K,G,I,G,C,C,C,C,E,S,C,Q,C,S,C,C,C,E,I,I,A,E,E,C,M,C,O,E,S,C,Q,C,I,C,I,C,E,E,C,A,C,C,C,A,C,U,C,S,C,C,C,E,G,C,C,K,G,C,C,K,C,C,E,C,C,K,G,C,C,K,C,C,M,C,C,K,G,C,C,K,C,C,C,K,C,C,M,C,C,K,O,C,C,C,O,A,C,C,K,C,C,C,K,C,C,A,C,A,C,C,A,C,A,C,C,C,A,C,E,Q,G,E,C,C,a,C,c,0F,I,E,E,C,C,C,M,E,K,C,I,E,U,C,S,C,E,O,E,Q,A,E,A,C,C,C,A,E,K,C,E,M,C,A,C,I,I,O,G,E,E,E,C,C,A,C,A,C,C,C,C,C,M,C,E,O,C,E,O,E,O,C,C,W,O,E,Q,A,E,A,C,C,A,C,C,C,C,E,K,A,C,A,qG,I,E,E,C,C,M,E,W,C,E,O,A,C,E,E,K,C,E,E,A,U,C,E,G,K,C,A,C,A,sI,I,E,E,C,C,M,E,E,C,C,C,M,S,E,C,C,C,O,C,C,E,C,K,C,C,C,A,C,A,A,E,iB,C,E,O,A,C,E,O,C,C,K,K,C,E,E,E,A,C,C,A,C,C,A,C,E,C,C,I,C,C,C,E,I,C,O,C,E,O,A,C,E,G,I,E,A,W,C,E,E,E,A,C,C,A,C,C,A,C,E,C,C,I,C,C,C,E,I,C,I,C,E,O,A,C,C,C,A,E,I,E,Q,C,C,A,O,E,E,C,C,C,A,E,C,E,C,A,C,A,C,U,C,0F,E,W,C,S,C,E,O,C,E,Q,E,O,C,C,M,E,U,E,O,C,A,C,C,C,iG,I,E,E,C,C,K,G,S,C,E,O,A,C,E,A,M,C,E,U,O,E,G,E,E,C,C,G,C,C,A,C,A,C,K,K,K,6F,I,E,E,C,C,O,C,C,E,C,C,M,E,mB,C,E,O,A,C,E,O,E,C,M,G,C,C,C,E,U,C,C,A,C,A,yG,I,E,E,C,C,M,E,e,C,E,O,A,C,E,M,C,K,C,C,a,E,E,U,O,E,C,I,C,C,C,C,K,C,C,C,K,K,E,C,C,A,C,A,0H,E,gC,C,E,O,A,C,E,O,A,S,C,M,M,K,A,C,G,C,K,A,Q,C,C,O,E,G,gB,C,A,C,G,E,G,C,C,0H,C,A,C,A,+B,S,U,A,A,O,G,I,K,M,E,M,C,Q,C,C,K,C,Q,C,A,Y,A,C,A,uF,E,iB,C,E,E,Q,C,K,Y,E,C,mF,I,E,E,C,C,M,C,E,E,C,C,K,G,U,C,E,O,A,C,E,C,M,A,E,U,C,K,G,E,G,E,C,C,C,C,I,I,C,A,C,A,C,A,G,w2D,I,E,E,C,C,K,G,kC,C,E,O,A,C,2B,M,+D,E,E,E,O,E,C,A,yD,M,C,E,E,E,I,A,E,E,C,U,E,C,E,A,E,I,E,C,C,K,E,A,A,E,E,A,E,C,M,C,E,E,C,2B,M,C,E,E,I,G,C,kB,G,E,M,M,C,E,E,I,G,C,c,E,I,E,C,wC,E,I,O,E,C,2B,C,E,oB,C,E,O,A,C,E,O,E,E,M,E,O,E,C,I,C,C,E,C,I,G,C,C,A,C,A,E,K,m1E,I,E,E,C,C,O,A,E,E,C,C,K,E,E,E,C,C,C,M,E,E,C,C,O,E,E,C,C,E,K,E,E,A,C,C,O,E,E,C,C,K,C,C,E,E,C,C,O,E,E,C,C,G,G,A,E,E,C,C,O,E,E,C,C,G,I,C,Q,E,C,E,O,I,E,G,O,C,S,C,E,I,E,C,A,C,E,U,C,E,C,A,G,E,U,C,E,C,Q,C,C,C,M,E,C,Q,C,E,O,A,C,C,C,M,C,gE,C,A,C,A,C,A,C,A,A,S,E,C,E,O,C,G,E,U,C,S,C,E,I,I,C,C,C,C,C,C,E,G,G,E,C,E,M,C,C,A,E,C,A,E,I,C,C,C,C,A,C,C,C,A,E,Q,A,E,A,C,A,C,A,C,A,A,S,E,C,E,M,C,I,E,U,C,S,C,E,E,I,C,A,S,C,E,E,M,E,A,C,E,I,C,G,A,E,A,C,C,M,A,E,C,A,C,C,S,C,E,O,E,K,C,E,A,C,A,C,A,C,I,C,I,C,E,oB,C,A,C,A,C,A,C,A,A,S,E,C,E,O,A,I,E,U,C,S,C,c,I,I,E,E,G,E,E,C,C,E,E,C,C,E,I,C,E,E,I,G,C,I,E,E,C,I,C,G,E,I,C,G,A,E,A,C,C,I,C,C,A,M,A,kG,E,Q,A,E,A,C,A,C,A,C,A,A,S,E,C,E,O,I,C,C,U,C,S,C,E,C,M,G,A,C,C,C,I,gI,E,E,a,C,iE,G,E,E,C,I,C,A,E,I,C,G,A,E,A,C,C,I,C,C,A,K,C,E,C,yS,E,Q,A,E,C,U,C,E,G,K,C,C,C,A,O,C,E,O,E,K,C,E,A,C,A,C,A,A,C,A,C,A,C,A,A,S,E,C,E,O,E,E,M,O,qB,C,G,C,A,E,Q,C,A,C,A,C,C,O,A,C,E,A,G,G,E,Q,E,U,C,C,M,E,G,A,C,G,E,E,C,E,C,E,mB,C,G,E,C,E,E,E,G,E,C,A,C,C,W,A,C,G,E,C,E,E,E,G,E,C,A,C,C,G,M,C,G,E,C,E,E,E,G,E,C,A,C,C,C,c,C,G,E,C,E,E,E,G,E,C,A,C,C,O,G,C,G,E,C,E,E,E,G,E,C,A,C,C,E,kB,C,G,E,C,E,E,E,G,A,E,C,C,E,E,S,uB,C,E,C,C,C,C,A,C,oB,C,E,E,a,C,E,E,A,U,C,C,E,E,Q,I,C,E,E,S,Q,C,E,E,c,Q,C,uB,mF,E,e,C,E,O,A,C,C,C,C,C,C,C,C,C,A,E,I,C,G,K,G,C,C,K,G,C,I,G,C,C,C,I,E,E,O,C,C,O,I,I,A,E,A,C,C,E,C,C,A,I,C,O,C,C,I,C,I,C,C,C,C,A,C,W,E,A,C,A,C,G,E,C,A,C,C,G,C,G,C,E,I,E,A,C,C,C,K,C,C,W,C,gF,I,E,E,C,C,O,E,E,A,C,C,O,E,E,C,C,M,E,C,S,C,E,O,A,C,C,C,A,E,I,G,K,G,C,I,G,C,C,E,O,C,S,C,C,C,E,E,I,K,C,E,wB,C,E,Q,C,C,E,O,E,e,C,E,E,M,C,I,O,E,I,C,E,C,A,C,C,C,A,C,C,C,C,S,O,E,e,C,E,E,M,C,I,O,E,Q,A,E,A,C,C,E,C,C,C,C,O,C,E,O,E,e,C,E,E,M,C,I,O,E,K,C,E,A,C,A,C,A,E,C,C,C,A,A,C,A,A,C,A,C,A,qG,I,E,E,C,C,O,E,W,C,E,O,A,C,C,C,E,A,M,C,K,G,C,I,G,C,C,E,O,C,S,C,C,C,E,E,G,C,E,E,K,C,C,W,O,E,I,K,C,E,C,C,G,C,C,A,A,C,A,A,A,C,A,C,yG,I,E,E,C,C,O,E,E,A,C,C,O,E,C,C,C,C,O,E,G,e,C,E,O,A,C,C,C,E,O,A,E,I,K,C,G,E,C,C,C,E,W,C,G,E,I,C,I,C,G,C,K,C,C,C,iG,I,E,E,C,C,O,E,E,A,C,C,O,E,C,C,C,C,O,E,G,Y,C,E,O,A,C,C,C,E,I,G,E,C,Q,C,G,E,C,C,C,E,W,C,G,E,I,C,I,C,G,C,K,C,C,C,8F,I,E,E,C,C,C,M,E,a,C,E,O,A,C,C,C,E,E,K,C,G,E,U,C,S,C,E,I,C,C,C,C,A,O,E,O,C,C,W,C,G,E,G,G,C,C,C,Q,A,E,C,C,E,I,C,C,C,C,A,E,C,C,C,A,A,E,M,E,A,A,I,C,Q,E,C,A,C,C,A,C,A,C,A,C,A,0G,I,E,E,C,C,C,M,E,E,C,C,M,C,E,E,C,C,M,A,E,E,C,C,O,E,E,c,C,E,O,A,C,C,C,E,K,E,I,A,E,U,C,S,C,E,I,E,M,C,A,E,e,C,E,E,M,C,I,E,C,C,E,E,M,C,E,C,A,E,e,C,E,E,M,C,U,E,E,C,C,A,C,A,C,E,C,E,A,E,I,E,A,C,C,K,C,E,E,I,C,A,A,C,K,E,C,A,E,K,C,E,C,A,C,C,K,A,A,E,E,A,E,M,A,E,C,A,E,I,C,E,C,A,C,C,A,C,C,A,E,C,C,A,C,A,A,C,U,O,E,U,O,E,K,C,C,E,E,I,A,C,E,C,C,M,A,C,C,A,C,A,C,A,C,A,C,A,A,K,0G,I,E,E,C,C,C,M,E,E,C,C,M,G,E,mB,C,E,O,A,C,C,C,E,G,C,E,G,C,C,C,A,I,C,C,yB,C,C,A,O,I,E,U,C,S,C,E,E,e,C,E,E,M,C,I,I,E,C,C,I,E,C,a,C,E,C,A,E,e,C,E,E,M,C,I,E,I,E,A,C,I,C,S,C,E,E,I,A,C,C,C,Q,A,E,C,A,E,I,C,E,C,G,C,C,A,C,A,C,A,C,A,C,C,E,E,C,C,A,A,C,A,A,C,A,A,C,A,oH,I,E,E,C,C,O,E,E,A,C,C,M,G,O,mB,C,E,O,A,C,C,C,E,O,E,M,M,S,C,E,kC,C,G,E,A,C,A,M,C,C,2F,I,E,E,C,C,M,E,A,E,C,C,K,E,E,E,C,C,G,G,E,E,C,C,M,C,E,E,C,C,O,E,E,A,C,C,O,E,E,C,C,E,G,E,E,E,C,C,O,A,E,E,C,C,M,C,E,E,C,C,O,E,E,A,C,C,O,E,E,C,C,K,E,E,E,C,C,G,I,E,O,E,C,E,O,A,C,C,C,A,E,G,C,G,E,E,C,E,C,E,mB,C,G,E,C,E,E,E,kB,C,E,G,A,G,E,C,C,C,Q,C,G,E,C,E,E,E,a,C,E,G,A,G,E,C,C,C,M,C,G,E,C,E,E,E,e,C,E,G,A,G,E,C,C,C,Y,C,G,E,C,E,E,E,qB,C,E,G,A,G,E,C,C,C,O,C,G,E,C,E,E,E,gB,C,E,G,A,G,E,C,C,C,iB,C,G,E,C,E,E,E,0B,C,E,G,A,A,M,A,C,C,A,gC,C,E,C,E,C,C,0F,I,E,E,C,C,O,E,C,C,C,C,M,G,I,C,E,K,E,A,C,C,C,C,C,O,E,E,K,C,C,E,C,E,G,A,E,I,C,C,C,E,C,E,C,E,C,C,wF,I,E,E,C,C,O,E,E,C,C,O,E,E,C,E,A,G,I,E,I,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,K,O,C,G,C,C,C,I,E,I,C,E,E,A,C,M,C,C,4F,I,E,E,C,C,C,M,E,E,C,C,M,A,E,U,C,E,O,A,C,C,C,C,C,I,C,C,E,Q,E,C,G,E,W,G,C,C,C,A,C,A,C,A,C,C,A,E,E,O,C,E,E,K,E,K,C,E,E,C,C,A,M,C,C,C,E,E,U,C,E,O,C,C,A,C,E,O,E,O,C,C,E,C,C,A,E,C,C,A,C,C,C,C,C,C,A,C,2I,I,E,E,C,C,M,C,E,E,C,C,G,I,E,E,C,C,O,E,E,A,C,C,K,C,S,E,C,C,C,E,I,M,E,A,E,I,C,E,E,C,I,C,E,A,E,C,I,C,A,G,A,C,O,E,O,E,E,I,A,S,C,sC,C,C,A,G,C,C,C,E,E,K,E,E,I,A,E,C,E,C,G,C,E,E,C,A,E,C,A,A,C,A,A,C,A,C,E,G,I,A,E,E,C,I,A,C,E,E,C,G,C,E,E,C,E,C,A,C,C,C,C,E,E,A,I,E,E,A,C,E,E,C,G,C,E,C,C,A,I,C,C,C,E,C,E,A,E,E,E,C,E,C,C,A,E,G,E,C,G,C,A,E,E,M,C,G,A,C,A,C,A,C,C,e,C,G,C,C,gB,C,E,C,E,C,C,Y,C,E,S,I,K,E,C,C,C,C,C,E,I,C,I,C,E,E,C,C,C,K,C,E,G,C,A,C,K,C,E,G,C,A,C,Q,C,G,C,E,C,C,A,E,K,E,S,C,O,C,S,C,E,O,E,I,C,E,C,C,E,E,C,C,E,G,C,E,C,S,C,C,C,C,C,E,I,A,E,E,G,I,C,E,G,E,K,C,E,A,G,C,C,K,C,A,M,G,C,C,C,I,I,E,K,E,E,A,G,E,A,C,A,C,A,C,A,C,A,I,A,I,E,K,A,E,E,C,A,I,C,A,A,C,C,C,C,C,G,E,E,G,C,C,C,C,C,G,E,E,C,C,A,C,A,C,I,C,S,C,A,C,C,C,C,C,C,I,G,E,U,C,C,K,E,K,E,E,G,C,C,C,G,C,C,M,C,C,G,E,E,C,E,A,C,E,C,C,A,E,C,A,C,E,E,C,C,A,K,C,Y,C,W,I,A,E,E,G,I,C,E,G,E,K,C,E,A,G,C,C,K,C,A,E,G,C,E,E,E,A,E,C,G,E,C,A,G,E,E,A,U,C,W,O,C,C,C,C,C,E,G,E,E,A,K,C,C,C,A,G,C,E,I,E,A,A,S,C,gC,G,C,C,C,I,C,C,C,E,C,C,Q,C,S,C,E,O,I,E,G,C,E,C,C,C,C,A,A,C,U,C,S,C,E,O,I,E,G,M,C,C,E,C,A,C,A,C,C,C,a,C,W,O,E,U,U,A,C,A,C,E,oB,C,I,E,G,C,C,A,E,A,G,A,C,C,K,c,C,oB,mF,I,E,E,C,C,C,M,E,E,C,C,M,E,Y,C,E,O,A,C,E,G,G,C,C,C,E,C,G,A,U,E,U,E,E,U,C,E,C,G,C,E,E,U,C,E,C,S,C,A,A,C,A,C,mG,E,U,C,A,E,C,C,M,C,gB,C,S,C,E,O,S,E,E,I,A,C,C,A,I,A,C,I,C,Y,C,A,I,C,O,C,yB,A,C,A,A,C,C,C,sG,I,E,E,C,C,K,C,G,a,C,E,O,A,C,C,C,E,E,E,E,E,K,C,C,C,O,E,I,G,I,O,C,S,C,C,C,E,I,E,G,C,C,A,E,C,C,A,E,K,C,C,I,C,S,C,E,E,E,E,C,A,C,A,C,C,C,C,C,E,C,E,I,I,C,W,E,E,G,E,A,A,C,C,A,A,C,C,G,A,C,C,O,C,C,A,E,I,A,E,U,C,C,A,C,A,C,A,A,C,A,C,A,C,A,wG,I,E,E,C,C,K,E,E,E,C,C,O,E,c,C,E,O,A,C,C,C,E,G,C,E,G,I,C,C,C,O,E,I,G,I,O,C,S,C,C,C,E,I,E,I,E,E,Y,C,C,I,C,S,C,E,E,G,E,A,A,C,C,M,G,E,A,C,A,C,K,C,E,I,I,C,W,E,E,E,G,A,C,C,O,C,C,A,E,I,A,E,U,C,C,A,C,A,C,A,C,A,E,I,K,C,E,C,C,A,C,A,K,C,C,yG,E,uB,C,A,E,C,C,M,C,gB,C,S,C,E,O,S,E,E,I,A,C,C,A,I,C,I,C,O,kB,C,A,I,C,O,C,uB,A,C,A,A,C,C,C,sG,E,a,C,A,E,C,C,M,C,gB,C,S,C,E,O,S,A,C,E,E,I,A,C,C,A,I,C,C,G,C,e,C,A,I,C,O,C,C,C,A,C,C,C,E,C,mG,E,a,C,A,E,C,C,M,C,gB,C,S,C,E,O,S,A,C,E,E,I,A,C,C,A,I,C,C,G,C,e,C,A,I,C,O,C,C,C,A,C,C,C,E,C,iG,E,W,C,E,O,A,C,E,E,K,C,I,Q,I,E,C,K,C,E,C,E,C,C,4G,I,E,E,C,C,M,C,E,E,C,C,E,K,E,E,C,C,O,E,E,C,C,O,E,E,A,C,C,O,E,E,C,A,C,O,C,C,E,C,C,O,I,K,E,C,E,M,I,E,E,U,C,E,C,A,C,C,A,C,W,C,E,gB,C,S,C,E,O,S,A,C,E,K,G,C,G,C,E,I,C,C,E,I,A,C,C,A,I,C,O,C,sB,C,A,I,C,I,C,c,C,A,I,C,I,C,C,C,A,C,C,A,C,A,A,E,O,C,E,O,A,C,A,C,C,E,E,E,E,E,W,C,G,C,E,C,C,C,A,C,C,C,C,A,C,E,K,C,C,A,O,E,C,G,C,C,C,C,C,A,C,C,C,C,E,A,C,A,I,C,E,E,I,C,E,E,I,C,E,G,E,I,E,E,E,A,E,E,S,C,C,C,K,E,E,Q,E,E,E,M,E,G,G,C,E,A,E,A,E,I,C,E,E,C,E,G,C,E,E,E,C,E,A,C,E,I,E,G,E,E,E,A,E,E,I,A,S,C,sB,C,C,A,O,E,O,C,S,C,C,C,E,I,E,E,E,I,C,A,E,A,C,C,A,A,E,E,C,K,C,A,C,A,E,E,E,a,E,C,E,E,M,C,I,G,C,E,W,E,C,A,E,Q,C,C,E,C,E,E,C,E,E,O,C,E,I,C,E,A,C,C,A,C,S,C,G,A,M,C,C,A,C,A,A,E,K,C,E,C,A,A,C,A,C,A,E,C,C,A,C,C,A,C,C,I,K,C,E,U,c,C,E,Q,C,C,Q,G,E,W,C,C,C,A,C,E,C,A,E,A,C,G,C,A,E,C,E,E,A,C,A,C,A,A,C,A,E,E,C,C,C,A,C,E,C,C,K,C,E,A,C,K,C,I,C,M,E,K,E,E,M,A,A,C,E,E,I,A,G,C,C,W,C,C,C,A,C,C,A,C,G,A,C,A,A,C,C,A,C,A,A,C,C,C,C,C,I,C,C,A,E,A,A,G,E,G,C,C,A,K,E,E,A,E,A,C,C,C,A,C,A,C,A,E,E,C,A,C,A,C,C,C,A,A,C,A,A,C,4F,I,E,E,C,C,O,E,E,C,C,M,E,C,G,C,E,I,G,A,C,C,C,A,E,O,E,O,C,S,C,C,C,E,I,E,C,C,A,C,C,I,K,C,E,wB,C,E,Q,C,C,E,E,I,C,E,C,G,C,A,E,E,G,A,E,A,C,C,A,C,A,A,C,A,A,C,A,A,C,A,mgB,I,E,E,C,C,I,G,E,K,A,C,O,A,C,E,gB,C,E,O,A,C,E,O,A,E,G,C,A,S,C,E,O,A,E,G,A,C,C,A,A,A,A,C,G,C,A,C,A,C,C,G,E,E,E,C,O,A,E,C,C,A,C,C,A,C,A,A,C,A,C,A,sgB,I,E,E,C,C,O,A,E,E,C,C,C,M,E,E,C,C,O,E,E,C,A,C,O,E,E,C,A,C,O,E,C,C,C,C,G,I,E,qB,C,E,O,E,C,C,C,C,C,C,C,E,G,C,C,I,C,C,M,E,G,C,G,O,I,C,E,Q,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,O,E,E,E,G,I,C,C,A,C,A,G,C,C,E,C,C,E,C,E,gB,C,G,C,C,K,E,E,C,C,C,E,E,A,E,G,C,G,E,M,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,O,E,E,G,K,C,A,G,C,A,C,G,A,C,C,E,C,E,W,C,G,E,I,C,I,C,G,C,C,A,I,C,C,C,Q,I,E,I,C,A,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,I,C,C,Y,C,C,C,C,E,E,C,I,C,G,E,U,C,S,C,E,I,E,E,A,K,I,C,G,G,E,C,C,C,C,A,E,G,C,A,C,E,C,C,G,A,C,A,C,E,C,C,G,A,C,E,E,A,C,C,E,C,E,I,C,e,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,G,E,C,I,E,C,C,A,K,A,E,C,A,G,I,E,E,C,W,E,K,A,C,G,A,A,C,C,A,I,C,A,C,C,E,K,C,C,A,C,C,C,C,C,C,C,A,C,A,A,C,E,E,E,C,A,E,E,E,C,C,E,E,A,C,A,G,C,A,G,E,K,E,C,C,C,C,A,G,E,A,E,C,C,G,C,C,C,A,C,A,A,A,C,A,A,sG,I,E,E,C,C,M,G,E,U,C,E,O,A,C,C,C,C,C,C,C,K,E,E,qB,C,G,E,A,E,E,C,K,C,C,C,C,iG,I,E,E,C,C,O,E,E,c,C,E,O,A,C,C,C,C,C,E,G,I,E,A,qB,E,E,E,A,E,E,C,K,C,C,C,C,qG,I,E,K,A,C,O,C,A,E,M,C,K,S,C,E,M,C,E,O,C,E,K,C,C,I,C,A,E,oB,C,E,O,A,C,E,G,C,G,E,E,A,I,C,C,A,I,E,C,C,C,C,C,C,C,A,A,G,E,G,E,E,C,C,C,A,I,C,E,I,C,A,I,C,C,A,G,C,E,A,I,A,G,C,I,E,O,G,A,E,G,C,C,E,C,I,A,E,E,A,A,C,E,E,E,C,C,A,C,I,C,E,E,C,C,S,C,E,O,C,C,E,A,C,A,C,C,I,C,E,C,A,C,A,A,M,C,I,C,E,E,E,C,I,C,A,C,A,sG,E,Y,C,E,O,A,C,C,C,E,C,M,A,E,E,I,C,S,C,C,C,C,C,E,O,C,C,E,C,A,C,C,C,C,C,A,C,C,C,C,C,C,A,A,C,A,A,2H,I,E,E,C,C,C,M,E,E,C,C,O,E,E,C,C,G,I,E,E,C,C,C,G,C,E,E,C,C,O,E,E,C,A,C,O,E,E,C,C,O,C,C,E,C,C,O,E,E,C,C,M,C,I,K,E,C,C,C,C,C,E,O,C,I,G,C,I,E,E,Q,A,E,S,C,E,E,E,O,E,E,I,I,E,E,E,I,C,A,E,A,A,I,C,C,G,E,C,C,A,C,C,A,E,C,G,C,M,C,E,E,A,E,O,E,E,I,E,E,E,E,C,C,C,C,C,C,G,G,E,C,C,A,C,A,C,E,E,G,C,E,wB,C,E,Q,C,C,E,C,C,C,C,C,E,C,E,C,C,G,E,E,C,C,C,A,C,E,A,E,I,C,E,C,C,C,E,C,A,C,C,C,C,A,C,A,C,A,A,C,W,A,E,G,E,C,E,K,A,E,A,C,A,C,C,A,C,A,C,I,C,C,C,C,C,C,A,C,C,A,C,E,C,A,E,C,C,C,C,E,C,A,C,A,A,M,C,C,C,E,C,C,C,C,C,E,E,E,A,K,E,Q,C,E,E,G,G,C,A,A,A,C,A,C,A,C,E,C,S,C,E,O,M,C,G,E,C,C,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,K,O,C,G,C,C,A,C,C,U,O,C,G,C,C,A,C,C,oB,C,G,C,C,A,E,I,C,E,A,E,I,C,A,G,C,E,C,E,M,C,E,K,E,I,C,E,C,G,I,E,A,C,C,E,A,E,U,C,E,E,E,E,E,G,A,I,A,C,E,O,E,Y,C,E,E,A,C,C,E,A,C,O,C,C,C,A,O,E,E,I,A,C,E,G,C,C,W,C,I,C,C,C,E,C,C,G,C,C,C,C,Q,C,kB,uF,I,E,E,C,C,O,E,E,A,C,C,O,E,E,A,C,C,O,C,C,c,C,E,O,A,C,C,C,C,C,C,C,C,A,C,C,C,C,C,C,A,C,E,I,E,E,C,A,C,C,C,C,A,E,A,C,C,A,C,C,G,E,A,C,E,Q,C,G,E,I,C,C,E,C,C,C,E,C,E,K,A,E,A,C,A,C,A,E,O,E,C,E,O,E,E,E,A,G,E,A,C,A,C,A,C,A,A,C,A,C,E,C,C,A,C,C,A,C,O,C,C,E,G,E,C,G,C,G,A,E,C,C,A,E,E,A,C,E,E,E,C,C,I,G,C,E,E,G,A,E,C,C,C,C,M,C,E,wB,C,E,Q,C,C,Q,G,E,G,E,E,A,E,C,A,A,C,A,C,A,A,E,E,C,A,C,C,A,C,A,A,C,M,C,C,G,A,G,C,C,A,E,C,E,C,E,A,C,K,C,I,G,E,G,C,I,G,C,C,C,A,E,C,C,E,E,E,I,M,C,I,I,E,E,I,C,E,C,A,C,C,E,a,E,A,C,E,E,M,K,I,G,E,E,C,C,C,A,E,C,K,A,C,C,E,A,G,C,C,C,E,C,A,A,E,A,C,I,C,E,C,A,A,C,A,C,A,C,A,C,A,C,A,O,E,I,K,C,E,wB,C,E,E,M,C,I,G,E,E,C,A,C,C,A,C,C,A,M,E,C,Q,G,G,C,A,C,A,W,G,E,A,C,O,mB,K,K,I,K,oC,I,E,E,C,C,O,E,E,C,C,A,O,E,E,A,C,C,O,E,E,C,C,I,G,E,E,C,C,M,A,E,Q,C,E,O,E,A,C,C,C,C,C,C,O,C,K,G,C,I,E,G,C,C,E,U,C,I,E,M,E,C,A,C,C,A,C,E,O,E,G,C,S,C,C,C,E,O,E,C,C,C,C,C,C,E,A,C,C,C,C,C,S,C,E,C,C,C,C,C,A,C,A,C,C,I,M,C,C,A,E,A,O,I,E,C,C,C,A,E,G,A,I,C,S,C,C,C,E,O,E,c,C,E,E,E,A,E,C,C,C,A,A,C,A,I,C,4F,I,E,E,C,C,O,E,E,C,C,I,A,G,Q,C,E,O,A,C,C,C,K,E,K,G,C,I,E,G,C,C,E,Q,C,E,Q,C,E,C,O,C,C,0F,I,E,E,C,C,M,E,S,C,E,O,E,C,M,A,E,Q,C,C,C,A,C,A,gG,I,E,E,C,C,O,E,C,C,C,C,O,E,E,C,C,O,E,K,C,C,E,O,A,M,A,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,O,E,S,E,C,E,I,C,E,E,A,Y,C,I,A,C,A,C,C,C,4F,I,E,E,C,C,C,M,E,E,C,C,O,E,K,C,E,M,C,A,C,E,E,K,I,E,U,C,S,C,E,E,S,C,K,S,C,E,A,C,C,A,A,C,A,A,K,C,C,8F,I,E,E,C,C,M,E,E,C,C,C,M,E,E,C,C,O,E,C,K,I,C,C,U,O,I,E,O,A,C,C,A,iB,C,G,C,A,A,E,W,C,E,O,A,C,C,C,E,A,K,C,E,C,I,E,C,C,C,I,E,I,C,A,E,C,C,I,C,I,C,E,E,I,a,C,E,K,I,A,G,C,C,A,C,A,C,I,C,C,G,C,A,C,C,A,U,C,S,C,E,O,E,K,I,C,E,C,C,C,A,K,C,C,A,E,I,G,C,W,O,C,G,E,K,C,A,E,A,E,E,E,K,C,A,W,O,C,C,C,C,E,O,C,G,G,C,C,A,C,E,C,I,I,E,C,O,E,G,C,C,A,C,C,C,C,A,C,A,C,A,C,A,I,C,A,C,4F,I,E,E,C,C,C,M,E,E,C,C,O,E,E,C,C,G,I,E,E,C,C,O,E,E,C,C,O,E,E,C,C,M,C,E,E,C,A,C,O,C,C,Q,C,E,O,E,I,E,E,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,U,O,C,G,C,C,A,C,C,oB,C,G,C,C,A,E,G,C,C,E,E,I,C,A,E,I,A,E,U,C,S,C,E,I,E,E,E,G,C,C,A,G,C,E,I,Q,E,Q,A,E,C,A,I,I,E,A,I,C,C,G,E,C,C,A,C,C,E,C,G,C,M,C,A,E,A,I,G,E,E,C,A,C,O,C,C,C,E,C,C,O,E,C,E,wB,C,E,Q,C,C,E,C,I,G,C,C,C,C,C,A,E,C,C,E,C,C,C,C,E,C,E,A,E,C,G,O,G,C,C,O,E,M,E,C,G,I,A,G,C,C,C,G,C,E,C,A,C,A,C,C,C,C,E,M,C,E,E,C,G,A,C,C,A,C,A,C,C,K,A,E,C,A,C,C,C,C,C,E,C,C,E,E,G,C,E,C,C,C,C,C,A,A,E,C,G,C,E,E,I,A,C,E,G,C,C,W,C,I,C,C,I,C,G,C,C,C,C,sY,I,E,E,C,C,O,E,E,A,C,C,C,M,E,E,C,C,O,E,A,E,C,C,O,A,E,E,C,C,M,A,E,E,C,C,O,E,C,E,W,C,M,U,C,C,A,E,C,e,G,C,qB,C,C,A,E,C,I,C,K,A,C,C,A,S,E,C,C,C,E,O,S,A,C,E,O,S,C,E,O,C,C,E,C,E,E,C,A,C,A,C,A,A,A,E,A,A,C,Q,C,E,O,E,C,A,C,C,C,C,C,C,A,E,G,E,U,C,K,E,A,C,C,C,I,C,C,A,G,A,E,I,C,E,E,E,C,C,C,C,C,A,I,A,A,C,A,E,gB,C,I,I,M,A,A,C,C,A,C,C,G,E,E,E,C,G,I,C,E,I,Y,C,E,E,U,C,E,I,e,C,C,C,E,G,C,S,C,E,A,O,S,C,E,O,C,C,E,C,E,E,E,C,A,A,C,C,A,A,C,C,A,C,C,E,E,A,E,C,O,C,E,G,C,O,C,E,E,U,C,E,I,U,C,C,C,E,G,C,E,E,I,A,C,E,E,A,C,C,A,A,E,A,C,K,E,C,E,E,C,C,C,A,E,U,C,E,G,C,A,C,C,E,G,C,E,E,G,C,A,E,C,E,A,C,A,C,C,C,C,E,C,E,A,C,C,E,A,C,A,G,C,G,A,E,A,W,C,G,G,C,E,C,E,Q,C,S,C,E,O,E,E,E,E,C,A,C,C,A,E,A,A,C,Q,C,I,E,C,A,C,A,C,C,C,E,G,A,S,C,sB,C,C,A,O,I,E,U,C,S,C,E,I,E,K,U,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,O,E,I,C,C,C,C,C,E,I,C,A,C,C,C,C,A,C,A,C,A,C,A,C,C,A,O,E,C,E,I,C,C,K,O,E,E,C,A,C,A,A,C,A,C,A,C,C,wG,I,E,E,C,C,C,M,E,E,C,C,M,A,E,E,C,C,O,E,G,a,C,E,O,E,C,C,C,C,C,G,M,A,A,E,E,E,G,I,C,A,A,E,A,E,C,C,Y,C,I,I,E,I,C,C,C,G,C,S,C,E,I,E,K,U,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,O,E,I,C,C,C,C,A,C,C,C,M,C,C,C,C,C,C,A,C,A,C,A,C,C,A,E,E,G,C,G,C,A,C,C,E,U,C,G,U,C,A,C,C,K,E,E,E,C,C,C,A,G,C,A,A,C,C,C,A,C,A,K,C,0oC,I,E,E,C,C,I,C,E,E,C,C,O,A,E,E,C,C,O,E,E,C,C,E,K,E,Q,A,C,E,O,A,C,C,A,C,C,C,C,C,C,A,C,Q,E,E,S,C,A,C,A,C,wD,E,G,S,W,C,C,G,E,E,C,C,A,A,G,G,C,E,E,C,M,C,E,E,G,C,C,C,K,C,C,I,E,C,wB,E,E,C,I,A,C,C,sB,A,O,C,E,A,S,C,M,E,A,E,A,E,Q,I,C,E,E,E,G,I,C,E,E,G,I,C,E,K,K,E,A,E,c,A,E,E,Q,C,E,A,E,E,K,I,C,C,C,E,E,C,G,E,E,S,C,C,C,E,E,E,A,Q,C,A,C,C,G,E,C,C,A,C,C,C,K,C,C,C,O,A,C,G,C,C,K,E,gB,C,G,C,C,C,C,C,E,C,A,C,C,A,C,A,0F,I,E,E,C,C,O,E,G,C,E,A,I,G,A,C,C,C,A,C,C,E,O,E,K,C,W,O,I,E,C,C,C,A,A,C,A,C,C,C,C,C,C,C,C,uF,I,E,E,C,C,C,M,E,E,C,C,M,C,E,E,C,C,O,A,E,E,C,C,E,I,G,K,C,E,M,C,A,C,C,C,C,C,A,E,K,G,C,I,G,C,C,K,G,C,I,E,E,K,A,E,I,E,C,C,C,A,O,I,A,E,A,I,E,W,C,C,E,E,E,E,G,A,I,E,C,C,E,C,C,C,G,A,C,A,S,C,E,I,E,C,C,W,C,G,A,E,E,A,C,C,C,A,A,E,C,A,C,A,C,E,C,A,E,A,C,A,G,A,C,C,A,I,C,C,C,C,A,O,E,O,C,C,W,E,M,E,A,C,E,I,C,C,E,A,C,C,A,C,E,E,I,C,Q,C,E,G,E,G,E,E,M,A,E,C,A,A,C,A,C,A,E,C,A,C,A,A,C,A,A,kG,I,E,E,C,C,M,C,E,E,C,C,M,G,M,E,C,E,O,A,C,C,A,C,E,G,I,K,G,K,G,C,C,K,G,C,I,E,E,c,A,E,E,C,E,C,A,G,C,C,A,C,C,K,C,E,E,E,A,C,C,K,C,C,uF,I,E,E,C,C,M,E,C,C,C,C,O,E,E,C,C,O,E,E,C,C,E,K,E,E,C,C,O,E,K,A,C,E,M,C,K,C,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,K,O,C,G,C,C,A,C,C,M,G,C,E,E,G,G,C,C,E,A,A,E,E,C,E,C,C,A,C,K,C,K,C,E,S,C,C,C,C,C,C,C,E,Q,C,G,E,I,C,A,C,C,I,C,C,G,C,C,A,A,C,A,uG,I,E,E,C,C,C,M,E,E,C,C,O,E,K,C,I,E,U,C,E,I,C,C,A,E,K,C,E,M,C,E,G,I,E,K,A,C,A,wG,I,E,K,A,C,O,C,A,E,c,C,E,O,A,C,E,K,E,A,C,G,A,E,M,E,E,C,C,C,C,C,A,C,A,C,A,C,C,C,C,A,C,A,C,E,C,wG,I,E,E,C,C,C,M,E,E,C,C,O,E,C,C,C,C,O,E,E,C,C,M,C,E,E,C,C,O,E,iB,C,E,O,M,I,C,C,E,C,A,E,A,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,O,O,C,G,I,C,C,C,I,E,U,C,S,C,E,I,E,C,C,A,E,K,M,A,G,E,E,M,C,A,C,C,G,E,K,C,C,A,C,E,C,E,E,M,G,C,C,C,I,C,C,A,A,K,C,C,C,C,A,I,O,A,A,E,E,A,C,C,I,E,O,W,C,O,E,C,C,I,C,A,E,I,C,C,A,E,Q,C,C,G,E,G,C,G,G,C,C,A,C,A,C,G,C,C,G,A,E,A,C,A,C,A,G,C,C,A,C,A,O,E,C,qF,I,E,E,C,C,O,E,K,A,C,E,M,C,A,C,C,C,E,A,O,E,I,C,M,C,O,C,G,A,C,C,C,M,C,C,oF,E,G,C,E,I,G,A,C,C,C,A,E,O,S,C,C,C,E,M,C,E,E,E,C,E,E,E,C,A,A,A,C,A,C,C,8F,I,E,E,C,C,O,E,E,C,C,O,C,C,M,C,E,O,A,A,C,C,C,E,C,M,E,O,C,S,C,C,C,E,I,E,C,C,A,C,C,I,K,C,E,wB,C,E,Q,C,C,E,O,E,I,C,E,A,E,G,A,E,C,C,C,A,I,C,E,C,A,C,C,A,A,C,A,A,C,A,C,A,mG,I,E,E,C,C,M,E,E,C,C,O,A,E,E,C,C,O,E,S,C,E,O,A,C,C,C,A,C,C,E,E,I,C,E,M,C,E,G,E,E,A,C,M,C,I,E,A,C,C,I,C,E,G,C,E,I,E,C,A,C,C,M,C,I,A,C,A,C,C,C,sG,I,E,E,C,C,C,M,E,E,C,C,O,E,E,C,C,O,E,C,C,C,C,O,S,E,C,A,E,G,I,S,C,E,I,I,E,E,C,Q,G,C,E,E,I,C,E,I,K,C,C,C,C,C,C,C,S,C,E,wB,C,E,Q,C,C,E,G,E,C,I,I,C,C,A,C,C,C,C,E,M,C,C,E,C,A,A,C,G,C,E,C,C,C,C,C,W,E,C,A,E,I,C,A,A,E,I,A,C,E,C,A,C,C,A,C,A,C,A,C,C,C,C,C,G,C,E,M,C,C,A,C,C,E,K,C,C,C,E,C,E,C,C,C,A,C,A,A,E,I,C,E,K,E,I,E,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,O,C,C,C,C,C,E,E,E,C,W,C,E,C,C,A,M,C,E,S,C,C,C,C,C,C,C,A,C,G,E,U,C,E,G,C,C,C,C,A,C,C,C,K,C,S,uF,I,E,E,C,C,C,M,E,E,C,C,O,E,K,C,A,E,M,C,A,C,C,C,C,C,A,E,G,I,E,A,I,C,C,E,C,C,C,A,C,A,C,A,G,C,C,A,C,M,E,K,C,A,I,E,C,C,E,C,E,C,G,I,E,U,C,E,O,E,C,E,I,C,C,E,G,C,G,E,O,C,C,W,C,C,G,A,E,A,I,C,C,E,A,C,C,A,I,C,Q,E,C,C,E,Q,A,E,A,C,A,C,A,C,A,C,S,C,E,I,I,C,C,E,C,C,C,C,C,A,C,E,M,C,C,A,E,I,C,C,E,A,C,C,A,E,Q,A,E,A,C,A,C,A,C,A,+F,I,E,E,C,C,C,M,E,E,C,C,O,E,E,C,C,M,G,K,C,A,E,M,C,A,C,C,C,E,A,O,I,E,U,C,S,C,E,I,E,I,E,A,E,E,C,I,C,C,A,A,C,A,A,E,E,C,A,C,C,C,K,C,G,E,C,C,C,C,C,A,C,C,S,C,G,O,C,C,E,G,E,G,E,C,K,E,A,C,A,A,C,A,C,A,C,A,qf,I,E,E,C,C,C,M,E,E,C,C,O,E,E,C,C,O,E,C,C,C,C,O,E,E,C,C,E,K,E,E,C,C,M,A,G,G,C,E,I,G,G,G,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,U,O,C,G,C,C,A,C,C,G,W,C,G,C,C,C,I,E,K,C,C,I,E,U,C,S,C,E,I,E,E,G,A,C,C,U,M,E,A,C,C,C,A,E,E,G,C,C,A,U,O,C,C,C,C,A,C,C,G,C,I,O,E,E,G,C,A,C,A,C,C,A,A,I,e,C,E,E,S,C,C,C,E,C,C,O,E,C,E,wB,C,E,Q,C,C,E,G,C,C,E,C,I,C,G,A,E,A,C,C,G,A,C,S,C,E,O,E,I,E,A,C,C,C,C,I,E,E,E,C,C,C,Q,C,E,O,E,I,C,E,A,C,C,C,A,E,I,C,E,C,C,K,C,I,C,A,C,A,C,E,E,C,E,K,C,E,E,A,C,A,C,C,C,C,A,S,C,C,C,E,M,C,E,I,E,E,C,C,C,C,A,C,C,E,A,E,Q,A,E,C,A,A,C,C,W,C,C,E,E,E,A,C,C,A,C,C,C,A,M,E,A,E,Q,A,E,A,C,A,C,C,C,C,E,C,C,C,E,I,E,E,A,E,E,K,C,C,A,M,G,E,E,C,E,C,U,E,E,G,C,A,C,A,A,C,A,C,A,C,E,K,A,C,A,8K,I,E,E,C,C,O,E,E,C,C,O,E,E,A,C,C,M,E,C,K,C,E,M,C,A,C,E,E,K,E,O,C,S,C,C,C,E,I,G,E,E,C,A,C,E,C,A,E,A,I,C,A,G,E,E,C,C,C,C,K,E,G,S,E,O,I,C,C,C,A,E,A,I,A,C,A,E,C,G,E,A,G,A,A,C,A,E,E,C,A,C,I,A,C,A,A,C,C,A,E,E,C,C,E,A,A,E,C,A,A,C,C,K,G,A,E,A,C,A,C,A,E,W,E,A,I,C,A,G,E,K,C,E,A,E,A,C,A,C,A,E,I,K,C,E,wB,C,E,Q,C,C,E,G,E,E,A,C,A,C,A,G,A,C,C,A,S,C,E,C,E,C,C,C,C,M,C,A,E,E,c,U,C,E,E,G,C,C,C,G,M,C,A,C,C,C,A,E,A,C,C,C,A,E,E,C,C,G,G,C,C,E,E,I,E,A,E,A,C,A,C,C,A,C,A,C,A,C,A,mG,I,E,E,C,C,M,C,E,E,C,C,O,E,E,C,C,E,I,C,E,S,C,E,O,A,C,C,C,A,E,I,G,K,G,I,G,E,c,A,E,E,K,C,W,O,E,K,C,E,E,C,C,A,C,A,C,G,C,2F,I,E,E,C,C,O,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,O,E,E,I,C,E,O,A,A,C,E,G,I,E,O,C,S,C,C,C,E,I,E,E,C,A,O,C,C,I,K,C,E,wB,C,E,Q,C,C,E,O,E,I,C,E,C,C,C,C,A,S,E,I,C,G,A,E,Q,A,A,C,C,A,A,C,A,C,C,C,A,E,S,C,G,S,C,E,A,C,uB,C,E,Q,G,I,C,C,E,E,E,C,A,E,I,A,C,A,C,A,C,A,C,A,A,C,E,I,C,C,C,A,W,E,I,A,C,A,A,C,A,C,A,C,A,G,ia,I,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,K,E,E,W,C,E,O,A,C,C,C,E,A,M,C,K,G,K,E,I,C,C,E,Q,E,E,E,A,E,I,C,A,A,C,E,K,E,C,C,C,E,I,E,E,C,A,A,E,A,C,C,A,C,A,C,I,A,K,C,E,wB,C,E,Q,C,C,E,Y,E,I,A,C,A,I,C,E,A,C,E,A,E,I,C,A,E,C,A,C,I,I,I,E,E,G,E,E,C,G,E,C,C,E,I,C,E,E,I,G,C,I,E,E,E,G,C,E,I,A,C,G,E,C,A,C,C,I,C,C,E,A,C,K,C,E,E,E,E,A,A,C,C,A,G,C,C,G,G,A,C,C,I,K,K,+E,G,M,A,E,E,I,E,E,G,E,C,C,I,E,C,C,E,I,C,E,E,I,G,C,I,E,E,E,G,C,E,S,C,E,G,E,A,C,C,C,C,C,G,A,G,C,C,6F,C,C,uB,I,I,E,E,G,E,E,C,G,E,C,C,E,I,C,E,E,I,G,C,I,E,E,E,G,C,E,I,C,G,A,G,C,C,6F,E,Q,A,E,A,C,A,M,E,O,I,E,I,A,C,A,A,C,C,A,C,A,C,A,C,A,ma,I,E,E,C,C,G,I,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,K,E,E,E,C,C,M,C,E,E,C,C,O,E,E,C,C,M,G,E,Q,C,E,O,A,C,G,G,G,K,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,E,C,S,C,E,C,A,I,E,O,A,E,E,Y,C,E,C,C,E,E,C,Q,K,C,A,C,C,I,G,E,C,C,E,A,E,E,E,C,C,C,A,E,C,C,C,A,C,E,I,A,C,G,C,A,E,E,O,C,S,C,C,C,E,I,E,E,C,A,E,G,E,A,C,A,C,I,G,C,E,I,E,E,E,E,E,C,A,C,C,E,C,C,A,C,A,W,E,C,A,E,S,C,E,G,E,C,C,C,C,C,C,E,A,G,A,C,C,C,C,C,A,E,G,C,E,C,E,E,G,E,C,I,E,E,E,A,E,Y,C,C,C,A,G,C,G,C,A,C,C,C,E,C,K,C,C,C,C,C,A,I,A,C,E,C,A,C,C,I,C,G,E,C,E,C,C,U,C,E,E,A,O,I,O,E,E,A,C,C,G,A,C,A,A,C,A,G,I,E,C,A,C,E,C,C,C,C,Y,G,A,C,E,E,E,E,E,C,C,A,C,C,C,A,E,E,C,C,I,A,E,C,A,C,C,C,c,Q,C,E,Q,C,C,E,Q,E,E,K,E,A,C,G,C,I,I,E,E,G,E,E,I,C,C,C,C,E,I,C,E,E,I,G,C,I,E,E,E,G,C,E,E,E,E,E,C,A,E,I,A,C,G,E,C,A,C,C,I,E,E,A,E,E,C,G,C,C,6F,C,C,W,W,E,K,E,E,E,I,C,A,C,E,C,G,C,A,E,C,I,E,C,G,A,G,C,C,A,K,C,G,E,W,E,C,A,C,C,E,E,I,A,E,C,A,C,C,Q,G,E,A,C,A,K,C,E,E,K,A,I,A,K,E,E,I,A,C,C,C,A,E,E,E,K,C,E,C,C,A,C,A,e,C,C,oZ,I,E,E,C,C,G,I,E,E,C,C,O,E,E,C,C,O,E,E,A,C,C,O,C,C,E,C,C,O,E,E,C,C,K,E,E,Y,C,E,O,A,C,C,C,E,C,M,A,E,O,C,S,C,C,C,E,I,E,E,C,A,E,A,S,C,G,K,C,G,C,E,wB,C,E,Q,C,C,E,I,E,E,C,A,C,C,I,C,A,G,G,C,A,C,C,I,E,W,C,C,C,C,A,G,C,E,S,C,C,C,I,K,C,C,E,A,C,E,wB,C,E,Q,E,C,E,O,E,C,E,G,E,A,C,C,C,C,C,G,A,E,C,C,C,Q,E,A,C,A,C,A,E,A,I,C,C,C,A,C,A,C,E,I,C,C,C,A,E,I,K,C,E,wB,C,E,Q,C,C,c,I,I,E,E,G,E,E,C,G,E,C,C,E,I,C,E,E,I,G,A,A,E,I,C,C,I,C,K,C,C,6F,C,C,W,K,E,K,C,C,C,C,C,E,I,C,E,C,I,A,E,C,C,A,E,Q,A,E,A,C,A,C,C,A,C,A,C,A,C,A,oG,I,E,E,C,C,O,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,O,E,E,Q,C,E,O,A,C,E,C,M,A,E,O,C,S,C,C,C,E,I,E,I,A,C,A,E,I,C,A,E,Q,A,S,G,E,W,C,C,C,A,C,E,C,C,C,E,E,C,C,A,C,A,A,C,A,E,E,I,C,C,C,C,A,A,E,A,K,I,C,A,I,C,I,K,C,A,E,A,C,C,a,W,C,E,E,E,I,A,C,C,A,A,C,A,C,A,A,I,E,I,A,E,C,E,C,E,wB,C,E,Q,C,C,E,a,E,I,C,E,E,A,I,A,C,E,C,A,C,C,C,G,K,C,G,C,C,C,G,C,G,A,E,C,C,C,K,A,E,A,C,A,M,E,O,I,O,E,E,E,E,A,C,C,C,A,C,A,C,A,C,A,K,6F,I,E,E,C,C,O,E,E,A,C,C,O,C,C,E,C,C,O,E,U,C,E,O,E,C,C,C,K,E,E,O,C,S,C,C,C,E,I,E,E,I,C,A,C,C,E,C,A,E,A,C,C,A,I,A,K,C,E,wB,C,O,G,I,E,A,O,E,C,E,E,E,S,A,C,E,E,C,C,E,C,K,A,A,C,A,C,C,A,C,C,A,G,E,C,K,E,C,A,E,I,C,A,C,C,S,C,C,G,G,C,C,C,A,C,A,A,C,A,A,A,C,G,E,G,E,C,K,E,C,A,E,I,C,A,C,C,S,C,C,E,C,C,A,C,A,I,C,C,iG,I,E,E,C,C,M,E,C,a,C,E,O,A,C,C,C,C,C,C,C,A,C,C,E,E,K,S,C,C,C,E,I,E,E,E,E,A,C,A,C,A,A,C,A,C,A,C,C,I,K,C,E,wB,C,E,Q,C,C,E,I,C,C,I,C,C,C,C,A,C,C,E,E,A,C,A,C,C,C,C,A,E,E,C,C,A,C,A,A,A,C,E,E,I,C,A,E,C,A,C,C,C,C,A,W,G,C,C,G,C,C,G,A,E,A,C,C,M,A,E,A,C,A,C,C,A,C,A,A,C,A,A,+F,I,E,E,C,C,G,I,E,E,C,C,M,G,M,C,E,O,A,A,C,C,C,E,C,M,E,O,C,E,a,C,E,E,E,K,E,C,M,E,C,E,G,E,C,C,A,C,C,C,8F,I,E,E,C,C,M,E,E,C,C,I,G,E,Q,C,C,C,C,E,O,E,C,G,C,G,C,C,A,C,A,A,A,C,C,O,C,E,O,C,C,K,E,E,O,C,S,C,C,C,E,E,M,C,E,E,C,C,G,C,E,C,K,C,E,C,C,A,C,A,K,C,C,mG,I,E,E,C,C,I,C,E,E,C,C,O,E,E,C,A,C,O,E,E,C,C,O,E,E,C,C,O,E,Q,Q,C,E,O,A,C,C,C,E,K,E,E,E,E,C,E,O,E,C,E,Q,C,S,C,E,O,E,E,C,C,A,C,E,A,C,C,G,C,C,W,C,G,E,E,C,C,C,G,C,A,C,A,0G,I,E,E,C,C,O,E,E,C,C,E,I,C,E,gB,C,E,O,A,C,E,O,A,E,I,Y,C,E,a,C,E,C,I,C,C,8F,E,U,C,A,E,C,C,M,C,gB,C,+f,I,E,E,C,C,O,E,E,C,C,E,K,E,E,C,C,O,E,C,C,C,C,O,E,E,C,A,C,O,E,E,C,C,M,G,a,C,E,O,O,C,I,C,C,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,U,O,C,G,C,C,C,I,E,E,I,C,E,G,E,C,K,E,E,E,C,E,I,C,E,gB,C,I,E,O,C,A,C,C,O,C,C,C,E,E,iB,C,E,C,E,C,E,C,C,c,C,I,C,C,E,A,C,C,A,C,A,K,C,C,6f,I,E,E,C,C,G,G,G,iB,C,E,O,M,I,C,C,E,C,A,E,A,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,O,E,a,C,K,C,K,E,E,E,C,E,I,C,O,I,wF,I,E,E,C,C,O,E,E,C,C,M,A,E,S,C,E,O,A,C,C,C,A,E,I,G,E,U,C,G,E,Q,C,A,C,C,A,C,C,C,C,C,A,A,C,C,O,C,C,E,C,C,A,C,A,E,mG,I,E,E,C,C,O,E,E,C,C,M,A,E,W,C,E,O,A,C,C,C,E,A,M,C,E,U,C,G,E,S,A,C,A,C,C,S,O,C,C,C,G,E,O,E,A,C,A,C,C,S,O,C,C,C,A,C,A,W,8e,I,E,E,C,C,O,E,E,C,C,O,E,E,C,C,O,E,E,C,C,M,C,E,M,C,E,O,A,M,A,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,K,O,C,G,C,C,C,I,E,O,C,S,C,C,C,E,E,S,E,C,E,I,C,E,C,E,C,E,C,G,A,I,K,C,C,E,C,E,C,C,A,C,A,K,C,C,sf,I,E,E,C,C,M,G,O,G,C,E,O,I,E,I,A,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,O,E,M,C,K,C,K,E,E,E,C,E,I,C,O,I,+F,I,E,E,C,C,C,M,E,gB,C,E,O,A,C,E,O,A,I,E,A,U,C,S,C,E,O,E,S,C,A,E,C,C,A,C,A,K,C,2F,I,E,E,C,C,M,E,E,C,C,O,E,E,A,C,C,O,E,E,C,C,O,E,C,Q,C,C,C,U,O,I,E,O,A,C,C,A,C,A,E,O,C,E,O,A,C,A,C,C,E,E,G,G,C,I,E,C,C,C,I,E,E,I,C,I,C,A,O,E,O,C,S,C,C,C,E,I,E,I,C,C,G,E,C,G,C,E,E,I,Y,C,K,E,C,C,C,I,C,G,E,G,C,C,C,A,C,C,E,K,C,G,C,C,A,C,A,C,C,C,C,2F,I,E,E,C,C,M,E,K,C,E,A,M,C,A,C,E,E,K,E,M,C,S,C,C,C,C,C,E,M,C,G,E,E,C,C,A,C,A,A,C,C,A,C,C,A,C,A,A,C,C,C,C,A,A,C,A,A,kG,I,E,E,C,C,O,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,O,E,E,M,C,E,O,A,C,C,C,K,E,E,O,C,S,C,C,C,E,I,G,E,E,C,A,C,E,C,A,E,A,I,C,A,E,E,O,E,S,G,E,W,E,A,C,A,E,A,E,E,C,A,E,C,E,C,E,A,G,A,A,C,A,E,E,C,C,I,C,A,A,A,C,C,A,G,C,C,G,A,A,A,C,C,A,A,C,C,A,A,I,C,I,C,E,wB,C,E,Q,C,C,Q,G,E,W,E,A,C,A,E,C,C,C,E,A,C,A,C,E,C,A,C,A,C,a,G,K,E,C,E,A,E,E,A,A,I,A,C,A,C,A,E,S,C,E,I,C,C,C,M,C,A,E,C,C,W,G,C,A,A,C,C,A,C,O,A,E,A,C,A,M,E,O,I,E,E,I,A,C,A,A,C,C,A,C,A,C,A,C,A,M,gG,I,E,E,C,C,M,C,E,E,C,C,O,E,E,C,C,M,E,C,Y,C,E,O,A,C,C,C,E,C,M,A,K,G,C,I,E,E,c,A,E,E,O,C,S,C,C,C,E,I,E,I,C,A,E,C,G,C,A,E,A,I,C,A,C,C,E,S,G,E,C,E,K,G,G,E,C,A,E,I,C,A,G,C,E,E,C,C,I,C,A,A,C,C,A,I,C,G,A,A,C,C,A,A,C,C,O,I,I,E,E,A,E,E,C,C,A,A,C,C,C,E,C,A,C,E,E,C,C,C,E,I,C,A,G,K,M,E,E,G,A,C,C,A,A,G,A,C,G,C,M,A,A,A,C,C,C,C,A,A,E,A,C,G,K,C,E,wB,C,E,Q,C,C,E,E,E,E,C,C,A,C,E,C,C,C,A,C,G,E,E,E,E,E,C,C,C,E,G,E,E,C,A,C,A,C,E,C,A,C,K,C,C,I,I,A,E,A,C,O,A,E,A,C,A,M,E,O,I,E,E,I,A,C,A,A,C,C,A,C,A,A,C,A,C,A,wG,I,E,E,C,C,O,E,E,C,C,O,C,C,c,C,E,O,A,C,E,K,E,E,E,K,C,S,C,C,C,E,I,G,E,E,C,A,C,E,K,C,E,wB,C,E,Q,C,C,E,G,E,E,A,C,A,G,C,E,C,A,C,C,C,C,Q,A,G,E,G,C,C,A,G,A,E,O,C,A,A,C,C,A,C,A,C,C,A,C,A,C,A,C,A,8F,I,E,E,C,C,O,A,E,E,C,C,O,E,E,C,C,M,E,C,I,C,E,K,E,A,C,E,C,M,G,C,C,A,W,O,E,K,A,C,C,E,O,C,S,C,C,C,E,I,E,C,C,A,A,E,I,K,C,E,wB,C,E,Q,C,C,E,E,G,C,G,C,C,C,G,C,G,A,E,C,A,C,C,C,C,C,C,O,A,E,C,A,C,C,C,A,C,A,C,A,C,A,wG,I,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,O,E,c,C,E,O,E,M,C,E,G,I,C,S,C,C,C,E,E,I,K,C,E,wB,C,E,E,I,C,C,A,A,C,A,C,A,C,A,+F,I,E,E,C,C,O,E,I,C,C,E,M,C,A,C,E,E,K,E,G,C,W,O,C,C,C,A,C,A,C,kG,I,E,E,C,C,O,C,C,E,C,C,O,E,E,C,C,C,G,G,E,E,C,C,O,E,E,C,C,E,K,E,E,C,C,O,E,E,O,C,E,O,E,C,A,C,C,I,K,A,E,S,C,E,G,E,E,E,M,C,E,I,C,E,I,C,C,C,C,A,E,c,E,C,C,E,I,A,C,E,I,C,C,A,C,C,Q,C,I,C,C,C,E,C,C,C,E,O,E,S,C,E,E,G,C,C,C,C,C,C,E,I,C,C,A,C,C,E,K,C,G,C,C,A,A,C,A,A,C,8F,I,E,E,C,C,M,C,E,E,C,C,O,E,E,C,C,M,C,E,K,C,E,M,C,A,C,C,C,E,A,K,G,C,I,E,E,c,A,E,I,E,E,I,C,C,E,C,E,M,C,A,C,C,S,C,W,O,C,C,C,A,C,A,I,mG,I,E,E,C,C,G,I,E,E,C,C,O,E,E,C,C,O,C,C,a,C,E,O,E,K,E,E,E,K,C,S,C,C,C,E,E,I,K,C,E,wB,C,E,Q,C,C,E,O,E,mB,C,E,E,C,C,C,A,C,A,C,A,C,A,E,A,C,+F,I,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,O,E,E,C,C,M,G,E,M,C,E,O,A,C,C,A,C,E,G,I,E,O,C,S,C,C,C,E,I,E,I,G,C,C,C,A,A,I,K,C,E,wB,C,E,Q,C,C,E,I,E,C,C,E,G,E,A,C,C,A,A,C,A,A,C,A,A,C,C,G,C,C,C,A,C,G,C,G,A,C,C,A,C,G,C,G,A,C,C,A,C,A,C,A,A,G,E,E,O,C,G,I,C,I,C,E,wB,C,E,Q,G,O,E,K,E,A,C,C,C,C,I,C,C,A,C,A,C,A,C,A,4G,I,E,E,C,C,I,C,E,E,C,C,O,E,E,C,C,O,C,Q,E,C,C,C,E,O,A,C,G,C,A,C,A,A,E,oB,C,E,O,A,C,C,C,E,O,E,G,G,A,C,I,E,E,Q,A,E,Q,E,A,E,E,E,E,E,G,A,C,E,C,I,E,C,C,C,E,G,C,E,E,C,E,A,E,A,A,C,C,C,C,K,C,E,wB,C,E,Q,C,C,E,I,E,E,I,C,C,A,C,A,C,C,A,C,E,E,C,E,C,A,G,A,E,A,E,C,C,A,E,I,C,A,C,C,C,A,C,C,A,C,A,A,C,A,A,C,A,C,A,iH,I,E,E,C,C,I,G,G,oB,C,E,O,A,C,C,C,E,O,E,G,M,W,C,S,C,C,C,E,O,E,E,C,C,C,C,A,C,A,A,A,C,C,E,C,A,C,A,C,A,C,E,C,E,C,C,E,A,C,A,C,A,C,A,sG,I,E,E,C,C,M,C,E,E,C,C,O,E,E,C,C,O,C,Q,I,O,I,E,E,Q,A,C,A,C,C,A,Y,C,E,O,A,C,E,G,I,E,G,G,C,G,G,C,C,C,E,O,C,S,C,C,C,E,I,G,E,E,C,A,C,E,K,C,E,wB,C,E,Q,C,C,E,G,E,E,A,C,A,G,C,E,C,A,C,C,C,C,Q,O,E,E,I,C,C,E,A,E,C,A,C,C,K,C,E,E,C,C,C,A,C,A,C,A,C,A,E,E,C,C,6F,I,E,E,C,C,M,E,E,C,C,O,A,E,E,C,C,E,C,I,E,E,C,C,I,G,E,E,C,C,O,E,K,I,C,E,O,A,C,C,C,A,E,G,C,C,C,C,C,A,K,I,E,uB,C,C,C,E,E,S,C,G,G,E,C,C,A,O,S,C,E,O,E,I,A,C,E,M,C,S,C,C,C,E,O,C,G,C,C,C,C,C,C,I,C,C,C,C,E,E,W,C,C,C,C,G,E,O,C,C,C,E,C,W,O,I,E,uB,A,C,C,A,C,A,C,A,C,A,0f,I,E,E,C,C,O,C,C,E,C,C,I,E,G,O,C,E,O,C,K,C,G,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,O,S,C,E,O,E,M,C,E,E,E,A,C,K,C,K,E,E,E,C,E,K,C,A,A,C,A,G,4F,I,E,E,C,C,O,E,E,C,C,O,C,C,K,C,E,M,C,A,C,C,C,E,A,O,E,O,C,S,C,C,C,E,I,E,C,C,A,C,C,I,K,C,E,wB,C,E,Q,C,C,E,E,I,C,E,A,E,G,A,C,C,E,E,C,C,A,E,E,E,E,C,E,A,C,C,M,A,E,C,A,C,C,W,E,I,E,E,C,C,C,A,C,O,A,E,A,C,A,C,C,A,C,A,C,A,C,A,mG,I,E,E,C,C,O,E,E,C,C,A,O,E,E,A,C,C,O,E,E,C,C,O,C,C,U,C,E,O,E,C,C,A,C,K,I,A,E,S,C,E,A,E,K,E,I,A,C,E,Q,C,C,C,C,E,O,E,S,C,E,C,C,C,C,C,A,C,I,C,E,G,C,S,C,C,C,E,O,E,C,C,C,C,C,C,E,A,C,C,C,A,C,A,C,C,A,C,C,A,E,O,C,S,C,C,C,E,I,E,C,C,A,C,C,I,C,A,C,E,E,E,C,C,C,C,K,C,E,wB,C,E,Q,C,C,E,I,E,E,A,E,E,oB,C,O,E,C,M,I,E,I,C,A,C,E,E,K,G,A,E,A,C,A,C,C,A,E,S,C,E,E,G,E,C,C,C,A,C,M,C,G,C,C,G,C,C,M,G,E,A,E,C,A,E,A,G,K,A,E,A,C,A,C,C,A,C,A,C,A,C,A,oG,I,E,E,C,C,M,E,E,C,C,I,C,E,U,C,E,O,E,E,K,C,C,U,C,E,Q,C,A,C,A,iG,E,O,C,A,E,C,C,O,U,C,+F,I,E,E,C,C,O,E,E,C,C,I,G,E,M,C,E,O,A,A,C,C,C,C,C,C,C,O,K,G,C,I,E,G,C,C,E,A,C,C,C,A,I,C,A,C,A,I,A,E,E,A,C,C,I,C,A,C,S,C,C,C,E,O,E,c,C,E,E,E,A,K,C,C,G,A,E,E,A,C,C,A,A,C,A,I,C,6F,I,E,E,C,C,O,E,Q,C,E,O,A,C,C,C,K,E,E,O,C,S,C,C,C,E,G,C,E,I,K,C,G,O,A,C,A,C,C,G,C,G,A,C,A,C,A,C,A,E,C,C,uG,I,E,E,C,C,O,E,E,C,C,O,C,Q,E,C,C,C,C,C,E,C,G,E,O,A,C,E,E,E,K,S,C,C,C,E,I,E,C,C,A,C,C,I,K,C,E,wB,C,E,Q,C,C,E,I,C,C,I,C,C,C,C,E,C,E,A,E,C,C,C,A,I,C,C,A,E,E,C,E,C,A,C,A,C,E,E,A,A,C,A,C,A,M,A,E,C,A,C,C,W,E,I,C,E,C,A,C,C,C,G,C,A,C,E,E,I,C,C,E,A,E,A,C,A,C,C,A,C,A,A,C,A,A,E,I,C,E,K,E,A,C,C,C,C,C,O,E,O,C,E,E,E,I,C,A,E,C,C,A,C,A,C,E,U,C,W,wF,I,E,E,C,C,O,E,E,C,C,M,G,K,I,C,E,O,A,C,C,C,A,E,I,G,E,O,C,E,U,C,E,E,K,A,E,C,C,A,C,A,+F,I,E,E,C,C,M,C,E,E,C,C,O,E,E,C,C,G,I,E,E,C,C,C,G,G,E,E,C,C,E,K,E,E,C,C,I,C,E,K,C,E,M,C,A,C,C,C,E,A,I,E,S,C,G,G,E,C,C,A,O,S,C,E,O,E,I,A,C,E,E,K,C,A,C,A,S,C,C,C,E,O,E,C,C,C,C,E,C,A,C,C,A,C,A,C,A,Q,C,E,I,C,C,C,C,E,E,W,C,C,C,C,G,E,O,C,C,C,E,C,W,O,I,E,U,A,C,C,A,C,A,C,A,C,A,iG,I,E,E,C,C,C,M,E,E,C,C,O,E,E,A,C,C,M,E,E,C,C,O,E,E,C,C,O,C,C,O,C,E,O,A,C,A,C,C,C,C,C,C,A,E,O,E,O,C,S,C,C,C,E,A,G,U,E,A,C,M,G,E,E,I,I,C,A,E,E,C,E,I,C,E,E,E,G,I,A,C,C,A,E,C,C,G,C,E,E,G,C,A,A,E,C,A,C,C,C,A,I,K,C,E,E,I,G,C,E,C,A,C,C,A,E,C,C,A,E,I,C,C,G,A,C,E,O,E,I,K,C,E,O,E,K,C,A,E,C,A,C,A,A,C,C,A,E,C,C,A,E,G,E,A,C,A,G,E,I,W,G,C,E,Q,C,C,E,G,C,I,E,E,C,E,E,A,C,C,A,E,C,A,C,A,G,E,C,A,C,A,E,C,E,E,C,C,A,E,E,C,C,G,C,G,C,A,C,A,C,C,C,C,I,E,A,C,C,C,K,E,G,C,C,C,C,A,E,C,A,C,G,E,C,A,C,A,C,C,U,C,E,O,C,E,I,I,E,E,A,E,C,C,K,C,A,G,O,K,C,C,I,E,M,K,E,C,A,C,E,E,G,G,E,I,O,C,C,A,C,A,A,C,A,C,C,C,G,A,C,E,C,C,C,G,A,C,C,I,C,G,A,E,C,C,C,C,C,C,C,E,gB,Q,C,E,K,M,E,K,G,E,C,M,G,E,W,E,A,C,A,C,G,E,A,O,C,C,A,O,I,O,C,C,I,A,E,C,E,A,C,C,C,A,A,C,A,C,G,C,A,E,S,C,E,G,C,E,C,C,C,I,C,I,C,A,E,I,C,A,E,E,G,A,C,A,C,A,A,A,C,A,A,A,C,A,C,A,C,C,E,E,C,A,E,G,A,A,C,A,C,A,I,O,O,E,I,K,C,E,O,E,M,E,E,A,C,C,A,C,C,E,S,E,O,E,I,C,E,A,C,C,W,O,G,E,C,C,A,C,C,C,C,C,C,A,E,E,E,E,G,C,E,C,C,A,C,A,kB,C,C,6E,I,E,E,C,C,O,E,E,C,C,M,E,C,O,C,E,O,C,C,K,E,E,O,C,S,C,C,C,E,E,I,K,C,E,wB,C,E,Q,G,E,I,E,E,C,E,A,C,C,M,A,E,A,C,A,C,W,E,I,C,G,C,A,C,C,A,Q,A,E,A,C,A,C,C,A,C,A,C,A,C,A,ia,I,E,E,C,C,O,A,E,E,C,C,O,E,E,C,C,O,C,C,Q,C,E,O,A,C,C,C,K,E,G,C,C,A,W,O,E,K,A,C,C,E,O,C,S,C,C,C,E,I,E,E,C,A,C,C,I,K,C,E,wB,C,E,Q,C,C,E,E,I,A,C,G,E,A,C,C,A,C,G,E,E,E,I,C,E,A,C,A,C,uB,I,I,E,E,G,E,C,C,I,E,C,C,E,I,C,E,E,I,G,C,I,E,E,C,I,C,E,I,C,G,A,E,C,C,8F,E,Q,A,E,A,C,A,C,O,E,S,E,I,A,A,C,A,C,C,A,C,A,C,A,C,A,8F,I,E,E,C,C,M,C,E,E,C,C,O,E,E,C,C,G,I,E,E,C,C,E,K,E,E,C,C,I,G,E,E,C,C,I,C,E,I,C,E,K,E,A,C,C,C,C,C,I,E,S,C,G,G,E,C,C,A,O,S,C,E,O,E,I,A,C,E,E,K,C,A,C,A,S,C,C,C,E,O,E,C,C,C,C,E,C,A,C,C,A,C,A,C,A,Q,C,E,Q,C,C,C,C,E,E,W,C,C,C,C,G,E,O,C,C,C,E,C,W,O,I,E,U,A,C,C,A,C,A,C,A,C,A,oG,I,E,E,C,C,G,I,E,E,C,C,O,E,E,C,C,M,E,C,W,C,E,O,E,G,I,E,A,O,C,S,C,C,C,E,E,I,K,C,E,wB,C,E,Q,C,C,E,E,I,C,E,C,W,C,U,C,G,C,C,A,C,C,C,Q,E,I,C,E,C,W,C,c,E,C,C,A,E,Q,A,E,A,C,A,C,S,C,E,E,I,C,E,C,W,C,W,C,G,C,A,C,C,A,Q,A,E,A,C,A,C,C,A,C,A,C,A,C,A,6F,I,E,E,C,C,M,E,E,C,C,I,E,A,E,G,C,E,I,G,A,C,E,A,O,E,M,C,E,U,C,G,K,C,C,C,C,C,C,C,E,O,E,C,C,C,C,C,C,A,C,A,C,A,C,A,C,A,A,C,C,A,C,Q,C,C,C,E,O,C,C,C,C,A,C,A,C,A,C,A,A,C,C,A,C,A,iG,E,O,C,A,E,C,C,O,Q,C,mG,I,E,E,C,C,O,E,E,C,C,M,A,E,U,C,E,O,A,C,C,C,C,A,C,K,G,C,K,G,C,I,E,G,C,C,E,U,C,I,E,Q,A,C,A,E,S,O,C,C,C,E,I,A,M,A,C,C,A,A,E,O,I,E,C,C,C,A,E,G,A,K,C,W,O,C,C,C,G,C,M,C,C,A,2F,I,E,E,C,C,O,E,E,C,C,I,G,E,S,C,E,O,A,C,C,C,A,C,C,E,E,K,K,G,C,G,G,G,C,C,E,O,C,S,C,C,C,E,I,E,E,C,C,C,I,E,c,C,E,E,E,M,C,C,C,C,E,O,E,E,E,C,C,C,A,C,C,A,C,A,Q,C,C,E,E,C,C,C,C,C,C,G,E,E,O,I,O,E,G,C,A,C,C,A,C,A,C,A,C,A,wf,I,E,E,C,C,O,E,E,C,C,M,E,E,C,C,O,E,E,C,C,M,C,E,K,C,E,M,C,K,C,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,K,O,C,G,C,C,A,C,C,M,G,C,E,E,G,G,C,C,E,E,O,C,S,C,C,C,E,E,Q,C,G,E,I,C,A,C,C,C,E,C,E,C,G,A,I,K,C,C,E,C,E,C,C,A,C,A,K,C,C,qf,I,E,E,C,C,O,E,M,G,C,E,O,G,G,G,C,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,O,E,K,C,K,C,K,E,E,E,C,E,I,C,O,I,kF,I,E,E,C,C,M,E,E,C,C,I,E,A,E,G,C,E,I,G,A,C,E,A,O,E,M,C,E,U,C,G,K,C,C,C,C,C,C,C,E,O,C,C,A,C,C,C,C,C,C,C,C,A,C,A,C,A,A,C,C,A,C,Q,C,C,C,E,O,C,C,C,C,A,C,A,C,A,C,A,A,C,C,A,C,A,mG,I,E,E,C,C,O,E,E,C,C,M,A,E,E,A,C,C,M,G,Q,C,C,E,O,A,C,C,C,A,E,I,A,E,E,U,A,C,G,E,W,O,A,C,A,C,A,C,A,A,C,C,K,A,E,U,C,A,G,E,G,C,E,C,C,E,C,K,I,C,E,C,C,A,S,C,A,E,O,I,E,qB,C,E,E,C,A,C,A,A,U,C,ihB,I,E,E,C,C,O,E,C,C,C,C,O,S,G,K,I,E,E,C,A,E,C,C,A,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,O,O,C,G,I,C,C,C,S,C,E,O,E,iB,C,K,C,K,E,E,C,E,C,E,C,G,C,A,C,A,A,E,G,kB,C,E,E,iB,C,A,qB,C,6E,I,E,E,C,C,O,E,E,C,C,O,C,C,Q,C,E,O,E,A,M,C,E,O,C,S,C,C,C,E,I,E,E,C,A,E,E,A,C,C,E,K,C,E,wB,C,E,Q,C,C,E,I,C,C,E,E,A,C,C,A,G,A,C,C,E,E,C,C,C,C,A,E,C,C,A,C,E,C,C,C,C,A,A,A,C,A,A,C,A,C,A,+F,I,E,E,C,C,M,G,I,C,C,E,M,C,K,C,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,E,I,C,A,C,E,C,E,C,E,I,E,A,K,C,qC,C,C,A,O,E,G,C,S,C,E,I,I,E,C,C,A,C,C,C,C,C,C,C,C,C,E,C,A,C,I,C,C,Q,G,E,E,C,C,C,C,C,C,C,C,A,C,E,K,I,A,C,C,G,E,E,A,A,C,C,C,C,A,A,K,C,C,A,C,C,C,A,C,A,O,C,wF,I,E,E,C,C,M,E,E,C,C,O,E,E,C,C,M,G,O,C,A,E,O,A,C,A,E,I,G,E,M,C,C,C,C,E,O,E,O,C,G,E,C,C,A,C,A,C,A,C,M,C,E,O,E,S,C,I,E,O,E,A,C,C,C,A,C,A,E,C,sG,I,E,E,C,C,M,C,E,E,C,C,O,E,c,C,C,E,O,A,C,E,M,C,K,I,C,E,I,E,I,C,C,e,C,G,O,E,C,C,A,E,qB,C,E,I,O,O,C,C,C,A,C,A,A,C,A,E,mG,I,E,E,C,C,G,I,E,E,C,C,O,E,W,C,E,A,O,E,G,I,E,O,C,E,I,E,I,C,C,Y,C,C,C,K,I,E,qB,C,E,I,O,O,C,C,C,A,C,A,A,C,A,E,qG,I,E,E,C,C,I,G,E,E,C,C,O,E,E,C,C,M,A,E,a,C,E,O,A,C,C,C,C,C,C,C,A,E,G,C,A,E,U,C,E,G,E,C,C,C,A,I,E,E,C,C,E,A,A,M,C,G,O,E,O,A,A,C,A,C,C,A,C,C,I,C,E,O,E,S,C,I,E,a,C,E,E,G,G,A,E,A,C,A,C,A,C,C,A,C,I,C,mf,I,E,E,C,C,M,C,E,E,C,C,O,E,E,C,C,I,C,E,Q,C,E,O,E,I,E,E,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,O,A,E,M,C,E,C,M,C,S,C,C,C,E,E,Q,C,E,C,E,C,E,C,I,E,C,C,C,A,E,A,G,A,C,C,G,A,C,gG,I,E,E,C,C,O,A,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,O,E,E,A,C,C,O,A,E,M,C,E,O,A,A,C,E,G,G,E,E,C,C,C,C,I,C,E,I,E,A,I,Q,C,C,A,O,G,E,G,E,G,C,G,E,K,A,E,I,A,E,A,E,A,E,C,I,A,C,C,A,E,E,C,A,G,C,C,A,K,C,K,O,E,K,A,C,C,E,O,C,S,C,C,C,E,I,E,E,C,C,A,C,C,C,C,O,E,S,G,E,I,G,E,E,E,C,A,E,C,G,C,A,E,E,C,C,E,C,C,C,E,E,A,I,E,E,C,A,C,A,O,E,E,C,I,C,G,E,A,C,C,C,M,C,E,G,C,C,C,A,C,C,A,gB,Q,C,E,Q,G,E,W,E,C,A,G,C,A,C,C,A,E,M,G,A,C,C,C,C,K,C,E,C,C,A,E,K,C,C,G,C,C,C,E,A,G,E,E,C,C,A,A,I,C,I,C,E,wB,C,O,E,C,M,I,E,E,E,C,C,C,E,C,G,A,E,A,E,A,A,C,C,A,C,K,A,E,A,C,A,C,C,C,A,G,G,C,C,A,C,E,A,C,C,A,C,A,A,E,C,Q,E,C,sF,I,E,E,C,C,O,E,E,A,C,C,M,E,E,C,C,O,E,E,C,C,O,C,C,U,C,E,O,A,C,E,C,M,A,E,O,C,S,C,C,C,E,I,E,E,G,C,C,A,G,A,C,A,C,A,C,E,A,C,C,E,C,C,I,C,I,A,O,G,G,G,K,E,C,E,E,A,C,C,A,C,C,A,A,E,W,G,E,E,C,C,A,A,I,A,C,I,C,E,wB,C,O,E,C,M,I,G,E,A,E,C,E,C,C,E,E,E,A,E,E,E,A,E,E,E,C,C,A,C,C,A,S,C,E,I,E,M,C,A,C,A,E,wB,C,E,Q,G,E,I,E,C,C,A,C,C,C,C,C,Q,C,E,A,C,C,E,C,A,C,C,C,C,C,G,E,A,E,A,C,C,A,C,A,C,C,A,C,A,A,I,E,G,E,C,K,E,C,A,E,I,C,A,C,E,E,G,C,A,A,C,C,A,G,C,C,A,C,A,U,E,C,G,E,C,4E,I,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,I,C,E,E,C,C,O,A,E,E,C,C,M,G,E,G,C,E,M,C,A,C,E,E,G,G,I,G,G,C,C,I,E,G,C,C,M,E,A,A,O,E,E,C,K,C,E,A,C,A,C,C,A,E,I,C,C,A,E,G,E,I,E,I,E,A,E,A,E,C,G,C,C,E,E,I,U,C,E,K,I,G,A,E,A,C,M,G,C,C,A,E,Q,C,E,O,C,S,C,C,C,E,I,E,E,C,C,A,C,C,A,C,U,I,A,G,E,E,C,C,A,A,I,A,K,C,E,wB,C,E,Q,C,C,E,I,G,C,C,A,A,E,G,C,C,A,E,C,A,E,C,C,E,E,O,E,C,E,G,I,C,C,C,A,E,E,E,K,M,G,E,G,E,C,K,E,C,A,E,I,C,A,C,I,G,C,C,C,A,C,C,C,A,G,C,C,C,A,E,C,E,E,E,M,E,C,C,A,O,E,E,C,I,C,G,E,A,C,C,C,M,C,E,E,C,A,G,C,C,A,C,C,A,gB,Q,C,E,Q,G,E,W,E,C,A,G,C,A,C,E,E,C,M,E,Q,A,E,A,C,A,C,C,A,E,M,G,C,G,K,C,G,G,E,A,C,A,C,C,C,C,E,C,E,A,C,A,C,A,C,A,C,A,I,E,G,E,C,K,E,C,A,E,I,C,A,C,G,C,C,A,G,C,C,A,C,A,K,E,C,G,E,C,qF,I,E,E,C,C,O,E,E,A,C,C,M,E,E,C,C,O,E,E,C,C,O,C,C,S,C,E,O,A,C,E,A,M,C,E,O,C,S,C,C,C,E,I,E,E,G,C,C,A,A,C,C,C,C,A,S,E,E,I,A,A,K,C,E,wB,C,O,G,I,E,A,O,E,C,E,I,E,C,E,C,C,C,O,C,C,C,A,S,C,E,I,E,C,C,C,I,C,E,wB,C,E,Q,G,O,E,I,E,A,C,C,A,C,C,A,C,A,C,C,A,G,E,E,C,C,A,C,A,A,C,C,A,C,A,C,A,C,A,C,A,I,E,G,E,C,K,E,C,A,E,I,C,A,C,E,E,G,C,A,A,C,C,A,G,C,C,A,C,A,S,E,C,G,E,C,8E,I,E,E,C,C,O,E,E,A,C,C,O,E,E,C,C,O,E,E,C,C,O,C,C,M,C,E,O,A,A,C,E,G,I,E,O,C,S,C,C,C,E,I,G,E,E,C,A,C,E,C,A,E,A,I,K,C,E,wB,C,E,Q,C,C,E,G,E,E,A,C,A,A,C,C,C,C,A,A,C,C,A,S,C,G,K,C,G,C,E,wB,C,E,Q,G,G,E,C,G,E,A,G,A,C,A,E,E,C,C,I,C,A,A,C,C,A,I,C,G,A,A,C,C,A,C,C,A,I,C,C,A,C,A,C,A,C,A,oG,I,E,E,C,C,M,C,E,E,C,C,O,E,E,C,C,G,I,E,C,S,C,E,O,A,C,C,C,C,C,K,E,K,G,C,I,E,E,c,A,E,E,M,C,E,Q,C,E,G,C,A,K,C,C,C,sF,I,E,E,C,C,O,E,E,C,C,G,I,E,I,C,E,K,E,A,C,C,C,C,C,O,E,O,C,E,a,C,E,E,E,K,E,C,M,E,C,E,G,C,A,C,C,C,oG,I,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,O,I,K,I,M,C,A,M,C,E,C,Q,E,E,A,C,A,A,E,A,a,C,E,O,A,C,C,C,E,E,K,C,I,G,C,I,E,S,C,C,C,E,O,C,G,C,C,C,C,E,O,C,S,C,C,C,E,I,E,I,A,E,I,A,C,C,C,C,A,G,E,C,C,C,E,E,I,C,G,A,E,E,C,C,I,A,E,A,C,A,C,A,E,S,C,C,C,E,A,I,E,E,mB,K,C,E,Q,C,C,E,I,E,E,E,I,C,C,C,E,I,I,A,C,A,C,E,C,E,I,E,C,E,G,C,E,A,C,C,A,A,C,C,C,G,C,A,I,C,C,C,C,A,A,E,C,C,E,I,A,C,E,C,E,G,C,C,C,C,C,C,C,Q,E,O,C,E,E,E,C,C,E,E,I,I,A,C,E,E,E,I,C,A,C,E,E,C,C,A,C,A,C,E,I,E,Q,G,E,W,E,A,C,A,C,C,A,E,G,E,A,C,C,C,A,E,G,C,K,C,E,E,I,A,A,C,C,A,C,C,C,G,A,G,C,C,E,G,G,C,A,E,C,E,A,E,G,C,A,C,A,C,A,A,C,C,C,G,if,I,E,E,C,C,O,E,E,A,C,C,M,E,E,C,C,C,M,E,E,C,C,O,S,E,C,C,C,M,A,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,E,C,S,C,E,C,A,G,C,C,G,E,Y,I,C,E,C,A,I,C,C,C,A,I,E,I,E,I,U,C,C,I,C,W,E,U,C,E,C,A,G,C,C,A,C,C,A,A,C,M,E,S,C,E,K,C,K,E,E,E,C,E,I,E,E,O,C,G,C,A,E,K,C,A,C,C,A,M,C,A,C,E,E,G,G,C,I,E,E,C,C,I,E,E,K,I,C,E,K,E,E,E,W,O,I,E,O,A,C,C,E,A,E,E,K,O,C,E,K,I,A,C,E,C,C,A,E,E,K,U,C,E,K,I,G,C,A,C,A,E,E,K,c,C,E,K,I,A,G,C,C,A,C,E,I,S,C,E,I,E,E,E,E,C,C,A,A,C,A,C,C,C,C,E,C,A,A,C,C,E,A,C,C,C,M,Q,G,E,U,C,E,A,C,A,C,M,C,C,A,C,A,E,G,A,C,C,M,C,G,E,A,K,A,E,A,A,C,A,C,A,E,G,A,C,C,A,C,A,A,E,A,C,C,A,S,I,E,A,E,A,I,C,E,C,A,A,C,I,A,E,E,I,I,C,E,A,C,A,C,A,A,K,E,E,A,K,E,C,S,C,C,C,E,I,A,G,C,E,A,C,G,A,I,A,C,C,C,A,C,C,C,G,C,E,E,G,C,C,C,E,C,A,C,C,C,C,C,E,K,C,C,G,A,E,C,G,C,C,E,E,C,C,E,C,C,A,C,A,C,A,A,C,C,A,C,C,C,C,O,A,C,G,C,G,E,C,A,C,C,A,C,C,C,A,I,E,E,Y,C,C,I,C,S,C,E,O,E,E,E,C,E,C,C,C,C,G,C,S,C,E,G,E,E,C,C,C,C,E,E,C,C,C,A,C,C,A,C,C,A,A,E,A,G,A,C,E,C,A,C,A,C,O,C,W,G,E,E,C,C,E,C,C,E,C,E,A,A,C,C,E,A,E,I,E,A,A,C,A,A,C,A,C,C,A,E,S,C,G,G,C,K,C,G,C,C,C,E,C,A,C,A,A,C,C,O,C,C,0F,I,E,E,C,C,I,G,E,E,C,C,M,E,O,I,C,E,O,A,C,C,C,C,C,A,E,I,M,E,G,E,G,A,A,C,A,G,G,Q,E,A,K,E,G,E,K,G,E,E,C,C,U,A,E,I,A,E,A,E,A,K,G,E,E,E,U,A,E,I,A,E,A,E,A,A,K,C,G,C,E,E,A,Q,A,G,E,A,E,C,C,K,I,A,C,C,A,K,G,E,A,E,I,E,E,C,C,C,C,C,C,E,G,G,C,I,O,O,I,A,E,G,K,K,C,E,E,E,C,C,E,E,C,C,M,E,E,E,a,E,E,G,gB,C,E,C,A,C,A,I,4F,I,E,E,C,C,M,C,E,E,C,C,O,E,A,E,C,C,O,E,A,E,C,C,O,E,E,C,C,M,E,C,M,C,E,O,A,A,C,E,G,I,E,O,C,S,C,C,C,E,I,E,G,E,G,A,A,C,A,C,A,E,C,A,C,A,A,A,C,C,I,K,C,E,wB,C,E,Q,C,C,E,G,G,C,A,C,C,C,E,E,E,C,C,C,A,C,C,A,E,C,G,E,G,E,C,E,E,E,a,C,0B,C,C,C,A,G,E,E,A,C,A,C,C,C,C,C,G,M,G,E,G,C,C,A,G,A,E,M,C,C,A,A,E,C,C,E,K,C,E,A,I,E,C,C,C,U,C,oB,C,C,A,C,G,E,U,C,C,A,C,A,C,A,A,C,A,C,A,C,A,8F,I,E,E,C,C,O,E,I,C,E,A,K,E,A,C,E,C,M,E,M,C,S,C,C,C,E,O,G,C,C,A,C,A,C,A,C,iG,I,E,E,C,C,I,C,E,E,C,C,O,E,E,C,C,M,E,C,Q,C,E,O,A,C,C,C,K,E,G,C,C,E,E,M,C,E,O,C,S,C,C,C,E,I,E,A,E,G,C,G,E,C,C,A,A,E,C,C,G,E,I,K,C,E,wB,C,E,Q,C,C,E,I,E,I,A,E,C,A,C,C,E,C,C,E,C,C,C,E,C,C,A,C,A,I,E,E,C,C,E,C,C,E,A,C,A,A,C,A,A,C,A,E,C,E,A,E,C,C,E,C,G,A,A,C,C,C,C,A,C,C,C,Q,E,E,E,A,C,A,A,C,A,C,A,C,A,mG,I,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,O,E,E,A,C,C,O,E,S,C,E,O,A,C,E,A,M,C,E,O,C,S,C,C,C,E,I,G,E,C,C,C,C,A,U,c,C,E,Q,S,G,E,S,E,C,C,C,A,A,G,C,C,C,A,C,C,A,A,I,C,C,A,E,M,G,C,C,E,G,E,C,C,E,C,E,C,E,I,K,A,C,A,C,C,wB,C,E,Q,C,C,E,O,G,E,C,G,C,E,C,A,C,C,A,A,C,A,A,C,A,C,A,kG,I,E,E,C,C,O,E,E,C,C,M,E,C,S,C,E,O,A,C,E,A,M,C,E,O,C,S,C,C,C,E,I,E,G,C,C,A,C,A,C,A,C,C,I,K,C,E,wB,C,E,Q,C,C,E,M,C,I,E,A,C,E,C,A,C,G,C,C,A,A,C,C,C,E,I,C,E,C,A,C,C,A,A,C,A,A,C,A,C,A,mG,I,E,E,C,C,O,C,C,E,C,C,O,E,E,C,C,O,E,S,C,E,O,G,G,G,C,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,K,O,C,G,G,C,C,E,E,O,C,S,C,C,C,E,C,E,E,K,C,A,C,A,E,E,E,C,C,C,I,C,C,A,C,A,E,E,C,C,A,A,S,C,E,C,C,A,C,A,K,C,C,4F,I,E,E,C,C,O,E,E,A,C,C,O,E,E,C,C,O,C,C,S,C,E,O,A,C,C,C,A,E,I,G,E,O,C,S,C,C,C,E,I,E,I,C,A,E,C,C,A,C,E,C,C,E,C,C,C,Q,A,O,G,C,G,E,C,O,A,E,A,A,C,C,A,E,I,K,C,E,wB,C,E,Q,C,C,Q,G,E,U,C,E,A,C,A,C,G,E,C,C,A,C,C,I,A,C,C,C,C,A,M,C,C,E,C,C,G,A,C,A,I,E,C,C,C,A,C,E,E,W,a,C,E,Q,C,C,E,O,E,I,C,E,C,C,E,E,C,C,I,C,A,C,A,A,C,C,A,C,C,E,C,C,C,A,C,I,E,I,C,A,G,C,C,C,A,C,A,C,A,A,K,E,C,G,G,E,E,C,A,C,C,A,C,A,C,A,C,A,C,A,I,E,C,4F,I,E,E,C,C,O,E,E,C,C,I,C,E,S,C,E,O,E,C,M,A,E,S,C,E,Q,C,A,C,A,qG,I,E,E,C,C,O,E,E,C,C,M,A,E,W,C,E,O,A,C,C,C,E,A,M,C,E,U,C,G,E,S,A,C,A,C,C,S,O,C,C,C,G,E,O,E,A,C,A,C,C,S,O,C,C,C,A,C,A,W,wF,I,E,E,C,C,O,E,E,C,C,O,E,U,C,E,O,A,C,C,C,C,C,K,E,E,O,C,S,C,C,C,E,I,E,E,C,C,C,I,E,S,C,S,C,C,C,E,O,E,E,E,C,C,C,A,C,C,A,C,O,C,C,C,E,O,E,E,C,A,C,C,C,G,C,C,C,A,C,A,K,C,G,O,C,C,E,E,G,C,A,C,A,A,C,A,C,A,C,A,mG,I,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,O,E,E,A,C,C,O,E,S,C,E,O,A,C,E,A,M,C,E,O,C,S,C,C,C,E,E,S,C,G,K,C,G,C,E,wB,C,E,Q,G,O,E,Q,A,E,A,C,C,E,I,C,C,C,A,A,E,M,E,A,E,I,K,C,E,C,C,A,C,A,K,C,C,4F,I,E,E,C,C,O,E,E,C,C,O,C,C,S,C,E,O,A,C,C,C,A,E,I,G,K,G,C,I,G,C,C,C,E,O,C,S,C,C,C,E,I,E,C,C,A,C,C,I,K,C,E,wB,C,E,Q,C,C,E,I,E,E,E,A,G,C,C,A,C,C,C,C,A,C,C,C,A,C,E,I,C,G,A,A,E,C,A,C,C,C,O,A,E,A,C,A,C,C,A,C,A,C,A,C,A,6F,I,E,E,C,C,M,A,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,I,C,E,G,C,E,I,G,A,C,C,C,A,C,C,E,I,E,E,O,G,C,I,G,E,A,C,I,A,C,A,A,E,K,C,E,G,C,I,C,C,C,C,E,G,I,E,E,C,C,K,A,C,S,C,C,C,E,O,E,E,S,A,A,G,E,C,G,C,G,C,K,E,A,C,A,C,C,E,A,A,A,C,G,A,K,A,C,E,wB,C,E,Q,C,C,O,O,G,E,I,A,G,E,A,C,G,C,E,E,C,E,A,C,C,E,A,A,C,E,C,A,C,A,C,C,C,C,K,Q,G,E,E,C,C,G,E,E,Q,A,C,E,E,C,G,C,G,C,C,M,A,C,C,A,A,E,A,C,A,A,C,G,K,C,C,Q,G,E,E,C,C,G,E,E,K,A,G,C,C,C,G,C,E,E,C,A,C,C,A,I,A,C,C,E,A,C,A,A,C,A,C,E,K,W,I,G,E,E,E,E,S,E,A,G,E,C,G,C,E,C,C,A,A,O,A,E,E,C,I,G,A,C,C,C,E,C,G,C,E,C,C,A,C,A,C,A,C,C,E,C,A,C,C,G,E,A,C,A,C,K,4F,I,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,O,E,E,M,C,E,O,A,C,C,A,C,E,G,I,E,O,C,S,C,C,C,E,I,Q,E,E,C,C,A,C,C,C,E,A,O,C,A,E,I,C,I,A,A,G,C,C,A,A,E,E,Q,C,E,K,C,G,A,G,E,A,A,C,E,E,E,C,A,C,E,C,A,E,A,I,C,A,E,A,G,E,A,C,E,Q,M,G,E,I,G,E,E,E,C,A,E,C,G,C,A,E,E,C,G,A,A,E,A,A,C,A,E,E,G,C,E,A,E,C,A,A,C,C,A,E,W,E,E,E,C,A,E,C,E,K,G,A,E,A,C,A,C,A,E,S,C,C,C,O,E,E,K,I,C,E,I,C,C,C,M,C,A,E,wB,C,E,E,G,C,C,A,C,C,E,E,M,C,A,C,C,C,E,C,G,E,A,G,A,C,A,E,E,C,C,I,C,A,A,C,C,A,I,C,G,A,A,E,C,A,C,C,G,A,C,C,A,A,A,C,C,A,I,A,K,C,E,wB,C,E,Q,C,C,E,E,G,C,C,A,C,C,A,C,E,A,C,A,C,C,G,G,C,A,E,E,A,I,A,C,C,A,A,C,A,C,A,C,A,C,A,C,A,M,K,G,E,A,C,C,C,A,E,C,E,C,C,C,C,G,G,C,A,C,E,Q,A,E,A,C,A,C,C,A,C,A,C,A,C,A,sG,I,E,E,C,C,M,C,E,E,C,C,O,E,E,C,C,O,A,E,Y,C,E,O,A,C,C,C,C,C,C,C,K,A,G,C,I,E,E,c,A,E,I,E,E,K,A,C,E,G,G,G,C,A,C,C,Q,C,W,O,C,C,C,E,C,G,A,C,C,gH,I,E,E,C,C,M,C,E,E,C,C,O,E,E,C,C,O,C,C,Y,C,E,O,A,C,E,G,I,E,G,G,K,E,E,c,A,E,E,O,C,S,C,C,C,E,I,E,E,A,G,E,C,A,C,C,I,K,C,E,wB,C,E,Q,C,C,E,I,E,C,C,G,E,C,A,C,C,E,C,C,E,A,A,C,C,A,C,C,A,I,C,G,C,E,E,G,A,C,C,C,A,C,A,C,A,A,A,C,A,A,C,A,C,G,E,S,A,C,C,C,C,C,I,C,K,C,E,G,C,A,C,Q,C,C,C,C,E,G,C,Q,C,a,yF,I,E,E,C,C,M,C,E,E,C,C,E,K,E,E,C,C,O,E,Q,G,C,E,O,A,C,C,C,C,C,A,M,A,E,E,C,C,A,A,C,E,A,C,O,C,C,E,E,G,E,A,C,A,E,A,Q,G,C,G,A,C,C,A,C,C,C,A,C,C,K,A,E,A,O,G,A,G,C,A,C,C,A,E,E,G,O,C,C,M,C,C,C,K,M,A,A,S,C,qC,C,C,A,G,I,E,G,E,E,E,A,E,E,I,A,S,C,sB,C,C,A,O,E,O,C,C,K,C,E,G,C,C,E,E,O,C,E,I,C,E,A,C,A,C,A,C,iG,I,E,E,C,C,O,E,E,C,C,O,E,A,I,K,C,E,O,A,C,E,A,M,C,K,G,C,I,E,E,qB,A,E,E,G,C,S,C,E,M,C,K,C,E,G,M,C,E,G,E,C,A,C,C,A,C,A,M,yF,I,E,E,C,C,M,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,O,E,E,C,C,O,E,E,I,C,E,O,A,A,C,E,G,I,E,O,C,S,C,C,C,E,I,E,I,E,K,E,C,C,C,A,I,C,E,C,U,C,E,C,C,A,I,E,S,C,A,E,E,K,C,G,A,C,C,A,A,K,C,E,A,C,A,C,A,A,C,M,E,I,K,C,E,wB,C,E,Q,C,C,E,a,E,K,E,E,E,E,C,E,A,C,C,C,C,A,I,K,E,M,E,E,C,A,A,A,E,G,K,A,E,A,C,A,C,I,E,M,C,C,C,A,C,G,S,C,E,C,C,sB,C,E,Q,G,E,Q,E,C,A,A,E,I,C,E,C,G,E,K,E,C,C,A,C,A,C,C,A,I,C,I,Q,C,C,C,A,S,E,E,K,I,A,E,C,A,C,C,I,A,C,A,A,C,A,C,A,C,A,G,C,K,K,I,K,6Y,I,E,E,C,C,M,E,E,C,C,O,E,E,C,C,O,C,C,W,C,E,O,A,C,C,C,E,A,K,C,E,K,G,C,C,I,E,E,C,C,A,C,C,E,A,O,C,A,C,A,G,C,C,E,C,S,C,C,C,E,I,E,C,I,A,E,O,C,C,A,A,E,C,C,A,C,C,I,C,C,C,C,A,C,C,Y,E,C,C,A,E,I,K,C,E,wB,C,E,Q,C,C,M,I,Q,E,E,G,E,E,C,G,E,C,C,E,I,C,E,E,I,G,A,A,E,K,C,A,I,C,K,C,C,6F,I,C,C,E,E,C,A,C,A,G,C,E,A,C,E,C,C,G,C,E,A,E,E,G,A,E,C,Q,E,C,A,E,E,G,A,C,C,C,I,A,E,I,E,A,O,C,C,C,A,I,C,A,G,E,G,C,A,C,A,E,C,K,M,E,C,C,A,A,C,C,W,K,E,K,C,C,C,C,C,E,K,A,E,C,Q,E,C,A,E,Q,A,E,A,C,A,C,S,C,E,K,E,K,C,C,C,C,C,E,K,A,E,C,K,C,G,A,C,C,A,K,C,E,A,C,A,C,A,C,U,E,I,A,C,A,A,C,C,A,C,A,C,A,C,A,oG,I,E,E,C,C,M,E,E,C,C,M,C,E,E,C,C,G,I,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,K,E,E,E,C,C,O,E,E,C,C,M,G,E,Q,C,E,O,A,C,G,G,G,K,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,E,C,S,C,E,C,A,I,E,O,A,E,E,Y,C,E,C,C,E,E,C,Q,K,C,A,C,C,I,G,E,C,C,E,A,E,E,E,C,C,C,A,E,C,C,C,A,C,E,I,A,C,G,C,A,E,E,O,C,S,C,C,C,E,I,E,E,C,A,G,E,E,C,A,C,K,E,A,C,E,I,E,E,E,E,E,C,E,E,A,I,A,C,A,E,I,I,E,C,A,E,E,S,E,C,A,E,S,C,E,G,G,A,C,C,C,C,C,A,A,E,I,A,E,C,E,E,G,E,C,I,E,E,E,A,E,Y,C,C,C,A,G,C,G,C,A,C,C,C,E,I,E,A,O,C,C,C,A,C,K,C,C,E,I,C,C,C,E,E,C,C,C,C,A,E,I,C,G,E,C,E,C,A,C,A,E,C,K,M,E,C,C,A,E,e,C,E,E,A,O,I,O,E,E,C,C,G,A,C,A,A,C,A,A,G,I,E,C,A,C,E,C,C,C,C,Y,G,A,C,E,E,E,G,C,C,C,C,C,C,A,A,E,E,C,C,I,C,C,C,A,C,C,C,K,C,E,O,E,K,E,C,G,I,C,E,A,C,C,A,E,O,E,C,E,E,E,O,C,E,O,E,A,C,C,K,C,A,C,C,C,C,A,E,A,G,E,K,C,C,C,G,E,A,C,A,C,A,O,E,I,K,C,E,wB,C,E,Q,C,C,E,E,E,O,C,E,E,I,E,C,I,C,G,E,C,A,C,C,E,I,A,E,A,E,E,C,C,A,C,A,C,A,C,C,C,Q,O,E,O,E,C,E,O,E,M,E,E,A,C,C,A,C,C,S,C,E,O,E,O,E,C,E,O,E,K,C,A,E,C,A,C,A,A,C,C,C,C,A,W,E,I,A,C,A,A,C,A,C,A,C,A,G,ka,I,E,E,C,C,M,E,E,C,C,G,I,E,E,C,C,O,E,E,C,C,O,E,E,A,C,C,O,C,C,E,C,C,O,E,E,C,C,K,E,E,Y,C,E,O,A,C,C,C,E,C,M,A,E,O,C,S,C,C,C,E,I,E,E,C,A,E,A,S,A,C,E,K,C,C,E,K,C,C,C,E,K,A,E,C,K,C,G,A,C,C,A,K,C,E,A,C,A,C,A,A,C,C,S,C,G,K,C,G,C,E,wB,C,E,Q,C,C,E,I,E,E,I,A,E,K,C,C,C,C,C,A,I,C,A,G,G,C,A,C,C,I,E,W,C,C,C,C,C,C,E,E,S,C,C,C,I,A,K,C,A,C,C,A,C,A,A,E,G,A,C,C,I,C,A,A,E,I,C,E,C,G,Q,E,C,C,A,E,G,C,E,S,C,C,C,C,uB,C,E,Q,E,C,E,Q,C,C,E,G,E,A,C,C,C,C,I,E,C,A,E,W,E,A,C,A,C,A,E,A,I,C,I,C,C,E,G,C,A,C,A,C,A,C,A,A,E,I,K,C,E,wB,C,E,Q,C,C,E,Q,E,E,K,A,E,A,C,I,I,I,E,E,G,E,E,I,C,C,C,C,E,I,C,E,E,I,G,A,A,E,K,C,A,I,C,K,C,C,6F,C,C,W,K,C,C,E,K,C,C,C,E,K,A,E,C,Q,E,C,A,E,Q,A,E,A,C,A,C,E,S,E,K,C,C,E,K,C,C,C,E,K,A,E,C,W,E,A,C,A,C,C,A,C,A,C,A,C,A,oG,I,E,E,C,C,M,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,O,E,E,Q,C,E,O,A,C,E,C,M,A,E,O,C,S,C,C,C,E,I,E,E,E,A,C,Q,A,C,E,C,C,A,I,C,C,G,A,C,C,A,K,C,E,A,C,A,C,A,A,C,C,Q,O,Q,G,E,E,C,Q,C,C,C,C,E,G,G,E,A,C,G,E,E,E,C,A,E,C,G,A,A,E,C,E,G,C,C,A,C,C,A,C,C,E,C,A,E,A,C,E,C,Q,E,C,C,A,G,C,E,E,S,C,C,I,A,M,E,C,A,C,C,C,C,C,A,A,C,C,I,C,A,A,E,S,C,E,C,C,a,W,C,E,E,E,G,C,A,C,A,C,E,C,E,A,C,C,C,C,A,A,E,C,E,C,E,wB,C,E,Q,C,C,E,O,E,I,A,C,E,C,C,C,C,S,E,I,I,E,C,A,E,Q,A,E,A,C,A,C,E,S,Q,G,E,W,C,C,C,A,C,C,C,G,A,A,C,A,C,C,A,C,A,C,A,A,C,A,gB,K,K,I,K,8d,I,E,E,C,C,O,E,E,C,C,O,C,C,E,C,C,O,E,E,A,C,C,I,C,E,E,C,C,O,E,E,C,C,M,G,c,C,E,O,M,E,E,E,E,A,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,I,E,E,G,c,C,G,G,C,C,E,E,O,C,S,C,C,C,E,I,I,E,C,C,I,E,C,A,E,A,K,C,G,A,A,C,C,A,E,G,C,A,A,W,O,C,C,C,C,A,C,E,E,G,C,O,C,E,E,S,C,C,C,C,C,C,C,S,C,E,wB,C,E,Q,C,C,E,C,C,C,C,C,E,C,E,C,A,C,C,A,C,C,C,E,C,C,C,C,C,C,G,C,A,C,C,E,C,I,C,A,E,S,C,C,E,E,A,I,C,C,A,A,C,A,C,E,I,C,C,C,C,C,C,C,C,C,C,E,C,A,E,C,E,C,E,E,I,K,C,E,wB,C,E,Q,C,C,E,G,E,C,E,E,E,E,C,C,C,C,E,A,I,E,I,C,A,E,A,C,A,C,G,C,C,A,C,K,E,E,E,C,E,K,C,E,A,C,C,A,C,A,A,A,C,A,A,C,A,A,C,A,gG,I,E,E,C,C,K,C,E,E,C,C,M,C,E,M,C,E,O,A,A,C,E,G,I,E,gB,C,E,G,C,E,C,I,C,C,gf,I,E,E,C,C,K,C,E,E,C,C,O,E,G,C,E,I,G,G,G,I,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,O,E,O,C,S,C,C,C,E,E,G,C,K,C,K,E,E,C,E,C,E,C,I,E,O,C,E,C,C,A,C,A,K,C,C,mf,I,E,E,C,C,O,E,I,G,C,E,O,C,K,C,G,E,E,C,A,E,C,C,E,U,M,C,I,A,C,A,C,E,C,S,C,E,C,A,O,E,G,C,K,C,K,E,E,E,C,E,I,C,M,I,8gF,I,E,E,C,C,O,E,K,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,I,E,E,C,C,O,O,c,C,E,A,wB,C,Y,E,I,W,O,E,qB,C,G,A,I,E,E,C,C,O,O,E,Y,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,I,E,E,C,C,O,O,c,C,A,E,kB,C,Y,E,I,W,O,E,e,C,G,A,I,E,E,C,C,M,A,O,c,C,E,U,C,Y,E,I,W,O,E,O,C,G,A,I,E,E,C,C,O,O,A,c,C,E,kB,C,Y,E,I,W,O,E,e,C,G,A,I,E,E,C,C,O,K,E,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,I,E,E,C,C,O,I,G,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,I,E,E,C,C,O,M,C,c,C,E,O,C,Y,E,I,W,O,E,I,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,I,E,E,C,C,O,O,A,c,C,E,Q,C,Y,E,I,W,O,E,K,C,G,A,O,c,C,E,iB,C,W,G,I,W,O,E,c,C,G,A,I,E,E,C,C,O,O,A,c,C,E,Q,C,Y,E,I,W,O,E,K,C,G,A,O,c,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,I,E,E,C,C,O,O,S,K,C,E,iB,C,Y,E,I,W,O,E,c,C,G,A,O,c,C,E,0B,C,Y,E,I,W,O,E,uB,C,G,A,I,E,E,C,C,O,O,c,C,A,E,uB,C,Y,E,I,W,O,E,oB,C,G,A,O,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,I,E,E,C,C,O,C,M,c,C,E,Y,C,Y,E,I,W,O,E,S,C,G,A,I,E,E,C,C,O,I,G,c,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,I,E,E,C,C,O,E,K,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,I,E,E,C,C,O,I,G,c,C,E,e,C,W,G,I,W,O,E,Y,C,G,A,O,c,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,I,E,E,C,C,O,C,M,c,C,E,O,C,Y,E,I,W,O,E,I,C,G,A,I,E,E,C,C,O,C,M,c,C,E,O,C,Y,E,I,W,O,E,I,C,G,A,I,E,E,C,C,K,O,A,c,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,I,E,E,C,C,O,O,E,Y,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,I,E,E,C,C,O,K,E,c,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,I,E,E,C,C,O,M,C,c,C,E,iB,C,W,G,I,W,O,E,c,C,G,A,I,E,E,C,C,M,O,c,A,C,E,0B,C,W,G,I,W,O,E,uB,C,G,A,I,E,E,C,C,O,O,A,c,C,E,a,C,Y,E,I,W,O,E,U,C,G,A,I,E,E,C,C,O,O,G,W,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,I,E,E,C,C,O,O,a,C,C,E,0B,C,Y,E,I,W,O,E,uB,C,G,A,I,E,E,C,C,O,O,G,W,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,I,E,E,C,C,O,O,E,Y,C,E,e,C,Y,E,I,W,O,E,Y,C,G,A,I,E,E,C,C,O,O,S,K,C,E,sB,C,Y,E,I,W,O,E,mB,C,G,A,I,E,E,C,C,O,O,Q,M,C,E,e,C,W,G,I,W,O,E,Y,C,G,A,I,E,E,C,C,O,O,Y,E,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,I,E,E,C,C,O,O,S,K,C,E,gB,C,Y,E,I,W,O,E,a,C,G,A,I,E,E,C,C,O,O,E,Y,C,E,S,C,Y,E,I,W,O,E,M,C,G,A,I,E,E,C,C,O,O,O,O,C,E,c,C,Y,E,I,W,O,E,W,C,G,A,I,E,E,C,C,O,O,C,a,C,E,Q,C,Y,E,I,W,O,E,K,C,G,A,I,E,E,C,C,O,O,C,a,C,E,Q,C,Y,E,I,W,O,E,K,C,G,A,I,E,E,C,C,O,O,I,U,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,I,E,E,C,C,O,O,A,c,C,E,O,C,Y,E,I,W,O,E,I,C,G,A,I,E,E,C,C,O,O,K,S,C,E,Y,C,W,G,I,W,O,E,S,C,G,A,I,E,E,C,C,O,O,Y,E,C,E,mB,C,Y,E,I,W,O,E,gB,C,G,A,I,E,E,C,C,O,O,I,U,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,I,E,E,C,C,O,M,C,c,C,E,M,C,Y,E,I,W,O,E,G,C,G,A,I,E,E,C,C,O,O,I,U,C,E,W,C,Y,E,I,W,O,E,Q,C,G,A,I,E,E,C,C,O,O,C,a,C,E,Q,C,Y,E,I,W,O,E,K,C,G,A,I,E,E,C,C,O,O,C,a,C,E,Q,C,Y,E,I,W,O,E,K,C,G,A,I,E,E,C,C,O,K,E,c,C,E,K,C,W,G,I,W,O,E,E,C,G,A,I,E,E,C,C,O,O,a,C,C,E,oB,C,Y,E,I,W,O,E,iB,C,G,A,I,E,E,C,C,O,O,C,a,C,E,Q,C,W,G,I,W,O,E,K,C,G,A,I,G,E,C,C,O,O,K,S,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,A,c,C,E,O,C,Y,E,I,W,O,G,I,C,G,A,I,G,E,C,C,O,O,C,a,C,E,Q,C,Y,E,I,W,O,G,K,C,G,A,I,G,E,C,C,O,O,M,Q,C,E,a,C,Y,E,I,W,O,G,U,C,G,A,I,G,E,C,C,O,O,C,a,C,E,Q,C,Y,E,I,W,O,G,K,C,G,A,I,G,E,C,C,O,O,C,a,C,E,Q,C,Y,E,I,W,O,G,K,C,G,A,I,G,E,C,C,M,O,A,c,C,E,M,C,W,G,I,W,O,G,G,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,C,a,C,E,Q,C,Y,E,I,W,O,G,K,C,G,A,I,G,E,C,C,O,O,C,a,C,E,Q,C,Y,E,I,W,O,G,K,C,G,A,E,E,C,C,O,G,I,E,C,E,C,C,K,E,O,c,C,E,S,C,Y,E,I,W,O,G,M,C,G,A,I,G,E,C,C,O,O,A,c,C,E,Q,C,W,G,I,W,O,G,K,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,C,a,C,E,S,C,Y,E,I,W,O,G,M,C,G,A,I,G,E,C,C,O,O,M,Q,C,E,c,C,Y,E,I,W,O,G,W,C,G,A,I,G,E,C,C,O,O,K,S,C,E,a,C,Y,E,I,W,O,G,U,C,G,A,I,G,E,C,C,O,O,O,O,C,E,e,C,Y,E,I,W,O,G,Y,C,G,A,I,G,E,C,C,O,O,K,S,C,E,a,C,Y,E,I,W,O,G,U,C,G,A,I,G,E,C,C,K,O,O,O,C,E,a,C,W,G,I,W,O,G,U,C,G,A,I,G,E,C,C,O,O,K,S,C,E,a,C,W,G,I,W,O,G,U,C,G,A,I,G,E,C,C,O,O,W,G,C,E,mB,C,W,G,I,W,O,G,gB,C,G,A,I,G,E,C,C,O,O,Y,E,C,E,oB,C,Y,E,I,W,O,G,iB,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,M,Q,C,E,c,C,Y,E,I,W,O,G,W,C,G,A,I,G,E,C,C,O,O,K,S,C,E,a,C,Y,E,I,W,O,G,U,C,G,A,I,G,E,C,C,O,O,E,Y,C,E,U,C,Y,E,I,W,O,G,O,C,G,A,I,G,E,C,C,O,O,A,c,C,E,Q,C,Y,E,I,W,O,G,K,C,G,A,I,G,E,C,C,O,O,G,W,C,E,W,C,Y,E,I,W,O,G,Q,C,G,A,I,G,E,C,C,O,O,O,O,C,E,e,C,W,G,I,W,O,G,Y,C,G,A,I,G,E,C,C,O,O,S,K,C,E,iB,C,Y,E,I,W,O,G,c,C,G,A,I,G,E,C,C,O,O,A,c,C,E,Q,C,Y,E,I,W,O,G,K,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,Q,M,C,E,gB,C,Y,E,I,W,O,G,a,C,G,A,I,G,E,C,C,O,O,G,W,C,E,W,C,Y,E,I,W,O,G,Q,C,G,A,I,G,E,C,C,K,O,c,C,E,A,uB,C,Y,E,I,W,O,G,oB,C,G,A,I,G,E,C,C,O,O,c,C,E,C,yB,C,Y,E,I,W,O,G,uB,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,E,Y,C,E,U,C,Y,E,I,W,O,G,O,C,G,A,I,G,E,C,C,O,O,A,c,C,E,Q,C,Y,E,I,W,O,G,K,C,G,A,I,G,E,C,C,O,O,E,Y,C,E,U,C,Y,E,I,W,O,G,O,C,G,A,I,G,E,C,C,O,O,K,S,C,E,a,C,Y,E,I,W,O,G,U,C,G,A,I,G,E,C,C,M,O,M,Q,C,E,a,C,W,G,I,W,O,G,U,C,G,A,I,G,E,C,C,O,O,C,a,C,E,S,C,Y,E,I,W,O,G,M,C,G,A,I,G,E,C,C,O,O,C,a,C,E,S,C,Y,E,I,W,O,G,M,C,G,A,I,G,E,C,C,O,O,G,W,C,E,W,C,Y,E,I,W,O,G,Q,C,G,A,I,G,E,C,C,O,M,C,c,C,E,O,C,Y,E,I,W,O,G,I,C,G,A,I,G,E,C,C,M,O,K,S,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,A,c,C,E,Q,C,Y,E,I,W,O,G,K,C,G,A,I,G,E,C,C,O,O,E,Y,C,E,U,C,Y,E,I,W,O,G,O,C,G,A,I,G,E,C,C,O,O,S,K,C,E,iB,C,W,G,I,W,O,G,c,C,G,A,I,G,E,C,C,O,O,E,Y,C,E,U,C,W,G,I,W,O,G,O,C,G,A,I,G,E,C,C,O,M,C,c,C,E,O,C,Y,E,I,W,O,G,I,C,G,A,I,G,E,C,C,O,K,E,c,C,E,M,C,Y,E,I,W,O,G,G,C,G,A,I,G,E,C,C,O,O,A,c,C,E,Q,C,Y,E,I,W,O,G,K,C,G,A,I,G,E,C,C,M,O,O,O,C,E,c,C,Y,E,I,W,O,G,W,C,G,A,I,G,E,C,C,O,K,E,c,C,E,M,C,Y,E,I,W,O,G,G,C,G,A,I,G,E,C,C,M,O,I,U,C,E,W,C,Y,E,I,W,O,G,Q,C,G,A,I,G,E,C,C,O,O,E,Y,C,E,U,C,Y,E,I,W,O,G,O,C,G,A,I,G,E,C,C,O,O,G,W,C,E,W,C,Y,E,I,W,O,G,Q,C,G,A,I,G,E,C,C,O,O,K,S,C,E,a,C,Y,E,I,W,O,G,U,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,K,E,c,C,E,M,C,Y,E,I,W,O,G,G,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,c,C,C,C,wB,C,W,G,I,W,O,G,qB,C,G,A,I,G,E,C,C,O,O,G,W,C,E,W,C,Y,E,I,W,O,G,Q,C,G,A,I,G,E,C,C,O,O,A,c,C,E,Q,C,Y,E,I,W,O,G,K,C,G,A,I,G,E,C,C,M,O,G,W,C,E,U,C,Y,E,I,W,O,G,O,C,G,A,I,G,E,C,C,O,O,U,I,C,E,kB,C,Y,E,I,W,O,G,e,C,G,A,I,G,E,C,C,O,O,M,Q,C,E,c,C,Y,E,I,W,O,G,W,C,G,A,I,G,E,C,C,O,O,Q,M,C,E,gB,C,Y,E,I,W,O,G,a,C,G,A,I,G,E,C,C,O,O,G,W,C,E,W,C,Y,E,I,W,O,G,Q,C,G,A,I,G,E,C,C,M,O,E,Y,C,E,S,C,Y,E,I,W,O,G,M,C,G,A,I,G,E,C,C,O,O,C,a,C,E,S,C,Y,E,I,W,O,G,M,C,G,A,I,G,E,C,C,O,O,K,S,C,E,a,C,W,G,I,W,O,G,U,C,G,A,I,G,E,C,C,O,O,A,c,C,E,Q,C,Y,E,I,W,O,G,K,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,G,W,C,E,W,C,Y,E,I,W,O,G,Q,C,G,A,I,G,E,C,C,O,O,C,a,C,E,S,C,W,G,I,W,O,G,M,C,G,A,I,G,E,C,C,O,O,K,S,C,E,a,C,Y,E,I,W,O,G,U,C,G,A,I,G,E,C,C,O,M,C,c,C,E,O,C,Y,E,I,W,O,G,I,C,G,A,I,G,E,C,C,O,O,Q,M,C,E,gB,C,Y,E,I,W,O,G,a,C,G,A,I,G,E,C,C,M,O,C,a,C,E,Q,C,Y,E,I,W,O,G,K,C,G,A,I,G,E,C,C,O,O,M,Q,C,E,c,C,Y,E,I,W,O,G,W,C,G,A,I,G,E,C,C,O,O,C,a,C,E,S,C,Y,E,I,W,O,G,M,C,G,A,I,G,E,C,C,O,M,C,c,C,E,O,C,Y,E,I,W,O,G,I,C,G,A,I,G,E,C,C,O,O,G,W,C,E,W,C,Y,E,I,W,O,G,Q,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,M,O,K,S,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,M,Q,C,E,c,C,Y,E,I,W,O,G,W,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,M,Q,C,E,c,C,Y,E,I,W,O,G,W,C,G,A,I,G,E,C,C,M,O,M,Q,C,E,a,C,Y,E,I,W,O,G,U,C,G,A,I,G,E,C,C,O,M,C,c,C,E,O,C,Y,E,I,W,O,G,I,C,G,A,I,G,E,C,C,O,O,G,W,C,E,W,C,Y,E,I,W,O,G,Q,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,I,U,C,E,Y,C,Y,E,I,W,O,G,S,C,G,A,I,G,E,C,C,O,K,E,c,C,E,M,C,W,G,I,W,O,G,G,C,G,A,I,G,E,C,C,O,O,G,W,C,E,W,C,W,G,I,W,O,G,Q,C,G,A,I,G,E,C,C,O,O,O,O,C,E,e,C,Y,E,I,W,O,G,Y,C,G,A,I,G,E,C,C,O,O,O,O,C,E,e,C,Y,E,I,W,O,G,Y,C,G,A,I,G,E,C,C,O,O,O,O,C,E,e,C,Y,E,I,W,O,G,Y,C,G,A,I,G,E,C,C,O,O,E,Y,C,E,U,C,Y,E,I,W,O,G,O,C,G,A,I,G,E,C,C,O,O,M,Q,C,E,c,C,Y,E,I,W,O,G,W,C,G,A,I,G,E,C,C,M,O,K,S,C,E,Y,C,W,G,I,W,O,G,S,C,G,A,I,G,E,C,C,O,O,E,Y,C,E,U,C,Y,E,I,W,O,G,O,C,G,A,I,G,E,C,C,M,O,E,Y,C,E,S,C,Y,E,I,W,O,G,M,C,G,A,I,G,E,C,C,O,O,M,Q,C,E,c,C,W,G,I,W,O,G,W,C,G,A,I,G,E,C,C,O,O,K,S,C,E,a,C,Y,E,I,W,O,G,U,C,G,A,I,G,E,C,C,O,O,O,O,C,E,e,C,Y,E,I,W,O,G,Y,C,G,A,I,G,E,C,C,O,O,K,S,C,E,a,C,Y,E,I,W,O,G,U,C,G,A,I,G,E,C,C,O,O,S,K,C,E,iB,C,Y,E,I,W,O,G,c,C,G,A,I,G,E,C,C,O,O,C,a,C,E,S,C,Y,E,I,W,O,G,M,C,G,A,I,G,E,C,C,O,O,E,Y,C,E,U,C,Y,E,I,W,O,G,O,C,G,yQgFIO,OAAM,EAoBX,YAAY,CAAU,CAAE,CAAQ,CAAE,CAAM,CAAE,CACxC,IAAI,CAAC,KAAK,CAAG,EAAW,KAAK,CAC7B,IAAI,CAAC,GAAG,CAAG,EAAS,GAAG,CACvB,IAAI,CAAC,UAAU,CAAG,EAClB,IAAI,CAAC,QAAQ,CAAG,EAChB,IAAI,CAAC,MAAM,CAAG,CAChB,CAEA,GAAI,CAAC,OAAO,WAAW,CAAC,EAAG,CACzB,MAAO,UACT,CAEA,QAAS,CACP,MAAO,CACL,MAAO,IAAI,CAAC,KAAK,CACjB,IAAK,IAAI,CAAC,GAAG,AACf,CACF,CACF,CAMO,MAAM,EAiCX,YAAY,CAAI,CAAE,CAAK,CAAE,CAAG,CAAE,CAAI,CAAE,CAAM,CAAE,CAAK,CAAE,CACjD,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,GAAG,CAAG,EACX,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,MAAM,CAAG,EAEd,IAAI,CAAC,CAFiB,IAEZ,CAAG,EACb,IAAI,C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,MAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,IAAA,IAAA,KAAA,CAAA,GAG9D,A4BRE,6eEnBuB,ChF8F1B,AN0JA,AiChOA,AE7BA,ANeA,A1B+EA,AcpGA,AKiCA,AjCyCA,AQjBA,AyD6H6B,0VgCvIF,CjDwB3B,A5CXA,AQ8C4B,AkFjEA,AnF2R5B,AiCvPA,A1BPA,AWyFA,IAAA,kHoE9FE,CAAC,AnDXH,6D0C+BA,IAAA,EAAA,oBAEM,KAGE,EAFN,EAEM,gCAQC,MAAA,CAAA,mDAPoE,YAIA,+OAlH/D,EAAA,EAAA,KAAqB,CAAC,IAAA,CAAA,EAAA,CAAQ,kFAeN,CxFgFtC,AIpDoE,AIoCpE,AS+CA,A+BrEA,AdtBA,AxBPA,AuB0BA,AdhCA,yEqESI,ChFqEJ,A2DzDG,AxDwQH,A0BpRA,CAAA,CAAA,CAAA,KmDGU,EAAA,0FAaR,8EAYkC,0LzF3FpB,C+BDhB,AQDA,A3BDA,ACEA,AaAA,AGIA,ACNA,AfAA,ACEyC,AfFzC,AgBE8B,AeF9B,ACEA,ALFwC,AYAxC,ACAA,AC4B+B,ACtB/B,AEL8B,A1CCA,ADDA,AEAA,ACU9B,ACTA,ACFA,A2BAA,A1BEA,ACOA,A0BTA,ACEA,ACFA,ACAA,AXMA,AmBNA,ACAA,ArCAA,AsCSA,ACTA,ACEA,ACEA,APJA,ApBAA,ADCA,AEDA,AHAA,ADAA,ADOA,ADPA,AiCAA,AzCAA,AOC8B,AJDgB,C8BA9C,OAAA,SAAA,qqBayOS,EAzD4C,gHAiLrD,SAAA,CAAuC,CxDiHvC,AiCjFA,AfYA,AdDA,CAAA,EoD1CE,GAAA,YAAA,OAAA,EAAA,SAAA,gDAGoD,SACzC,EAAA,sBAMA,UAOb,CAAC,QAzIC,CADO,CAnD0B,IAoDjC,KAAA,CAAc,GXwThB,GWtTmB,aAaV,AAAY,CvB0CrB,A7B/BM,Aa8HN,AHPA,AmBxFA,ChB+FA,AHPA,AiDsJA,A9B9OA,CuBzCE,ClC6lBF,AlBllBG,EAAA,sDoDhBkB,C1C6HrB,AmBlFA,A7BjCA,sCoDTa,EAAA,oDA1HE,IAAA,CAAM,CAAA,EAAA,sDAWnB,8IAcsD,C1CqGxD,AIrEA,AdpBA,A2D8QA,A/DhMA,CI9EA,AUyFA,AdXA,EAAA,kCwDxF6B,IAAI,CvB4CjC,A8B8OA,AnBtNA,AYpEkC,AvCiIlC,A+BjGA,A1B0jBA,ARrfA,AdXA,AQvBA,AG4NgC,CXrMhC,AQvBA,AMkCA,AQqfA,ALxdmC,A8CwJnC,AnBtNA,AXxBA,AeZA,AQhCmC,CZoEnC,A9BiCA,AdXA,AsBggBA,AdvhBA,AwCnCA,AfYA,CWwBA,A3B6DA,A8CyJA,AvDvNA,ARuBA,AcWA,AkCrEA,A1B0jBA,AW9iBA,CeZA,A/BiGA,AgBrFA,AWwBA,ApCDA,AMkCA,AdXA,A+DgMA,OPzRkB,4BAMD,GAAA,QAAA,MACX,CWvBD,AlCuEL,A6DhDK,A7EoIL,yBuCjIU,EAAA,WAAA,CAAA,GAAA,CAAA,mDAYV,CAAC,AAiBD,SAAA,GAAA,CAAA,CAAA,CAAA,UACQ,WAAA,CAAA,CAAA,KAEA,CAAA,gBAAA,CAAA,CAAmB,CAAA,4BAGR,EAAA,KAAA,MAAA,GAAA,4BAQT,CRkCV,ArC4QA,AoDrBA,IAAA,CAAA,EAAA,CAAA,EAAA,EPzR6B,CAAA,KAAA,CAAA,KAAA,eAMqC,C7C8SlE,AX7NA,AgDhDA,AlCmFA,AiDsKA,CAAA,AjDtKA,AH0LA,AG1LA,CH0LA,AqC7QA,AeyPA,A/DzMA,CW6NA,AqC7QA,AhDgDA,AcmCA,AiDsKA,CP1RuE,A7C8SvE,AqC7QA,AhDgDA,AcmCA,EAAA,G0CpHgF,cAEvD,EAAA,EAAsB,C3ByJ/C,A7BxEA,C6BwEA,AfrCA,AiDsKA,ClCjIA,AfrCA,AdnCA,A+DyMA,EAAA,CAAA,EP1RuD,CO0RvD,AjDtKA,AeqC0D,A7BxE1D,A+DyMA,CP1RqE,CAAA,EAAA,mBAO1D,EAAA,QAEI,CAAA,EAAA,CAAA,eAII,CAAA,CAAA,CACnB,CAAC,AAED,SAAA,GAAsB,CAAA,SACb,EAAA,KAAA,EAAA,CAAgB,CAAC,CAAA,EAAO,aAAa,EAAI,CpDalD,Aa0HA,AjBtDA,A+DyMA,C3D7QA,Aa0HA,AjBtDA,A+DyMA,AP1RwD,CpDaxD,A2D6QA,A/DzMoD,AiBsDpD,Cb1HA,Aa0HA,A8CmJA,A/DzMqD,C+DyMrD,A9CnJA,Ab1HA,AoDbuD,UAAc,CAAC,CpDatE,A2D6QA,C3D7QA,A2D6QA,EAAA,AP1R0E,CAAC,AO0R3E,APzRA,ApDYA,C2D6QA,APzRC,ApDYD,AoDb4E,CO0Rb,A3D7Q/D,CAAA,CAAA,QoDUA,SAAS,CpDYT,AOoSA,AXnOA,AiCnCA,EuBzCE,C7C+SF,AXnOA,AIjEA,Aa6HA,CuCvIE,AvCuIF,AjB5D2B,AIjE3B,AOoSA,C6C9SE,iBAEiC,CAAA,IAAK,+BAG/B,IAAA,EAAQ,CAAC,ApDUlB,AOmSA,AXvMA,A+D+KA,CPrRoB,EAAA,EAAA,EAAA,EAAsB,CvCuI1C,Ab7HA,A6BiC2C,AJ4G3C,E2BtJsB,CAAA,EAAA,CAAA,GAGtB,CAAC,AAGD,SAAS,CvB2CT,EuB3C0B,CAAA,CAAA,CAAiC,KAGlD,EAAO,C1C6HhB,AiD6JA,A9B/OA,AtBsQA,AXvMA,AI1FA,UAAA,CoDhB4B,CxD0G5B,A6BgDA,AzB1IA,A6B2BA,AtBsQA,AoDvBA,AjD7JA,E0C7H+B,CAAA,kBAEvB,EAAiB,CAAC,GAAa,C1C6HvC,AGYA,A8CiJA,oBPxR4B,OAGR,aAAA,CAAA,GAAA,CAAkB,QAAQ,ClC4lB9C,AWjjBA,AnBiFA,CmBjFA,AXijBA,ARheA,CAAA,AQgeA,CRhe0C,AmBjF1C,AXijBA,CWjjBA,AXijBA,qBkC9lBwC,C1C4HxC,AmBlFA,CAAA,CAAA,IuB1CiD,CvB0CjD,AnBkFA,G0C5HqD,CvB0CrD,CAAA,AnBkFA,I0CnHS,aAAA,CAAA,GAAA,CAAA,GAIH,C7CkTD,AsBxQL,EAAA,KuBpFa,GA6Cb,CAAC,AAGD,SAAS,CSgKT,A/CxHA,AeCA,EAAA,CuBzC0C,CAAE,CAAA,KAGnC,EAAA,WAAkB,CAAA,GAAI,CAAC,CxD2GhC,AI3FA,A6DiJ+B,A/CxH/B,GsCxCE,CtCyCF,EsCzCS,CAAA,GAAA,IAEP,CtCwCF,GAAA,EAAA,EAAA,WAAA,CAAA,GAAA,CAAA,EsCvC4B,cACxB,C3BgKK,AXxHT,CAAA,WsCxCsB,CAAA,GAAA,CAAK,EAAA,EAAA,KAA4B,kBACd,ClCgoBzC,AJnlBA,A6C+OA,A/D9KA,IwD9G8C,CtC6CJ,AlBiE1C,A+D8KA,AP5R+C,CxD8G/C,AkBjE2C,mBsCzChB,C3BmK3B,AI5HA,AfKA,ADsGA,A8CyIA,AzC4WA,ckChsBoB,GAgEpB,CAAC,AAED,SAAS,GAAA,CAAiC,CxDgH1C,AcaA,AGqBA,AuClJ4C,CAAe,AvCkJ3D,AjBlCA,AcaA,CAAA,AGqBA,AjBlCA,AiBkCA,AHrBA,CGqBA,AjBlCA,CcaA,AdbA,AiBkCA,CAAA,AjBlCA,AcaA,CGqBoC,AjBlCpC,CwD/GQ,EAAA,EAAA,aAAA,CACN,IAAQ,COwRV,AjD3JA,AmBzFA,A7BJA,AamHA,wEuC1IA,CAAC,0DAM6B,CAAC,CAAC,EAAQ,COuRxC,A7CzOA,CAAA,A6CyOA,CAAA,A7CzOA,CAAA,C6CyOA,A7CzOA,AsC9C6C,CtC8C7C,A6CyOA,CPvR+C,AOuR/C,A7CzOA,CAAA,A6CyOA,CPvRiD,CACvB,AtC6C1B,A6CyOA,CAAA,A7CzOA,CAAA,A6CyOA,C7CzOA,CAAA,A6CyOA,CPhRE,AOgRF,A7CzOA,CD2GA,A8C8HA,CPhRS,AtCuCT,A6CyOA,CAAA,A7CzOA,C6CyOA,A7CzOA,C6CyOA,A7CzOA,C6CyOA,C7CzOA,CAAA,A6CyOA,CAAA,A7CzOA,C6CyOA,A7CzOA,C6CyOA,A7CzOA,C6CyOA,APhRS,AtCuCT,C6CyOA,CAAA,A7CzOA,CAAA,AsCnCE,CtCmCF,A6CyOA,CAAA,A7CzOA,CsCnCE,OAAA,EAAA,aAAA,CACF,CAAC,AAED,SAAA,GAAA,CAAA,CAAuC,ClCsqBvC,AyClZA,A/DnKA,AcUA,AegDA,AkCyGA,CAAA,ApD+BA,AXlMA,A6B0DA,AP2fA,AR3iBA,CQ2iBA,AkCrqBE,A1C0HF,AegDA,A7B1DA,A+DmKA,ApD+BA,CkBxIA,AkCyGA,ApD+BA,AXlMA,AcUA,AQ2iB2B,CkCrqBnB,CtC6CR,AeZA,MAAA,CuBjCgB,MAAA,CAAA,GACd,EAAO,WAAW,CAAC,MAAA,CAAO,kGE/ToB,CpDnBhD,AuCkKA,Aa/IiD,ATnBjD,A1CDA,AsBgCA,AarBA,A5ByEA,CepDA,AvB/BA,ACDA,AOoFA,A4BzEA,AGwJA,0FarI+B,2CAEL,EAAA,gFAcE,C1D0C5B,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,A0D1CsC,C1D0CtC,A0D1CuC,C1D0CvC,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,uEmE5DiD,2BAAA,CAAW,CACzD,CAAC,oFAwGqD,C3D1CzD,A2D2CE,E3D3CF,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,M2D2CiB,CACf,WAAS,CACT,KAAK,CAAE,EAAc,CAAW,CAAA,CAC8B,MAD5C,AACkD,CAAC,MAAM,CAAC,IAAI,CAAC,yJAa/C,KAAA,gCAKxB,GAAA,CAAA,EAAA,EAAA,IAAA,GAAA,6GASqB,CnBtE6B,A5Cb9D,A6BOA,CeMA,C5CbA,A6BOA,mEkCyF8B,EAAA,KAAA,8EAiCX,CAAA,iZAeN,MAAA,CAAA,2BAC0B,CAAC,CnBrExC,AnB+GA,AlBsJA,AoDLA,A/DvMA,A4CxBA,A9BgCA,AI9DA,IAAA,WiDmEE,CAAC,wCAIC,CFwEC,AdhJL,ALjCA,AbmDA,CgC8HM,AnBjLN,AqBiBY,AhBgBZ,ClBkBA,AkBlBA,ALjCA,IAAA,EAAA,KAAA,CAAA,KAAA,EAAA,KAAA,CAAA,KqByGwD,C/DpFxD,A6B8BA,A8BgPA,ApDKA,CoDLA,ApDKA,APnRA,C6B8BA,A8BgPA,ApDKA,APnRA,C6B8BA,A8BgPA,A3D9QA,C2D8QA,A9BhPA,AtBqPA,CAAA,AsBrPA,A8BgPA,A3D9QA,C6B8BA,AtBqPA,AoDLA,A3D9QA,CAAA,A2D8QA,ApDKA,CPnRA,A+DoFwE,AJ0LxE,ApDKA,AsBrPA,CAAA,A8BgPA,AI1LyE,A/DpFzE,AOmRA,CPnRA,A2D8QA,AI1L0E,C/DpF1E,A6B8BA,AkCsD2E,AxD+L3E,CAAA,APnRA,A2D8QA,A9BhPA,+I6C9KqD,CAAC,CAAC,CAHvD,AxDUA,CAAA,AwDVA,AAGkE,CxDOlE,AwDVA,AxDUA,AwDVA,CAAA,AxDUA,AwDVA,CAAA,AxDUA,CAAA,AwDVA,CAAA,AxDUA,CAAA,AwDVA,CAIO,AxDMP,AwDVA,CAAA,AxDgBO,AADsB,AwDZoC,CxDOjE,AwDVA,CxDUA,AwDVA,CAIW,AxDMX,CwDNY,CxDMZ,AwDVA,CxDUA,AwDVA,CAAA,AxDUA,CwDVA,AxDUA,CAAA,CwDVA,AxDUA,CAAA,AwDVA,CxDUA,yMkBmDuB,uBAAA,KAAA,EAAA,EAAA,KAAA,CAAA,KACM,CAAC,UAAU,CAAA,QAAA,CAAS,COKjD,A5BxBA,AXsDA,CWtDA,A4BwBA,APLA,AhCmCA,EAAA,KAAA,CAAA,KAAA,GAAA,EAAA,IAAA,CgClC2C,CIe3C,AGN4C,ADvB5C,A5B2BA,AsBbA,AvBqFA,IAAA,CAAA,gKuBpE0B,SAAA,CAAA,GAAA,EAAA,qBAOxB,wHtCrFC,CAAA,EAAA,oK+D4RqC,CfhFxC,ArBgCkD,AmB1FlD,A5CfA,AcoBA,A+CkIA,AnDrEA,CAAA,IAAA,EAAA,GAAA,CmDqEA,sFAqBuC,CtDuHvC,AsBrPA,AfVA,AW+GA,AoCyBA,A7D5JA,AwCiDA,AmB6NA,GEjFS,CAAT,MAAgB,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,wNS5TE,2IAOT,cAAA,CAAA,EAAA,aAAA,4JT0VT,CpBgIA,AhB/IA,AfpCA,AiDoKA,A3D9QA,A+CYA,AHUwB,oBiB0KxB,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,4BAMuC,CAAA,EAAA,EAAA,IAuBvC,OACgB,GAAG,ChDlBnB,AgDkBA,AhCtHA,AtByQA,CAAA,qDsD9I0C,C7DhJ1C,A6DgJA,ApCDA,A7BpDqC,CI3FrC,A6DgJA,ApCDA,Af/BA,CmDgCA,ApCDA,Af/BA,AVhHA,C6DgJ8C,EAAA,IAAA,YAGV,CAAA,CAAA,gCACQ,C/CxH5C,AdzBA,A6DiJA,AnDhCA,2BmDiC0D,CAAC,CpCA3D,AzBjJA,A6DiJA,CAAA,WAGiC,SAAjC,C/CzHA,AJwFA,AmDiC8C,CnDjC9C,AIxFA,A+CyH+C,C/CzH/C,AJwFA,AVvFA,CcDA,AJwFA,CAAA,AIxFA,MdCA,CAAA,C6DqII,C7DpIJ,AU+FA,Ae2CA,AoCRA,AThKsB,A3BwKtB,CoCRA,ApCQA,AzB1IgD,A2D2PhD,AEzHA,CFyHA,AlCjHA,A7BzDA,AiEqDI,AAJJ,AnDnCA,AiD4JA,AlCjHA,Af3CA,CV7FA,A6DoIA,KAAU,EAAA,IAOC,CAAX,GAAA,MAYA,qFd9aqC,OAAA,uGAgDoB,CrCyEzD,Ae2BA,AlBsKA,APzQA,AcYA,AiChBA,AlBkBA,C7BdA,CAAA,0B+CEU,GACF,2CAMS,CAAjB,GAAA,2NAyBmC,CAAC,CnDqDpC,AmDtDA,AjCWA,ClB2CA,AI9DA,A+CQA,AlBYA,AfDA,ClB2CA,AmDtDA,A/CRA,A6BoBA,AfDA,CdnBA,A+CQA,AnDsDA,AiC1CA,AfDA,CAAA,AlB2CA,AiC1CA,A7BpBA,A+CQA,CAAA,AlBYA,AjC0CA,AI9DA,KJ8DA,CAAA,IAAA,CAAA,ImDrDyD,CAAC,A/CT1D,AJ8DA,CI9DA,AJ8DA,cmDnDyB,CNkLzB,AD5IA,AEpEA,AbwCA,AnB6DA,AqDI8B,AjDlE9B,AgCqDA,A9CxEA,A+CUA,mHAUoD,CYkQpD,AlChJA,AI3GA,AfAA,AlBqDA,A4CvBA,A9BgCA,AkCjEA,qDGKyB,CAAA,gEAiCf,EAAsB,IAAA,CAAA,WAAA,CAAA,mCAK9B,CAiBF,OACS,CNkRT,AMlRA,AlB0BA,AYwPA,AGnQA,CHmQA,uFMzQiB,CHWjB,AiBuIA,AdlJA,A/CXA,AUyGA,SqC3Fc,CAAd,AgBnDiB,AJqTjB,AjDtKA,AkCnFA,GGTkB,CNiRlB,AkBfA,AjDtKA,AkCnFA,OGPA,C/CZA,A6D6JA,AhCzHA,AkBxBO,CAEL,CAMS,IAAA,MAMX,4cd/Na,GAAA,SAAA,CAAA,CAAA,CAAA,mGAeF,MAoBJ,GAAA,SAAA,CAAA,CAAA,CAAA,2CAY2B,CAAA,8JyBrBG,C1DiCrC,A6BOA,C7BPA,Q0DZA,SAAA,GAAA,CAAA,CAAA,CAAA,4BAEI,IAAA,EAAA,OAAA,cAAA,CAAA,sEAQiB,IAAA,OAAA,iFAQW,GAAA,CAAA,IAAkB,+DAO1B,CAAA,sDAkBT,CdgDf,AFnCA,AiBmSA,AlChJA,AiChKgB,A1DgChB,AIwDA,ASyDA,AgD6CA,AhC9HA,CX+iBa,AwBlmBb,AbmDA,AjC2CA,AQnBA,AwCxCA,A/BiGA,AYeA,AzBhIA,A2DgRA,AElHA,KjEnFA,CAAA,CAAA,EAAA,EAAA,EAAA,8PkD7FY,GAAA,EAAA,OAAA,EAAA,4BAAA,IAAA,CAAA,sKAiEZ,2HAaI,CMtFC,AvBkCL,AjCoDA,AkDAA,GAAQ,CAAC,IAAA,CAAA,wEAGsD,ChCrD/D,AdpBA,A8CyEgE,ApCQhE,wBF5HS,EAAA,GAAA,CAAA,GAAA,EAAA,OAAA,EAAA,4BAAA,IAA+D,CAAA,iDA4C7D,GAAA,EAAA,uOoFzGE,WAAA,ka7BZL,GAAA,IAAA,CAAA,iNA4BoC,ChDO5C,AckCA,Aa1BA,ANcA,AvB0FA,AbrFA,AJ+CA,AmEjF6C,ChDO7C,Af2BA,A0CnBA,A9CkEgD,AgE+IA,AxBnMhD,AvB0FA,AgB9EA,kIkCxB2C,GAAA,EAAA,OAAA,iXAoCF,CAAC,iUAuBjB,CAAA,EAAA,GAAA,CAAA,CAAA,EAAA,+EASrB,IAAK,C7CinBT,AsBhhBA,A9BkCA,AG2BA,qFkD3J4B,C7CwnB5B,AkChmB6B,AvB6C7B,AnB+DA,AG2BA,A+C4EyB,GRnNI,CAAA,mBWyB7B,SAAS,CAAA,CAAA,CAAA,mBACgC,CJoTzC,A/D1MA,AkBpCA,AeGA,CjCiCA,A+D0MA,A7C9OA,IiDtE+C,QACtC,GAAA,GAAA,EACA,C/DqCT,AyC8RA,AGtQA,AnBuHY,MAAA,CAAA,EsCpLa,KAAA,CACzB,SArBE,CnBgEF,KAAA,CAAA,CmB/DA,CAAC,0BAED,SAAA,GAA6C,CtBkU7C,AMlRA,AYsQA,A9B5OA,AeXA,SmB5DS,OAAA,IAAA,CAAA,GAAA,MAAA,CAAA,GAAsC,CtBwU/C,A/BtLA,AeqCA,AkCiIA,AfzPA,A9BcA,AlBkCA,C6BwEA,AsCtLA,AnB8DA,AHyQA,A/BtLA,AiDsKA,A/DzMA,AW6NA,AO/PA,CiD5EC,AACD,AxD0UA,AG1LA,AdnCA,A6CyNA,AsBxUkD,AtCuLlD,AX1GA,CJqEA,AkCnFA,A9BcA,AP+PA,AX7NA,A6CyNgE,AsBxUb,AJwTnD,AlCjIA,CsCvLoD,ArDkJpD,AeqCA,AX1GA,A2B2PiE,AkBhBjE,AfzPA,ArC6QA,AX7NA,CW6NA,AqC7QA,AlCmFA,AiDsKA,A7C3OA,A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AtBCA,AKGA,AuBA+D,CtBF/D,AmDIQ,AZDR,AvBLA,AtBCA,ADMA,AmCNA,ClCAA,AKGA,AwCCA,AXJA,AxBOiE,AJNjE,APKA,C2DRkE,A3DQlE,A8CFA,AXJA,A7BGA,ACFA,ANDA,AUOA,CAAA,AVPA,ADMA,A8CFmE,AaNA,ApDGnE,A4BDA,oImB2BiB,oKrDhB0C,EAAA,MAAA,2FAKQ,C+C0BnE,gK/CfQ,CAFR,A2CkCA,AbvCA,ArBiBA,AqDiRA,Af1PA,AfGA,AhBoEwD,A4B2DxD,C5ClKQ,EACA,6HAca,IAAA,8G+B/BP,CAFd,AhC8DA,A6BVA,AhBtDA,ACsFA,OkBlFsB,CAAC,ChC4DvB,AcsBA,AehCA,AGpDA,GAE2B,CHkD3B,AfgCA,AqD1E6E,AnCPnE,EAAI,CAHd,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAGuC,CAC9B,IAKT,C+B+PA,AOzOC,AhDgkBD,2HlBtRA,CAAA,CAAA,CAAA,MAAA,GAAA,CAAA,MACQ,C6DkIQ,A7DlIhB,AyB0IA,CAAA,IAAA,sBzBvIgB,CcahB,AeRA,A7BNA,AyByIA,AkCiHA,mF3DxOE,CACF,uFsB9ViD,yQEyCE,CxBsBnD,AIoCA,AS+CA,A6BnGA,A9CoEA,AiCzCA,CvB1BA,ANeA,AIoCA,AwCtBA,AfHA,AjCyCA,C8CpEA,AE8BA,AfHA,AjCyCA,AIpDA,AIoCA,AEnDA,CAAA,AVmEA,A8CpEA,A1CgByD,A6BWzD,AzByBA,AwCtBA,CxCsBA,AwCtBA,AfHA,A7BX0D,AMf1D,AVmEA,oD4B/DE,C4DPC,A1BAE,AjCoIL,AzBpGA,AyCwLA,AjBjNA,EAAA,+ZmBaQ,CvC4BR,AuC9BA,CAAA,AvC8BA,CAAA,AuC9BA,CvC8BA,AuC9BA,CAAA,AvC8BA,CAAA,AuC9BA,CvC8BA,AuC9BA,CvC8BA,AuC9BA,CAAA,AvC8BA,CAAA,AuC9BA,CAAA,wBAKA,yOmBrDqE,CACnE,CAA8B,CCVV,iBHGgB,CAAC,0FE2CZ,yCAAA,MAAA,CAAA,4LA2BiB,OAG/B,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAIC,CAAY,CAAC,CAAC,CAAC,CACf,CAAY,CAAC,CAAC,APtBkB,CAAC,AOsBlB,CACf,OAAO,CACR,EACD,CAAC,8JAsB8D,ClBK3E,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,mDkBkBA,CAEA,AAFC,SAED,GAAA,CAAA,oCAEA,CAAC,4avDsID,OAAA,6SAiEgC,GAAA,MAAA,CAAU,aAAA,sCAK/B,CAAA,iBAAA,EAAA,EAAA,SAAA,CAAA,EAAA,KACgD,CAAC,CAH5D,CAAA,0IAgB+C,CAAC,IAAI,CAAC,CiCpPrD,ApCmBA,AuDuOA,Af/PA,ArCyPA,CqCzPA,Ae+PA,AnB1PA,AjCoPA,AHjOA,CoCnBA,AILA,AmBhCsD,AJ+RtD,AvDvOA,AGiOA,CAAA,kBACsB,IAAA,CAAA,UAAe,CAAC,IAAA,CAAA,IAAS,KAErC,CAAA,WAAA,CAAA,YAAA,EAAA,aAAA,CAAA,CAC8D,CAAA,CAAE,CAAA,CAAA,EACrD,cAAc,wDAO5B,CAFP,CAAA,AAGQ,CAHR,CAAA,CAAA,CAAA,CAAA,CAAA,CAGe,oSA0BwC,CqCnQvD,A1B+jBA,AX5TA,AiCxOA,ApCUA,AUlCA,CPgQA,AiCxOA,ApCUA,Ac0hBA,AJ5jBqD,A8BHrD,C1B+jBA,AX5TA,AH9NA,AoCVA,CI3BA,AxCqCA,AUlCuD,AI4jBvD,AsBpiBA,AjCwOA,CAA4D,CqDxEH,ApBhKzD,ApCUA,Ac0hBA,8OXrSkC,aAAA,uBAInB,IAAA,CAAA,OAAA,CAAA,QAAA,2DAO8B,CAAA,KAAA,CAAA,CAAA,CAAA,+CAQJ,2GAY/B,GAAA,CAAA,SAAA,CAAA,CAAA,kBAAA,CAAA,CAAA,CAAA,YAGQ,COhQlB,AWyGe,AkCoIf,AyB5SqB,AlEwnBrB,ARtfA,AH6LA,AMlKA,CAAA,IAAA,CAAA,YAAA,CAAA,eAAA,CAAA,KNmKgC,CkCxFhC,AlCwFA,AoDfA,Af1PA,AlC6EA,GAAA,CAAA,YAAA,CAAA,WAAA,uBH6LA,CAAA,kCAGA,CACkE,GAAA,EAAA,EAAA,EACL,CAA7D,AqDzFwD,Ab5LxD,A/CPA,A6BgCA,CAAA,AkBzBA,Aa4LyD,ArDyFzD,AP5RA,CAAA,GAAA,EAAA,EAAA,QO+R0D,CG9L1D,AiD+KA,ApDeA,CAAA,AsB7PA,AnB+DA,AiD+KA,CpDeA,AG9LA,AmB/DA,CtB6PA,AG9LA,AmB/DA,A8B8OA,C9B9OA,AtB6PA,AoDfA,AjD/KA,CH8LA,AsB7PA,AnB+DA,AiD+KA,CAAA,ApDeA,AsB7PA,AnB+DA,CmB/DA,AtB6PA,AoDfA,CAAA,A9B9OA,AtB6PmE,AG9LnE,CAAA,AmB/DA,A8B8OA,ApDeoE,CoDfpE,A9B9OA,4DtBqQ8B,EAAA,CAAQ,CmChTtC,AnCgTuC,AkBrJvC,Af3CA,AQsfiC,AL3djC,C6B3IA,AjB2JA,A7BhEA,AcqBA,AQsfkC,AL3dlC,wBN8KY,CAAZ,AkCpCA,A3B1NA,A4B9CA,AE6BA,AfgBA,A8B8OA,A3D9QA,yCO+RA,oCAOoC,CAAA,QAC3B,CqC3QT,A5CxBA,AOmSA,QAAA,CAAA,EAAA,SAAA,CAAA,IAA8C,CAAA,gDAKpB,KAAA,yEAwChB,OAAA,UAAA,CAAkB,AAGnB,CAAA,cAAA,6BAO4B,CAAA,CAAA,CAAS,CAA9C,CAAA,CAAA,gCACmC,CAAnC,APpSA,GAAA,COoS+C,CPpS/C,AOqSM,CPrSN,A6BmCS,AtBkQT,APpSA,KAAA,IAAA,CAAA,KAAA,+EO4SI,CAAA,CAAA,CAEA,CsBpQJ,AhB4FA,ANwKA,GAAA,EAAA,IAAA,CAAA,YAAA,CAAA,qBAAA,CAAA,cAAA,GAG8B,CkBvJ9B,AI9GA,AtBqQA,CkBvJ4B,AlBuJ5B,EAAkC,CAAA,OAAQ,CAAA,WAAA,cAGvB,IAAA,CAAA,YAAA,UAIN,OAAA,CAAA,iBAAA,EAA6B,CGrL1C,AdlBA,AWsMA,CPhSA,AJ0FA,AWsMA,AGpLA,AHqL+C,CPjS/C,AJ0FA,AWsMA,OAC+C,CAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,4JAYsB,wBAKjE,OAAA,qGAUO,2DAIc,EAAc,CXpMvC,AiBoCA,AYiBA,APieA,AXlVA,CXpMA,AiBoCA,AYiBA,APieA,AXlVA,CXpMA,AiBoCA,AYiBA,APieA,AXlVA,CWkVA,AOjeA,A7BrDA,AiBoCA,ANgKA,GAAA,MAEW,iBACI,qBAKb,CPjRF,sBOoRU,CAAA,UAAA,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA,IAAA,CAAA,OAAA,cAGA,EAAA,YAAA,GAAA,aAAA,GAAA,IAAA,CAAA,oBAAA,IAMH,CoD5BP,AlChHA,APqeA,AkC7oB4B,ApDkC5B,AOiRA,AXnMA,CwDhH6B,AlC6oB7B,AyCrXA,ApD2BA,APjRA,AyBsIA,A7BxDA,CI9EA,OOkRsB,CADtB,AkB3IA,AzBtIA,COkR6B,CoD5B7B,ApD2BA,qCACmE,EADnE,CAAA,CAEO,CAAP,AWyVA,ARjhBA,AI7EA,CPqQA,AGxLA,AQihBA,AyCrXA,A9BpPA,AfWA,EAAA,CPqQY,CPlRZ,AkB2mBA,AOreA,AXzHe,AJ6Ef,AiD4JA,ApD4BA,mBAAA,gBAGU,CAAC,CWgWX,AJtmBA,AWyHA,AlB6IA,AsBjRA,A8BoPA,AjD3JA,CAAA,AI9EA,AeXA,A8BoPA,AlChHA,AP6ee,AXhWf,kBAAA,4HAasD,CAAA,SACrC,CAAjB,AsBjRA,AJuIA,Af7CA,AiDwJA,A/DrKA,CAAA,A+DqKA,A9BlPA,AnB0FA,AHuLA,AkB1IA,Cf7CoB,AdbpB,A+DqKA,A9BlPA,AtBiRA,aAAA,EAAA,EAAA,kBAAA,AAA4D,oBAUjC,CAAA,6CAOoB,CAAA,OAAA,CAAS,CXjMxD,AWiMA,CAAA,AXjMA,CAAA,AWiMA,CXjMA,AWiMA,IAAgE,CXjMhE,AWiMA,CXjMA,AWiMkE,EXjMlE,AWoMU,AAAC,CXpMX,CAAA,AWoMW,CXpMX,EAAA,CAAA,CAAA,EAAA,CAAA,AWoMW,CXpMX,CAAA,CAAA,0BWoNU,CoDvBV,AlCpGA,CAAA,AkCoGA,6CpDgCU,EAAA,IAAA,AAdV,CAcU,YAAA,CAAA,KAAA,CAAA,KAAA,CAAA,QAED,oBAAA,CAAA,OAAA,MAAA,CAAA,oCAE2B,CG/JpC,AH+JA,AXlM6B,A+D6K7B,AzCwbA,CXnaA,AG/JA,AiD0IA,AzCwbA,GXjaM,CsB7QN,AtB6QO,CAAA,uBAKG,CAAV,CAAA,CAAA,aAAA,uBAEU,CAAA,OAAA,CAAA,CAAA,CAAA,IAAA,CAAA,OAAkC,CAAA,QAAA,sHAS5C,UAUkB,CXnMlB,AiC/EA,AtBkRA,AGnJA,MHoJc,CXnMd,A+D+KA,A9B9PA,AJwJA,AlB0HA,CAAA,AXnMA,AiC/EA,AJwJA,EAAA,ClB0HmB,CGnJnB,AiD+HA,A/D/KA,AiC/EA,AtBkRA,AkB1HA,CkCsGA,A9B9PA,AnB+HA,AeyBA,AlB0HA,cAAA,EAAA,SAEmB,CAAC,gBAAgB,CAAA,kGA6B9B,aAAA,gHAyBkD,COnRxD,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,6BPsRqC,CAAA,uBAArC,EAAyE,CAAC,AOnR1E,CAAA,APsRI,CX7KJ,AW6KA,CX7KA,AW6KA,CX7KA,AW6KA,CAAA,CAAA,UAAA,CAAA,KAAA,MACe,CAAA,UAAA,CAAA,EAAA,oBACuB,CkBtHtC,AlBsHA,CkBtHA,AfbA,AHmIA,CkBtHA,AfbA,AHmIA,CkBtHA,AlBsHA,CkBtHA,AfbA,AHmIA,CGnIA,AHmIA,AkBtHA,CAAA,AlBuHA,CAAK,CAAC,CAiBG,CAAT,CAAA,CAAA,OAGI,CAAA,MAAA,CAAA,CAAA,UAAA,CAAA,CAAA,QAAA,CAGO,aACP,CO1SJ,APmSA,AAOe,CO1SkB,APmSjC,YAQI,CAAW,AARf,CAcG,AAdH,CAAA,CAAA,AAeI,CAAJ,AAfA,CAeA,AAfA,CAeA,AAfA,CAAA,CAAA,CAAA,WAeA,IAAA,CAAA,OAAA,CAAA,WAAA,CAAA,GAAA,GAAA,IAAA,CAAA,KAAA,CAAA,0BAMS,GACD,IAAA,CAAA,OAAY,CoDlDpB,AjD5GA,AeWA,AlBoJQ,CG/JR,AeWA,AkCiGA,kBpDiDA,EAGQ,CkBrJR,AfXA,CeWkE,AfXlE,CeWmE,CfXnE,CAAA,CAAA,CAAA,EAAA,sCHsK0B,EAAA,IAEb,IAAA,CAAA,SAAA,kGAU8D,AAC3E,CsBpTA,Af8BA,APsR0D,COtR1D,Ae9BA,AtBsTI,EAAA,KAAA,CAAwB,COvR5B,Ae9BA,AnBuJA,AH8JA,GAAA,CAAiC,CsBrTjC,AnBuJA,AH8JA,CG9JA,AH8JA,AsBrTA,CtBqTA,AG9JA,AmBvJA,CnBuJA,AH8JA,AsBrTA,atBqTA,CAAA,EAAA,KAAwE,CAAC,gBAQnE,CWubN,AW5uBA,Af8BA,APuRA,COvRA,APuRA,AOvRA,Ae9BA,AX4uBA,CAAA,AXvbA,AOvRA,GAAA,CAAA,iBPwR8B,CAAA,IAAA,CAAM,CAApC,AOvRA,Ae9BA,CAAA,AtBqTA,AOvRA,Ce9BA,AtBqTA,AOvRyE,Ce9BzE,AtBqTA,CAAA,AsBrTA,Af8B2E,CPuR3E,AsBrTA,Af8BA,CPuR2C,CAAC,CsBrT5C,AtBqTA,CsBrTA,AtBqTA,CAAA,CsBrTA,AtBqTA,CAAA,EACQ,EAAA,KAAA,UAIE,EAAA,aAAA,IAAA,CAAA,OAAA,CAAA,WAAA,kEAUJ,CsB5TN,AJuK+D,AlBoJ/D,CkBpJgE,AIvKhE,AtB2TA,SAC6B,CACxB,AkBtJL,CAAA,CAAA,CACsB,EAAE,CADxB,EAAA,kClB0Jc,YAEd,CoDhEA,ApDgEO,CAAA,CACC,CoDjER,ApDgEA,CGjKA,AiDiGA,ApDgEA,SAAA,CsB3TA,AnB0JA,AiDiGA,ApDgEA,CAAA,AoDhEA,ApDiEsD,CGlKtD,AHiKA,AoDhEA,A9B3PA,A8B2PA,ApDkEK,CsB7TL,CAAA,A8B2PA,C9B3PA,A8B2PA,E9B3PA,A8B2PA,yBpDoEkB,EAAA,EAA+B,SAAA,EAAA,IAAA,CAAA,iBAcnC,CAAA,YAAA,CAAc,KAAA,CAAM,CO7RlC,A6CgOA,ApD6DA,IAAuC,CAAC,CAC5B,AO9RZ,CP8RA,AO7RA,AJsImB,AeYnB,CXlJA,AWkJA,AfZoB,AHuJpB,AO9RA,CACA,AWkJA,AlB2IA,AO9RA,CAAA,CAAA,CAAA,CP8RoB,AAAC,CO7RrB,AWkJA,AlB2IA,AO9RA,CACA,AP6RA,AkB3IA,AXnJA,CP8RA,AO7RA,AWqJwB,AXtJxB,CP+RkB,AO/RlB,CAAA,CPgSgB,AOhShB,CAGA,A6CiOA,ApD4DA,CoD5DA,A7CjOA,AP6RA,AAAsB,AOhStB,CPgSA,AoD5DA,A7CjOA,A6CiOA,ApD4DA,AOhSA,CPgSA,AO7RA,A6CiOA,A7CjOA,A6CiOA,ApD4DA,AOhSA,CAAA,A6CoOA,ApD4DqB,AoD5DrB,ApD4DA,CoD5DA,A7CjOA,AP6RA,AOhSA,CAAA,APgSA,AoD5DA,A7CjOA,CAHA,APgSA,AoD5DA,A7CjOA,C6CiOA,A7CjOA,AP6RA,AOhSA,CAGA,A6CiOA,ApD4DA,AOhSA,CAGA,AAHA,A6CoOA,ApD4DA,CoD5DA,A7CjOA,AP6RA,AOhSA,CPgSA,AOhSA,CPiSkB,AOjSlB,CAGA,A6CiOA,C7CjOA,A6CiO4C,KpD8DjB,CkBxI3B,AXtJA,A6CiOA,ApD6DA,CkBxIA,AXtJA,AP8RA,AoD7DA,C7CjOA,A6CiOA,AlC3EA,AlBwIA,CAAA,CAAA,KAAA,eACmC,CAAA,SAAA,oBACI,CAAvC,CACoB,AADpB,CAAA,AACA,AGpJA,CHmJ2C,AGnJ3C,AHoJA,CAAA,QAAA,CAAA,GAEkB,GAAA,EAAA,EAAA,iBAEqB,CAAvC,CAAuD,AAAvD,CAAA,CAAA,CAAA,CAAkE,AAAlE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAsD,EACrB,CAAjC,AoDrDA,A7C5OA,AIgtBA,CyCpeA,A7C5OA,AIgtBA,AX/aA,AAAiD,COjSjD,APiSA,AW+aA,AJhtBA,APiSA,AoDrDA,CpDqDA,AW+aA,AX/aA,AW+aA,AyCpeA,A7C5OA,CIgtBA,AyCpeA,A7C5OA,APiSA,AW+aA,AJhtBA,APiSA,CAAA,AOjSA,APiSA,AW+aA,AJhtBA,AIgtBA,AyCpeA,CAAA,AzCoeA,AX/aA,AW+aA,AJhtBA,CPiSA,AW+aA,AJhtBA,CPiSA,AW+aA,AJhtBA,CPiSA,AW+aA,CX/awE,COjSxE,AIgtBA,CAAA,AJhtBA,CAAA,AIgtBA,cXtaiC,yBAEJ,CAA7B,CAAA,AAA6C,CAA7C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,AAAsD,CACpC,KAAM,CkB7HxB,AlB6HA,CkB7HA,AlB6HA,AkB7HA,CAAA,AlB6HA,CkB7HA,AlB6HA,CkB7HA,AlB6HA,CkB7HA,AlB6HA,AkB7HA,CAAA,AlB6HA,CAAA,AkB7HA,ClB6HA,AkB7HA,CAAA,AlB6HA,CAAA,AkB7HA,clBkI6B,gBACO,CO9RpC,A6CyPA,ApDqCA,AkB5HA,CXlKA,A6CyPA,ApDqCA,AkB5HA,ClB4HA,AkB5HA,AXlKA,A6CyPA,CpDqCA,QAGY,oBAiBsB,CO3RlC,AP2RA,CO3RA,AP2RA,CAAA,AO3RA,CP2RA,AO3RA,CP2RA,AO3RA,CP2RA,AO3RA,CP2RA,AO3RA,CAAA,AP2RA,CO3RA,AP2RA,CO3RA,AP2RA,CO3RA,AP2RA,CAAA,AO3RA,CAAA,AP2RA,CAAA,AO3RA,CP2RA,AO3RA,CAAA,KP4RuB,EAAa,EAAW,CO3RE,AP2RjD,AGnIA,CAAA,AHmIA,EAAsE,CO3RtE,AJwJA,AHmIwE,CGnIxE,AIxJA,CAAA,AJwJA,CIxJA,AJwJA,CIxJA,AJwJA,CIxJA,AJwJA,CIxJA,AJwJA,CAAA,AIxJ6D,CJwJc,AIvJpE,CJuJqE,yCHwIjD,COzR3B,A6CsQA,C7CtQA,A6CsQA,CAAA,CAAA,A7CtQA,C6CsQA,A7CtQA,C6CsQA,A7CtQA,C6CsQA,C7CtQA,CAAA,A6CsQA,C7CtQA,A6CsQA,CAAA,A7CtQA,C6CsQA,A7CtQA,C6CsQA,A7CtQA,CAAA,A6CsQA,CAAA,A7CtQA,CAAA,A6CsQA,CAAA,A7CtQA,C6CsQA,C7CtQA,C6CsQA,A7CtQA,C6CsQA,CAAA,A7CtQA,C6CsQA,A7CtQA,CAAA,A6CsQA,CAAA,A7CtQA,C6CsQA,A7CtQA,C6CsQA,C7CtQA,CAAA,A6CsQA,C7CtQA,A6CsQA,C7CtQA,A6CsQA,CAAA,CAAA,A7CtQA,C6CsQA,A7CtQA,C6CsQA,A7CtQA,CAAA,C6CsQA,A7CtQA,C6CsQA,A7CtQA,AP6R2C,KAAA,mEAK0B,CADrE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAC+E,kBAG/E,4CAOQ,OAOgB,CAAC,KAEb,CACE,KAAA,CAHuB,GAIvB,CGhId,AI/IA,AP+QA,AkB3FA,CAAA,AlB2FA,AGhIA,AI/IA,CP+QA,AkB3FA,AXpLA,AJ+IA,CHgIA,AO/QA,AWoLA,GAAA,mBlB4Fc,CGhId,AHgIA,AWkcA,AJjtBA,AWoLA,CP6hBA,ARlkBA,AI/IA,AP+QA,AkB3FA,IlB2FqB,CAArB,GAEY,CAAE,CGjId,AI/IA,AIitBA,AXlcA,UAAA,CAAA,CAAA,AGhIA,AHiI8C,CGjI9C,AHgIA,AWkcA,ARlkBA,AHkIW,AOjRX,AWoLA,CAAA,AfrCA,AQkkBA,ARlkBA,AI/IA,CJ+IA,AQkkBA,AO7hBA,AXpLA,AP+QA,CkB3FA,AP6hBA,AXlcA,AAcA,CO7RA,AJ+IA,AQkkBA,AO7hBA,AlB2FA,CWkcA,AJjtBA,AWoLA,AlB2FA,AGhIA,CAAA,AQkkBA,AJjtBA,AWoLA,AlB2FA,CkB3FA,AXpLA,AIitBA,AXlcA,CkB3FA,AfrCA,AI/IA,AIitBA,AXlcA,CWkcA,AO7hBA,AlB2FA,AO/QA,AJ+IA,UH8IA,CAUK,CW4bL,AXpdA,AGlGA,CHkGA,AGhIA,CAAA,KH0JyB,CW2bzB,AyCxcA,AjD9GA,AI9JA,APyRA,CW2bA,ARtjBA,AiD8GA,A7C5QA,APyRA,EAAA,CAA8B,YAAA,CACvB,wBAAA,CAAyB,OACjB,EAAQ,CGtHvB,AQijBA,AyCxcA,A7C5QA,APyRA,CW2bA,AyCxcA,A7C5QA,APyRA,AGtHA,CAA8B,AQijB9B,AyCxcA,A7C5QA,APyRA,KAAA,CACQ,CoDbR,ApDaA,AGlHA,SHkHmB,EAAQ,CkBtG3B,AkCyFA,ApDaA,CAAA,AoDbA,AlCzFA,CkCyFA,AlCzFA,AlBsGA,CAAA,AoDbA,AlCzFA,CAAA,AkCyFA,ApDaA,CoDbA,AlCzFA,AlBsGA,CkBtGA,AkCyFA,ApDaA,CkBtGA,AkCyFA,ApDaA,CAAoC,CkBtGpC,AlBuGQ,AoDdR,CAAA,AACA,ApDaA,AGlHA,CHkHA,MAAiB,EAAQ,OACzB,AADyB,CAClB,AGlHP,AItKA,EPwRO,SACS,CAAC,CACT,AGnHR,CHmHA,AW+gBA,AJ5yBA,IP6RA,IACU,COxRV,APwRA,COxRA,APwRA,CAAgB,COxRhB,YAAA,CPwR6B,COxRG,QPwRD,CAA/B,CAAA,CAAA,AAA2C,CAA3C,CACgB,AADhB,CAAA,CAAA,CAAA,CAAA,CAAkD,EAChC,CAAlB,CAAA,CAAA,OAEqB,YACrB,EACc,CoDfd,ApDeA,AO/RA,CP+RsB,AAAtB,AoDfA,A7ChRyB,C6CgRzB,ApDeA,AoDfA,ApDeA,CoDfA,ApDeA,CAAA,AAEc,AoDjBd,ApDeA,CoDfA,ApDeA,AoDfA,ApDeA,AOzRA,AP2RA,CoDjBA,ApDeqB,AAAM,AoDf3B,ApDiBwB,CAFI,AoDf5B,AlClFA,AlBmGA,CoDjBA,EAAA,CpDiBA,AoDjBA,CAAA,ApDiBA,CoDjBA,EAAA,ApDiBsE,CoDjBtE,ApDiBA,AkBnGA,CkCkFA,ApDiBA,CoDjBA,CAAA,ApDuBc,CAAd,AoDvBA,C7CrQA,AP4RA,AoDvBA,CpDwBY,AoDxBZ,CAaA,A7CjRA,AP4RA,AoDxBA,CAAA,EpDwBgB,CAAA,KADW,CkBnG3B,CAAA,AXzLA,CAAA,AWyLA,CAAA,AXzLA,EP6RgB,CAAa,CAAC,CO5R9B,AW2LA,AlBiGA,CkBjGA,AlBiGA,AO5RA,AP4RA,CAAA,AO5RA,AW2LA,CAAA,AX3LA,AP4RA,CkBjGA,AlBiGA,AO5RA,CP4RA,AkBjGA,AX3LA,AP6Rc,CO7Rd,AW2LA,AlBiGA,AkBjGA,AlBiGA,CAC0B,AAD1B,AkBjGA,CAAA,AlBiGA,AkBhGiE,AlBgGjE,CAAA,AkBjGA,AlBiGA,AACoC,CADpC,AkBjGA,CAAA,AlBiGA,AkBjGA,ClBiGA,AkBjGA,CAAA,AlBiGA,AkBjGA,CAAA,AlBiGA,CkBjGA,AlBiGA,CkBjGA,AlBkGyB,WACS,EAGlB,CGzHhB,AIrKA,AP8RA,EAAmB,CAAa,AAChC,CG1HA,AeuBA,AflBA,AIzKA,AP8Re,CkBnGf,AfvBA,AIpKA,AP8RgB,CG1HhB,AeuBA,AlBsGQ,CkBtGR,AfvBA,AH8HA,CG9HA,AeuBA,AlBuGO,CG9HP,AeuBA,ClB2GI,AGlIJ,AeuBA,ClB2GA,AGlIA,AeuBA,ClB2GA,AGlIA,AeuBA,CfvB4C,AHkI5C,AkB3GA,IlByGI,CoDZJ,ApDYA,CAAA,CoDZA,ApDYA,CAAQ,CAAC,CoDZT,ApDYA,CoDZA,ApDYA,WAAA,CAAA,GAA0B,CAAA,GAEf,CAAX,AoDbA,IpDcU,CAAV,CAAA,CAAA,CAAA,CAAA,aAA4B,CAAC,COjS7B,APiSA,COjSA,APiSA,CAAA,AOjSA,CAAA,APiSA,EAAA,CAAA,IACQ,CAAR,AoDZA,CAAA,ApDYA,CoDZA,ApDYA,UAAgC,IAMvB,CAAT,YACI,CAA+D,CoDTnE,A7CvRA,CPkSI,CAAJ,GAAU,CAAV,CAAA,AAA0B,COjS1B,APiSA,EAAkC,COjSlC,APiSA,CAAA,AOjSA,CAAA,APiSA,CAAsC,CAAC,OAAO,COjS9C,APiSgD,GAAc,CAA9D,COjSA,APiSgE,CAAC,AOjSjE,CPkSI,COlSJ,AW8LA,AlBoGA,COlSA,APkSA,AkBpGA,CAAA,AlBoGA,AAAW,IAAA,CAAK,CoDThB,ApDSA,CoDTA,ApDSA,CoDTA,ApDSA,IAAuB,CAAE,CoDTzB,A7CxRA,APiSA,CAAA,AOjSA,A6CwRA,CAAA,A7CxRA,APiSA,CoDTA,ApDSA,COjSA,APiSA,AoDTA,CAAA,ApDSA,AOjSA,CPiSA,AoDT8B,A7CxR9B,CAAA,APiSA,CAAA,AOjSA,A6CwRA,C7CxRA,A6CwRA,ApDSA,COjSA,APiSA,UACsB,CoDTtB,A7CxRA,AW6LA,AlBoGA,CACE,CAkBO,CAAT,CAAA,CAAA,GAAe,CAAf,YACI,CAAqB,AO9RzB,AW2LA,AlBkGA,CAAA,AkBlGA,AlBkGA,AO7RmB,AW2LnB,CAAA,AlBkGA,AkBlGA,CAAA,AlBkGA,AkBlG8B,KlBuG1B,CO/RJ,AP+RA,MAFoB,CAAC,CAArB,AkBnGA,uBlBmG6C,CAAC,GAEtC,CAAR,CO/RA,AP+RA,CO/RA,AP+RA,AAAc,IAAI,CAAC,CkBnGnB,AX5LA,AP+RA,CAAA,AkBnGA,OAAA,ClBmG8B,CAA9B,AkBnGA,ClBmGA,AO/RA,AW4LA,CAAA,AX5LA,AP+RA,CkBnGA,AlBuGA,AAJA,GAI2B,CO/R3B,AP+RA,GAA+B,CAAA,AAJW,CO/R1C,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,APmSgD,CAAhD,COnSA,APmSkD,COnSlD,APmSmD,COnSnD,CAAA,APsSI,CO/RJ,AP+RA,AOtSA,CAAA,AAOA,AP+RA,CO/RA,AAPA,APsSA,COtSA,APsSA,CAAS,AOtST,CPsSA,AkBn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AlBgDA,CAAA,AkBhDA,ClBgDA,CkBhDA,AlBgDA,CAAA,AkBhDA,ClBgDA,AkBhDA,CAAA,AlBgDA,CkBhDA,AlBgDA,CAAA,CAAA,AkBhDA,CAAA,AlBgDA,CkBhDA,AlBgDA,CAAA,CkBhDA,AlBgDA,CAAA,CAAA,GAA6B,CAAC,CkBhD9B,AlBgDA,CAAA,AkBhDA,CAAA,AlBgDA,CAAA,AkBhDA,ClBgDA,CkBhDA,AlBgDA,CkBhDA,AlBgDA,AAEQ,CkBlDR,AlBgDA,AkB/CA,AlBiDA,CkBlDA,AlBgDuC,AkB/CvC,AlBiDA,AACM,CAHkC,AkB/CxC,AlBiDA,CkBlDA,AlBkDA,AkBjDA,AlBiDA,CAAA,AkBjDA,AlBkDuB,AkBnDvB,AACA,CAAA,AlBiDA,AkBjDA,AlBiDA,AkBlDA,CACA,AlBiDA,AkBlDA,AACA,AlBiDA,AkBjDA,AlBkDoC,CkBlDpC,AlBiDA,AkBjDA,AADA,AlBkDA,AkBjDA,AlBiDA,CkBjDA,AlBiDA,AkBlDA,AACA,AlBiDA,AkBjDA,AlBiDA,CkBjDA,AlBiDA,AkBjDA,AADA,AlBkDA,CkBjDA,AlBiDA,AkBjDA,AlBiDA,AkBjDA,AlBiDA,AkBlDA,CACA,AlBiDA,AkBjDA,AlBiDA,AkBlDA,CACA,AlBiDA,AkBlDA,AlBkDA,AkBjDA,AlBiDA,CkBjDA,AlBiDA,AkBlDA,AACA,AlBiDA,AkBjDA,AlBiDA,CAAA,AkBjDA,AlBiDA,AkBjDA,AlBiDA,AkBjDA,ClBmDM,AkBpDN,AlBkDA,AkBjDA,AlBiDA,CkBjDA,AlBiDA,AkBlDA,AACA,AlBiDA,AkBjDA,AlBiDA,CkBjDA,AADA,AACA,AlBkDoC,AADpC,AkBjDA,CAAA,AADA,AlBoDuB,CAFvB,AkBjDA,AlBmDA,AkBlDA,CADA,AADA,AlBoDA,AkBlDA,AlBkDqC,CAArC,AkBlDA,AAFA,AAEA,AlBkDA,CkBlDA,AlBkDA,AkBlDA,AlBkDA,CkBlDA,AlBkDA,AkBpDA,CAEA,AlBkDA,AkBlDA,AlBkDA,AkBpDA,CAEA,AlBkDA,AkBpDA,CAEA,AlBkDA,AkBlDA,AlBkDA,AkBpDA,CAEA,AlBkDA,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BkDA,AkBhDA,ClB+CA,AkBjDA,AlBkDA,AkBhDA,ClB+CA,AkBjDA,AAEA,AlBgDA,CAD6C,AkBjD7C,AlBmDgB,CkBnDhB,AlBmDgB,CkBnDhB,ClBmDgB,AkBnDhB,EAAA,ClBwDI,AkBxDJ,ClBwDK,AkBxDL,ClB0DU,AkB1DV,ClB0DA,AkB1DA,ClB0DA,CkB1DA,CAAA,CAAA,CAAA,ClB2DM,CkB3DN,AlB2DA,CkB3DA,AlB2DA,CkB3DA,AlB2DA,CkB3DA,AlB2DY,CAAZ,AkBjDA,ClBiDA,AkBjDA,AAVA,ClB2DA,AkBjDA,AAVA,CAUA,CAVA,ClB2DuB,AkB3DvB,ClB2DwB,AkB3DxB,ClB2DA,AkBjDA,AAVA,CAAA,AlB2DA,AkBjDA,CAVA,AlB2DA,AkBjDA,CAAA,AlBiDA,CAAA,CkBjDA,AlBiDA,CkBjDA,AlBiDA,CkBjDA,AlBiDA,CkBjDA,AlBiDA,CkBjDA,AlBiDA,CAAmC,CACnC,CkBlDA,CAAA,EAAA,CAAA,CAAA,AlBkDgB,CkBlDhB,AACA,CADA,AACA,CADA,AACA,CADA,AACA,CADA,AACA,CAAA,CADA,CAAA,AACA,CAAA,CADA,CAAA,AACA,AlBkDqB,CkBnDrB,AACA,AACA,AlBiDA,CkBlDA,AlBkDA,AkBjDA,AlBiD0B,AkBnD1B,CAAA,AAEA,AlBiDA,AkBjDA,AlBiDA,CkBlDA,AlBkDyB,CkBnDzB,AACA,CADA,AACA,CAAA,AADA,CACA,AADA,ClBmDiC,AkBnDjC,AACA,CAAA,AlBkDkC,AkBjDlC,AAFA,CACA,AACA,AlBkDQ,AkBpDR,ClBoDA,AkBpDA,AACA,AAEA,ClBiDY,AkBpDZ,AACA,AlBmDA,CkBpDA,AACA,AAEA,AlBiDA,CkBpDA,AAGA,AlBiDY,CkBnDZ,CADA,AACA,CADA,AACA,CADA,AACA,CADA,AlBoDY,AkBnDZ,CADA,AlBoDY,AkBnDZ,CAAA,AADA,CACA,AADA,CACA,CADA,CACA,AADA,CACA,AADA,CAAA,AACA,CAAA,CAAA,ElBmDkC,AkBnDlC,CAAA,AAEA,AlBiDA,CkBnDA,AlBmD8C,CkBnD9C,AlBmDA,AkBjDA,CAFA,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AA,EAAA,CAAA,wSA8DK,CInDT,AMhBA,AyDSU,ArDqFV,AgC7FA,AtCqDA,AuDoOA,AnB7PA,AXHA,AkBNA,AjCUA,AP4OoB,AQhRpB,AnByEA,EkBrCA,GAAA,CAAA,wJlBuDK,IAAA,CAAA,eAAA,EAAA,IAAA,EAAA,UAAA,CAA2C,6GAiBO,CAAA,IAAK,CAAC,CkB9B7D,AI8iBA,AWhjBA,AjCgCA,AWgOA,AGhMA,CQgfA,AWhjBA,AjCgCA,AWgOA,CO9PA,AlB8BA,AsBghBA,AWhjBA,AnBgEA,CAAA,AQgfA,AJ9iBA,AeFA,AjCgCA,AWgOA,CAAA,GAAA,GAAA,EAAA,EAAA,SX/N0C,CcgC1C,AmBhEA,AtBgQA,AO9PA,AdhByC,A2D4QzC,AnBlPA,AzBnDA,AwCiB6C,Ad6L7C,AhBlFA,CIrFA,AfEA,AP8PA,AGhMA,A8BpDA,AzBnD4D,AnBuE5D,A+D8NA,AlCzKA,CAAA,GAAA,EAAA,IAAA,C7BpDyB,EAAA,MAAA,CAAA,IAAA,CAAA,qEAKgC,Cc8BzD,A+BuGA,A7CrIA,AmDzCA,AlBOA,CAAA,AYuKA,A7CrIA,Ac8BA,AqCvEA,CnDyCA,Ac8BA,AqCvEA,AN8KA,AZvKA,CAAA,AYuKA,A7CrIA,AmDzCA,6BnD4CA,gHAYQ,C+DqNR,AvD7NA,CuD6NA,AvD7NA,AyBhCA,wCjCkDE,CWqNF,4EX7MwB,CACe,CAPvC,OAWwB,yIAWxB,CAAA,AgDzDA,ArCqQA,AX1M6C,CAFyB,AgDzDtE,ArCqQA,AX1M6C,6KAkB7C,uCAWmD,CciBnD,AV5FA,qEJmF6B,WAH7B,CAAA,CAA4E,4BAMrB,CAAA,KAAA,gBAmClB,QAAQ,CiCjC7C,AjCiC+C,CiCjC/C,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,AjCoCmD,MAAA,AAAnD,CAA2D,AiCjC3D,CfGqB,AeHrB,AjCkCc,CiClCd,sCjCgDuB,CiCnCvB,A7BjCA,Aa6HA,AjBzDA,CAAA,AIpEA,AUiHA,AGYA,CAAA,CAAA,QjBzD6C,CAA7C,AiCnCA,A7BjCA,AcmCA,ClBiCA,Ac6CA,AmBhFA,IAAA,mDjC+CsC,CAAA,CAAA,CAAA,EAmB1B,IAAI,CAAA,KAAA,CApBhB,CIjEA,Aa6HA,Cb7HA,Aa6HA,CAAA,Ab7HA,CAAA,Aa6HA,CAA0D,AjBlChD,EAAA,EAAA,GACV,EAAA,CAAA,CAAsB,Cc2BtB,AH+KA,APpSA,AyB8IA,A7BpDA,CAAA,kBAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAA+E,2BAE7B,CAAA,OAChC,CADlB,CAAA,AAEQ,CAFR,CAAA,AAEc,AAFd,CAAA,CAAA,CAAA,AAEa,AAFb,CAAA,AAEkB,CAAQ,CADE,mBAMlB,CAAV,AiBkCA,A8CgJA,ApDsBA,CMtKA,ANsKA,AoDtBA,A/DlLA,IAAiB,IAAA,CAAA,YAAiB,CAAA,eAAA,CAAiB,CAAnD,AiBkCA,CjBlCA,A+DsLO,A9CpJP,QjBlCoE,CAAC,CAAC,CAAtE,CAAA,KAA6E,qEAOvE,EAAA,QAAA,mEAOoE,mDAKpE,CAAA,qDAGC,kDAIoB,8BAEZ,CI1Ff,A2DwQA,AjDzJgB,AGchB,AYiBA,AIrHA,AjCiEA,CAAA,QAAA,+DAKyB,CI3FzB,A2DwQA,A9B/OA,C8B+OA,A9B/OA,C7BzBA,A2DwQA,A9B/OA,uCjCqEmB,aAC8B,CAAjD,AkBlEA,AdzBA,CJ2FiE,CI3FjE,AJ2FA,QAAA,kDAIc,sDAOd,CAAA,AACc,CADd,CAAA,AAC8B,CAD9B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,AAC0C,CAAb,AAAc,CAAE,CAD7C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACuD,EAAE,CADzD,CACgE,AADhE,CACiE,AADjE,CAAA,GAGgB,GAAA,EAAA,2BAKkB,CiC1ElC,A8BoPA,A/D1KA,CiC1EA,AjC0EA,CAAA,AiC1EA,A8BoPA,C9BpPA,AjC0EA,A+D0KA,C9BpPA,A8BoPA,A/D1KA,CAAA,AiC1EA,A8BoPA,C9BpPA,AjC0EA,CiC1EA,A8BoPA,A/D1KA,CiC1EA,AjC0EA,A+D0KA,C9BpPA,A8BoPA,A/D1KA,C+D0KA,A9BpPA,AjC0EA,C+D0KA,A9BpPA,AjC0EA,C+D0KA,A/D1KA,AiC1EA,CjC0EA,A+D0KA,A9BpPA,C8BoPA,A9BpPA,AjC0EA,EAC0C,C+D0K1C,A/D1KA,CAAA,AkBlEuB,A6C4OvB,CAAA,A/D1K2D,AAA3D,CAAA,A+D0KA,A/D1KA,A+D0KA,C/D1KA,A+D0KA,A/D1KA,CAAA,A+D0KA,A/D1KA,C+D0KA,A/D1KA,A+D0KA,A/D1KA,AAAyE,C+D0KzE,A/D1KA,CAAA,A+D0KA,A/D1KA,CAAA,C+D0KA,A/D1KA,C+D0KA,A/D1KA,AAA8E,CAA9E,A+D0KA,A/D1K+E,CAA/E,A+D0KA,CAAA,A/D1KA,CAA0D,sBAO9B,C6BwD5B,A7BxDA,A+DwKA,AjD3JA,AmBzFA,C8BoPA,AjD3JA,Ae2CA,AIpIA,AjC4EA,EAAA,CAAA,UAEkB,OAAQ,6DAetB,oCAAA,EAAA,MAAA,CAAA,GAAA,CAAA,GAAA,EAAA,EAAA,MAAA,CAEkC,C6BwDtC,AkC6GA,EAAA,EAAA,MAAA,EAAA,EAAA,cAAA,EAAA,EAAA,gBAAA,CAAA,S/DhK+B,CAoFzB,C6B2EN,AI5JA,A8B+PA,A/D9KA,C6B2EA,AkCmGA,C/D9KA,AiCjFA,kEjCG6C,EAAA,KAAA,CAAA,OAM3B,CAAA,OAAA,CAAA,CAAA,CAAA,2DAeY,C+DoK9B,AjDnJA,AegDA,A7BjEA,AWmMA,CAAA,AXnMA,A6BiEA,AkCoGkB,AjDpJlB,CdjBA,A6BiEA,AlBkIA,AGlLA,SAAA,CdjB2C,eAAA,CAAA,EAAA,QAAA,EACtB,CWmMrB,AOxQA,AlBqEA,AcsBA,CH6KA,AXnMA,AcsBA,KAAA,CdrBkB,CAAlB,AWmMA,AsB/QA,AfOA,CAAA,AlBqEA,AWmMA,COxQA,APwQyB,AsB/QzB,AjC4EA,OAAA,EAAsC,CiC5EtC,AjC4EA,CiC5EA,AjC4EA,CAAA,AiC5EA,CjC4EA,AiC5EA,CAAA,AjC4EA,CAAA,AiC5EA,GAAA,ejC8EkB,kBAAA,CAAA,sCAMmB,CsBumBrC,CAAA,CAAA,AtBjmBkB,AAAC,IAAI,CAAC,CcsBxB,AekDA,A7BxEA,C6BwEA,AflDA,AdtBA,CcsBA,AekDA,A7BxEA,IAAA,IAEkB,EAAA,EAAA,SAGW,CsBqmB7B,AXpasC,AsB7QtC,AJkJA,A7BtEA,CAAA,OAA6C,CACzB,AsBomBpB,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CtBpmB+B,AsBomB/B,CAAA,CtBpmBwC,AsBomBxC,CtBpmBA,A+D6KA,AjD1IA,AQkkBA,AADA,CtBpmBA,AcmCA,AQkkBA,AyCxbA,AzCubA,CACA,AtBrmBA,A+D6KA,AjD1IA,AQikBA,CtBpmBA,A+D6KA,AzCubA,KyCvbA,M/DrK+B,EAAA,cAAA,EAAA,IAAA,CAAA,OAAA,kEAIQ,iBAAe,CiC5EtD,AjC4EA,CiC5EA,AjC4EA,CAAA,AiC5EA,CjC4EA,AiC5EA,CAAA,CAAA,AjC4E4D,CiC5E5D,2CjCyFqC,CAArC,AcgDA,AItHA,ClBsEA,AcgDmC,AItHnC,cAAA,kClB4EqD,CiC/ErD,A8B8PA,A/D/KA,AkBtEA,ClBsEA,AiC/EA,AfSA,A6CqPA,uB/D7K0C,CAA1C,A+D+KA,AlCnGA,AXlJA,CJqHA,Ad/CA,AkBtEA,AWkJA,AkCmGA,C/D/KA,AkBtEA,AJqHA,Ae6BA,AkCmGA,C7CrPA,AJqHA,AiDgIA,A/D/KA,AAEU,C+D8KV,AlCnGA,AI5JA,AjCiFA,C+D8KA,A9B/PA,AjCiFA,AAAmB,C+D8KnB,AlCnGA,AI5JA,AjCiFA,A+D8KA,AlCnGA,A7B3EA,CAAA,A+D8KA,A9B/PA,A8B+PA,AlCnGA,A7B3EA,AiCjFA,AJ4JA,iBAAA,E7B3E0C,CiCjF1C,AJ4JA,AkCmGA,AjDhIA,Ad9CA,CAAA,A+D8KA,A9B/PA,AnB+HA,Ad9CmD,A6B2EnD,CAAA,AkCmGA,A9B/PA,AjCiFA,AiCjFA,AnB+HA,AiDgIA,AlCnGA,A7B3EA,Cc8CA,AmB/HA,AjCiFA,A6B2EA,AI5JA,AjCiFA,Ac8CA,AiDgIA,CjDhIA,AiDgIA,A/D9KA,A6B2EA,AI5JA,CnB+HA,AiDgIA,A9B/PA,AJ4JA,A7B3EA,UAAiE,CiCjFjE,AJ4JA,Af7BA,AiDgIA,e/D1KuB,GAAG,CAAC,Cc8C3B,Ad9CA,A+D+KA,A7CtP8B,AWkJ9B,CkCoGA,A/D/KA,A6B2EA,Af7BA,Cd9CoC,Cc8CpC,AiDiIA,AlCpGA,A7B3EA,GAAA,CAAyC,IAAA,EAErC,CAEA,CiCnFJ,AjCmFA,CiCnFA,AjCmFA,CiCnFA,AjCmFA,IAAW,QAAQ,OAAO,CAAC,Cc6C3B,AIrHA,AlBwEA,A6B+EA,AkCgGA,C7CvPA,AlBwEA,A6B+EA,AflCA,AiDkIA,C/D/KA,Ac6CA,AiDkIA,A7CvPA,AWuJA,A7B5ES,CAHT,AkBxEA,A6CuPA,AjDlIA,Ad1CA,C6B4EA,A7B/EA,AkBxEA,A6CuPA,AjDlIA,Cd7CiC,A+D+KjC,AlChGA,AXvJA,AJqHA,Cd7CkC,A6B+ElC,AflCA,AiDkIA,C7CvPA,AJqHA,AiDkIA,AlChGA,CXvJA,A6CuPA,AlChGA,AflCA,iBdzCI,CAAuB,CiCrF3B,A8BkQA,A7CvPA,AlB2EI,CkB3EJ,AeXA,A8BkQuB,A/D9KvB,AAWK,CkBpFL,OlBuFoC,CkBtFpC,AlBqFA,CkBrFA,AlBqFA,CAAA,CAAA,AkBrFA,CAAA,AlBqFA,CkBrFA,AlBqFA,CkBrFA,AlBqFA,CAAA,AkBrFA,ClBqFA,CkBrFA,ClBsF+C,AkBtF/C,CAAA,SAAA,CAAA,CAAA,EAAA,SlBuF6C,CAAE,C+DqK/C,O/DrKiD,CAAjD,CAAA,A+DqKA,A/DrKA,C+DqKA,A/DrKyD,AAAzD,C+DqKA,A/DrKA,A+DqKA,CAAA,A/DrKA,A+DqKA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,a/D9JS,KAAA,CAAA,2BAAA,CAAmC,AAAnC,Cc8BT,Ad9BA,AiCjGA,CnB+HA,Ad9BA,AiCjGA,CnB+HA,AmB/HA,AjCiGA,Cc8BA,AmB/HA,AjCiGA,AACM,CsB4oBN,AR/mBA,Ad9BiD,AACjD,AiClGA,AACA,AfSA,CeVA,CAAA,AnB+HA,Ad9BmD,AACzC,CiClGV,AjCiGA,Ac8BA,CAAA,AmB/HA,CAAA,AnB+HA,Ad9BA,CiCjGA,CAAA,AjCmGY,Ac4BZ,CmB/HA,AnB+HA,Ad5BY,Cc4BZ,AmB/HA,CAAA,CAAA,AnB+HA,CmB/HA,AnB+HA,CmB/HA,AnB+HA,CAAA,AmB/HA,CAAA,AnB+HA,CmB/HA,AnB+HA,CmB/HA,AnB+HA,CmB/HA,AnB+HA,CAAA,AmB/HA,CAAA,CnB+HA,CAAA,AmB/HA,CnB+HA,AmB/HA,CnB+HA,AmB/HA,CAAA,AnB+HA,CAAA,AmB/HA,AjCmGY,CAAoB,Cc8BhC,AmB/HA,ajCkGQ,MAAA,EAAA,kBAGG,CAAA,EAAG,CAAC,AkBvFf,APgRA,AkBnHA,wC7B9DM,C+DkKN,A7C3PA,AlBsFA,AkBtFA,C6C2PA,A9BvQA,AjCkGA,AkBtFA,UlB0FM,CiCtGN,AjCkGA,A+DqKA,C9BvQA,AjCkGA,A+DqKA,C/DrKA,CAAA,AiClGA,A8BuQA,C9BvQA,AjCkGA,A+DqKA,C9BvQA,AjCkGA,A+DqKA,C9BvQA,AjCkGA,CiClGA,A8BuQA,A/DrKA,M+DqKA,CAAA,CAAA,mBAAA,C/D/JwB,CAKnB,CAXL,qDAiByB,IAAA,8CAMf,CAAA,YAAA,CAAA,gBAA8B,IAGxC,CAEA,CAAA,QAAS,CAAT,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,EAKE,IAAA,EAAA,CAAuB,CcyCzB,AHoIA,AX7KA,AkBvGA,AebA,CfaA,AJgJA,AHoIA,AsBjSA,AjCoHA,CiCpHA,AfaA,APoRA,AGnI2B,Ad1C3B,AAA+C,CAA/C,AkBvGA,APoRA,AsBjSA,AfaA,AlBuGA,CW6KA,AsBjSA,AjCoHA,AcyCA,AIhJA,AlBuGA,CkBvGA,AlBuGA,CkBvGA,AlBuGA,CkBvGA,AlBuGA,CAAqD,AkBvGrD,CAAA,AlBuGsD,CkBvGtD,CIwuBA,AJxuBA,CIwuBA,AJxuBA,CAAA,CAAA,CAAA,ClBsGA,CkBtGA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,ClBsGuB,CAAvB,AcyCA,AI/IA,AedA,AfaA,ClBuGA,AkBvGA,AACA,AJ+IA,AmB7JA,CjCoHA,CkBtGA,AlBwG0B,CkBxG1B,CAAA,CAAA,EAAA,CAAA,CAAA,AlBsGA,CAAA,AkBtGA,CAAA,CAAA,CAAA,AlBwG0C,CW6K1C,AkB1HA,AX1JA,AlBuGA,Cc0CA,AHmIA,AkB1HA,A7BnDA,AkBvGA,AlBuGA,CW6K2C,AkB1H3C,A7BnDA,Ac0CA,CIjJA,AW0JA,AfTA,Ad1CA,EAAA,SAGS,CACT,iS6B1ayC,CezFzC,AfyFA,AZXA,A8ErHsC,ElEiIhC,GAAA,IAAkB,CAAA,KAAM,CAAC,CevFd,AfsFjB,CAAA,eACgD,CAAC,Ce1FjD,AfyFA,CezFA,AfyFA,CAAA,CepFkB,AfoFlB,CAAA,sHASS,aAAA,CAAA,EAAA,aAAA,8IAKA,kBAAA,CAAA,EAAA,kBAAA,mJAMT,+DAiBE,C8BtGC,A9BsGH,GAAA,OAAA,gCAQA,yBAC6B,GAAA,EAAA,IAAA,qCAOnB,qBAAA,CAAA,CAAA,yFAUN,CAAA,CAAA,UAAA,CAAA,CAAA,mBAAA,CAEkB,CX7FtB,AJ8DA,cAAA,CAAA,gBeiCI,CX/FJ,AWsFA,CfxBA,AI9DA,AWsFA,AASqB,CX/FrB,AJ8DA,AewBA,CAAA,AfxBA,AeiCuB,CX/FvB,AWsFA,AfxBA,CewBA,AXtFA,CAAA,AJ8DA,AewBA,CfxBA,AewBA,AXtFA,iBWgGI,CAVJ,CAAA,CAAA,AAU0B,CAV1B,AAU+B,CAV/B,AAWI,CAXJ,CAAA,CAAA,CAAA,CAAA,CAAA,AAWU,CAXV,AAWY,CAXZ,AAW6B,CAX7B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAYI,CAAc,AAZlB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAaI,CAbJ,AAae,CAbf,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAcI,CAdJ,AAce,CAdf,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAeI,CAfJ,AAekB,CAflB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,AAgBI,CAhBJ,AAgBW,AAhBX,CAAA,AAoBG,AApBH,CAAA,CAAA,CAAA,CAAA,WAqB+D,IAAA,8CAEN,CAAA,wOAwBnB,CAAA,CAAA,6EASA,CAAA,EAAqB,CzBlI3D,A6B+BA,CAA6D,A7B/B7D,C6B+B8D,C7B/B9D,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,mHyBkJI,CAAJ,AsB7HA,AN2LA,A/BnGA,8BAAA,IeqCe,QAAA,CAAS,EAAA,WACJ,CAAA,+DAKU,EAAA,EAAA,KAAA,2BAMN,CAAA,KAAA,CAAA,EAAA,EAAA,QAAA,EAAA,UAGuB,IAAK,CAAA,AAApD,CX5GA,AlB0CA,A6BkE4D,CX5G5D,AlB0CA,CAAA,AkB1CA,ClB0CA,AkB1CA,CAA6C,ClB0C7C,CAAA,CAAA,EAAA,CAAA,A6BoEmB,C7BpEnB,CAAA,A6BoEmB,C7BpEnB,EAAA,CAAA,A6BoEmB,C7BpEnB,C6BoEmB,A7BpEnB,EAAA,A6BoEmB,C7BpEnB,CAAA,CAAA,EAAA,a6BoEmB,CAAA,EAAA,UAEO,CzB7I1B,AyB6IA,A7BpEA,AcqBA,AgC7GA,AxBmmBA,+DOjcgB,CAAhB,AmB1HmB,AfanB,A8B8OA,A9CrJA,AbzHA,AciCA,4FWkHkC,CmBrHlC,A1B0jBc,AX9Sd,AMvKA,A8CiJA,A7CzOA,AlBmCA,A6BqEA,CAAA,EAAA,EAAA,CAAgE,CPqchE,A0B1jBA,AhDgDA,A6BqEA,CmBrHA,AhDgDA,A6BqEA,APqcA,C0B1jBA,AhDgDA,AsB0gBA,AOrcA,EAAqE,CPqcrE,A0B1jBA,AnBqHsE,A7BrEtE,CgDhDA,A1B0jBA,AtB1gBA,CsB0gBA,AtB1gBA,CAAA,AgDhDA,A1B0jBA,CAAA,A0B1jBA,8DnB8HoD,CX1GpD,AP+PA,AG1LA,AeqCA,AkCiIA,AfzPA,CeyPA,AlCjIA,A7BxEA,AW6NA,AG1LA,AIrEA,ClBkCA,AkBlCA,A6C2OA,AlCjIA,AmBxHA,AlCmFA,CeqCA,AkCiIA,AfzPA,ArC6QA,AG1LA,AIrEA,AlBkCA,CW6NA,AX7NA,A6BwEA,AX1GA,A6C2OA,AjDtKA,AkCnFA,CrC6QA,AX7NA,AkBlCA,AW0GA,AkCiIA,AfzPA,C9BcmD,AW0GnD,AmBxHA,ArC6QA,AG1LA,AdnCA,C6BwEA,AmBxHA,AlCmFA,AdnCA,AkBlCoD,A6C2OpD,CjDtKA,AeqCA,AkCiIA,AfzPA,ArC6QA,CX7NA,A6BwEA,AmBxHA,ArC6QA,CqC7QA,AeyPA,A/DzMA,AW6NA,AG1LA,AeqC+D,C2BzJC,AO0RhE,ApDoBA,AG1LA,AeqCgE,C7BxEhE,A+DyMA,AfzPA,AlCmFA,eeuC8C,CkCiI9C,AjDtKA,AeqCA,A7BxEA,C+DyMA,AlCjIA,A2BzJ8C,AxDiF9C,AcmCA,Ce6CY,CzB/IZ,A6BoCA,AJ2GA,APocA,ARveA,Me8BgB,cAC2B,CAA3C,AX7GA,A8BXgD,C9BWT,AdjCvC,AJqEA,A6ByEA,CAAA,AzB9IA,AJqEA,cc0CA,KesCS,CI5GT,AJ4GA,AkC8HA,A3D9QA,AyCoSA,QAAA,CAAA,uDhB1I+D,CX3G/D,A6CyOA,A9ClJA,AHbA,AdzCA,oC6B6EkB,KAAA,EAAA,IAAA,2CAMoC,UZhBtD,OAAA,IAAA,CAAA,EAAA,UAAA,EAAA,CYoBA,CAA0D,AzB9IrD,Ac+BL,A6C8OA,A9B9OA,EJ+G4D,CkC+H5D,A9CnJA,AYoBA,AI/GA,A7BjCA,CAAA,A2D+QA,A7C9OA,AD2FA,AYoBA,CI/GA,A7BjCA,AciCA,AD2FA,AYoBA,CAAA,AkC+HA,A9CnJA,AC3FA,AeAA,A7BjCA,CyBgJA,AI/GA,A8B8OA,A3D/QA,Aa4HA,AC3FA,CW+GkE,KAC3C,UAAA,CAAA,EAAA,UAAA,EAGT,CAAd,AfxBA,AiDsJA,CjDtJA,AewBA,AkC8HA,AlC9HsB,CkC8HtB,AjDtJA,AewBA,CfxBA,AiDsJA,AlC9HA,CAAA,AfxBmB,AiDsJnB,gBlCxHc,EAAA,OAAA,CAAA,CAAA,KADsB,C7BpDpC,c6B0DkB,CAAC,KAAA,CAAA,gBAAA,CAAA,EAAiC,CAApD,AZhBA,CAAA,MYmBgB,CAAC,gBAAA,iBlB0JjB,EAAA,ekBpJgB,QAAA,EACK,EAAA,WAAgB,CkCgIrC,A9B/OA,AJ+GA,AZjBA,ANwKA,APjSA,COiSA,APjSA,AyB0IA,AkCgIA,A9B/OA,AhB8FA,CAAA,AgB9FA,AJ+GA,AlBuJA,AoDvBA,KlChIgD,ClBuJhD,AkBvJA,AI/GA,CtBsQA,APjSA,AyB0IA,AI/GA,CAAA,AJ+GA,AlBuJA,CsBtQA,AJ+GA,AlBuJA,APjSA,CAAA,YyBiJE,CI/GF,aJmHI,CAAA,CAAA,4GAUO,UAAA,CAAW,IAAI,CAAA,GAAA,IAEd,CAAZ,AZlBA,AgBpGA,MJsHA,EAAA,IAAA,kBAE4B,KAAK,KACd,iDAE0B,CzB/I7C,AyB+IA,IAAA,gCAQA,CXxHA,A+CyHA,AnDjCA,AegC2C,CXxH3C,AJwFA,AmDiCA,EpCCO,mEAOG,CAAV,cAAA,IAA+B,GAAA,EAAA,CAAA,+BAAA,EAAA,I7BnD/B,C6B2DS,CP+dT,AO/dA,eAAA,CAAA,CAAA,CkCkHA,A/D1KA,AiC1EA,CAAA,A8BoPA,A/D1KA,C+D0KA,A/D1KA,AiC1EA,CAAA,A8BoPA,A/D1KA,C+D0KA,A9BpPA,AjC0EA,C+D0KA,A/D1KA,C+D0KA,A9BpPA,AjC0EA,C+D0KA,A9BpPA,AjC0EA,CAAA,AiC1EA,A8BoPA,C/D1KA,A+D0KA,C9BpPA,AjC0EA,C+D0KA,A9BpPA,AjC0EgC,C+D0KhC,mBlC/GS,EAAA,CANT,CkCoHA,A9CzIA,AYqBA,AX1HA,AlBkEA,CAAA,AiBmCA,ACrGA,AeNA,A8BoPA,AlCpHuD,AAM5B,C7B9D3B,AiCxEA,A8BoPA,A9CzIA,AYsBG,AX3H4D,AWgIpC,GAAA,YAC8B,CAAzD,Cf1CA,Ae0CA,Cf1CA,Ae0CA,AAEY,Cf5CZ,Ae0CA,CAEY,Af5CZ,Ae0CA,CAAA,Cf1CA,Ae0CA,Cf1CA,Ae0CiE,Cf1CjE,Ae0CkE,Cf1ClE,CAAA,CAAA,CAAA,CAAA,CAAA,oBekDmD,CkCgHnD,ApD2BA,AkB3IA,QAA4D,CkCgH5D,AlChH8D,CAA9D,AlB2IA,AoD3BA,CpD2BA,AoD3BA,AlChHA,CkCgHA,AlChHwE,AAAxE,AlB2IA,0BiDjnBuB,2FAOU,C9CoCjC,AGLA,CAAA,AHKA,CAAA,AGLA,CHKA,AGFyB,CHEzB,CAAA,CAAA,CAAA,A8CpCyC,C9CoCzC,CAAA,CAAA,cAKO,CALP,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAKqB,GALrB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAIyB,EAJzB,EAAA,CAAA,CAAA,AAKqB,CALrB,AAKqB,IAAA,EAAA,KAAA,CAAA,KAAA,CAAA,4Cewb0B,eAAe,CkCgH9D,AjD3JA,Ae2CgE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gCA,AdTA,AIxEA,A4CgBA,A9BGA,AW2GA,AkCkJA,CnB/NA,AmB+NA,A7C7PA,A8BHA,AnB8GA,AZnBA,AjBnCA,AcSA,AVjFA,EAAA,SAAA,CAAA,GAAA,oCAIe,SAAA,CAAA,2CAkBH,GAAA,EACY,C0CvBxB,A1CqBA,C0CrBA,A1CqBA,CAAA,A0CrBA,C1CqBA,GAAA,EAAA,KAAA,EAAA,eAAA,AAKU,CU0FV,CV/FA,AU+FA,CAAA,GV/FA,CAAA,KAAA,iBASgD,CJ2EC,AI3EA,AU4FjD,AIzEA,CAAA,OAAA,CAAA,CAAA,2DdNkC,C6BgClC,A8B8OA,A3D9QA,AU+FA,CiD+KA,A3D9QA,AU+FA,AmB/DA,a7BzBO,CAAP,CU8FA,AV9FA,mB+D7BK,CAAA,EAAA,cAAA,yC/D2CC,EAAA,OAAA,2BAC+B,CAAA,AAAE,CAAvC,AJwEA,AgDhDA,ChDgDA,AgDhDA,A/BqGA,Ab7HA,CAAA,AoDV8C,ARkC9C,A/BqGA,AjBrDA,AsB4gBgB,CLvdhB,Ab7HA,A4CwBA,A1B2jBA,AkC7lB+C,CxDkF/C,AwDlFgD,ARkChD,A5CxBA,Aa6HA,AKsdA,ClBjlBY,CUsGZ,AGuBA,A+BtGA,ArC4QA,AoDrBA,A/DvMA,AIxEA,CAAA,Aa8HA,A+BtGA,ArC4QA,AoDrBA,AjDxKuC,Ad/BvC,AIxEA,COoSA,AX5NA,AgDhDA,AeuPA,A9CjJA,Ab9HA,GAEY,CAFZ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAE2B,CAAC,CAF5B,CAAA,CAAA,CAAA,CAAA,CAAA,CAEmC,CAAC,AAAC,CAFrC,CAAA,CAAA,CAAA,CAAA,CAAA,CAE4C,EAAE,CAF9C,EAAA,4DAgBI,EAAA,IAAA,GAAA,EAAA,oBAAA,aAEwC,C4CuB5C,A5CxBA,A6BoCA,AjCiCA,CiCjCA,AjCiCA,AgD7CA,A5CxBA,A4CwBA,ChD6CA,AIpE+C,A6BmC/C,AeZA,GAAA,CAAA,K5CvB0D,CAAC,CACpD,CAAC,CAFR,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAEuB,CAAC,CAFxB,CAAA,CAAA,CAAA,CAAA,CAAA,CAE+B,CAAC,AAAC,CAFjC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,AAIM,CAJN,CAAA,CAAA,AkBwlBA,ClBxlBA,CAEkD,AkBslBlD,ElBtlBoD,CAFpD,CkBwlBA,ClBxlBA,EkBwlBA,EAAA,mBAAA,iBlB5kBsC,CAAC,CcoCvC,AlBiCA,AiBsDA,A8CkJA,AlC9HA,AzB/IA,CAAA,Aa2HA,A8CkJA,AlC9HA,AX3GA,CW2GA,AZpBA,ACvFA,AdpCA,AJqEA,C+DwMA,A3D7QA,Aa2HA,AjBtDA,A6B0EA,C7B1EA,EAAA,OAAA,0BI7DuB,OAAA,CAAQ,AAAC,oCAKD,CAF/B,AciCA,CAAA,AdjCA,CAAA,CciCA,AdjCA,CciCA,AdjCA,CciCA,AdjCA,CAAA,AciCA,CAAA,AdjCA,CAAA,CciCA,AdjCA,AAG+B,Cc8B/B,AdjCA,CAII,AAJJ,CAAA,AciCA,CAAA,AdjCA,CAAA,AciCA,CAAA,AdjCA,CAEgD,Ac+BhD,CAAA,CAAA,Ad/BkD,Cc+BlD,AdjCA,CciCA,CAAA,AdjCA,CciCA,kCdpBQ,CALH,AAKG,CUgHR,AIxFA,ADgGA,Ab7HM,CAKE,GAAyB,CAAA,IAAA,EAAA,GAAA,OACmB,Ca6HH,Ab5H1C,AyB4IP,AI5GA,C7B/BK,A6B+BL,AJ4GA,CI5GA,AJ4GA,CI5GA,AJ4G8C,CI5G9C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,C7BtBI,UA0IK,AAfT,CAAA,QAAA,EAAA,CAAA,CAAA,CAAA,+CAQQ,COmQR,APrQA,AUkFA,CAAA,AVlFA,AAEkB,AOmQlB,CAAA,APrQA,AUkFA,AHmLA,AGnLA,AVlFA,COqQA,APrQA,AUkFA,AHmLA,AGnLA,AVlFA,CUkFA,AHmLA,APrQA,AOqQA,APrQA,COqQA,APrQA,AUkFA,CHmLA,APrQA,COqQA,AGnLA,AVlFA,CUkFA,EVhFgC,CAFhC,AOqQA,CPrQA,CAAA,AOqQA,CPrQA,AOqQA,CAAA,APrQA,CAAA,AOqQA,CPrQA,AOqQA,CPrQA,CAAA,AOqQA,CPrQA,AOqQA,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A,CAAA,AACA,CADA,AACA,CADA,AACA,CAAA,AADA,CAAA,CACA,CADA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,AkBrHI,ClBqHJ,AkBrHA,AP+hBA,CO/hBA,AP+hBA,gHOzhB4C,CAA5C,AflDA,UesDM,aAAc,IAAA,gCAQX,CAAT,KAAA,CAAA,CAAA,qBAMgC,CAAC,Cf1BjC,Ae0BA,AkCqGA,ClCrGyC,CIvJzC,AnB6HA,Ae0BA,AkCqGA,ClCrGA,AkCqGA,AjD/HA,AmB7HA,GAAA,6CJ4JW,CAAA,GAAA,CAAA,mFAOX,CAAK,CAAC,CAAC,AAGG,CAAV,gBAAA,CAAA,CACS,CAAT,CAAA,CAAA,gBAAA,2CAKI,EAAA,4BASA,CAAJ,GAAA,CAAA,oBAAA,CAAA,EAAA,4BAM2B,CAAC,AAAC,CXvJ7B,AWuJA,CkC+FA,A7CtPA,AWuJA,CXvJA,AWuJA,iBAMY,CAAC,CInKb,AJmKA,CAAA,A7BnEA,AkBrFA,AeXa,CAAb,AfWA,AWwJA,UAA0B,C7BnE1B,AkBrFA,CWwJ4B,C7BnE5B,AkBrFA,ClBqFA,CkBrFA,AlBqFA,CkBrFA,AlBqFA,CAAA,AkBrFA,AWyJU,CXzJV,AlBqFA,A6BoEW,C7BlEX,A6BkEA,A7BpEA,AkBpFA,CJsHA,AIvHA,AlBqFA,AkBpFA,AlBsFA,A6BkEA,CXzJA,AlBqFA,CkBrFA,AlBqFA,CAAA,CAAA,AkBrFA,ClBqFA,AkBrFA,CAAA,CAAA,AlBqFA,CAAA,CkBrFA,AlBqFA,CkBrFA,CWyJA,CAAA,CAAA,CAAA,sBAOS,CAAT,CAAA,CAAA,kBACI,CIpKJ,AjCiGA,AWoLA,AWwdA,AJpuBA,AW0JA,CX1JA,QAAA,CAAA,eW8JU,ClBmHV,AkBnHA,AIrKA,CAAA,IAAA,cJuKA,EAAA,IAAA,iBAEc,ClBmHd,AOjRA,AlBwFA,AiChGA,AX+uBA,AOzkBA,MAAA,CAAA,IACM,EAAA,OAAA,CAAA,OACsB,UAAU,ClBmHtC,AGvJA,AIzHA,A6C8PA,CjDrIA,AiDqIA,CpDkBA,AOhRA,AJyHA,CAAA,AHuJA,AOhRA,CJyHA,AHuJA,AOhRA,CJyHA,AIzHA,APgRA,CGvJA,AIzHA,CJyHA,AIzHA,APgRA,COhRA,AJyHA,AHuJA,CAAA,AOhRA,AJyHA,CHuJA,AOhRA,AJyHA,CHuJA,AGvJA,CHuJA,AOhRA,AJyHA,CHuJA,AOhRA,AJyHA,CAAmD,AHuJnD,iHkB9GqB,GAAA,CAAA,EAAA,GAAA,mCAEiC,CIpKtD,AfYA,SW2JM,CAAC,iGAMC,CfTR,AeSA,AlB0HA,AX/KA,AiCjHA,CJsKA,AItKA,AjCiHA,Ac4CA,AHmIA,AkB1HA,CItKA,AtBgSA,AX/KA,Ac4CA,AeSA,EAAA,CAAA,mBAMQ,CX5JR,AW0JA,AlB0HA,AX7KA,Ac0CA,CIjJA,APoRA,AGnIA,AeSA,A7BnDA,C6BmDA,AlB0HA,AX7KA,Ac0CA,CHmIA,AkB1HA,AX1JA,AlBuGA,Ac0CA,CeSA,AX1JA,AlBuGA,AW6KA,AGnIA,CeSA,AX1JA,AlBuGA,AW6KA,CAAA,AOpRA,AlBuGA,Ac0CA,AeWe,CX5Jf,AJiJA,AHmIA,AOpRA,AlBuGA,a6BqDmB,CAFnB,AlB0HA,AOpRA,AJiJA,CAAA,CAAA,CeYU,CfZV,AeSA,AX1JA,CW6JY,AfZZ,CIjJA,CAAA,AJiJA,CIjJA,AJiJA,CIjJA,CAAA,AJiJA,EIjJA,AJiJA,CIjJA,AJiJA,CIjJA,AJiJA,CAAA,AIjJA,CAAA,AJiJA,CIjJA,AJiJA,CIjJA,AJiJA,CAAA,AIjJA,CJiJA,AIjJA,AW+JkD,CfblD,AADA,AIjJA,AW+JA,CfbA,AADA,AecA,CfbA,AeaA,CfbA,AeaA,CfbA,AeaA,CAAA,CfbA,AeaA,MAAA,CAA2D,Afb3D,CAAA,Cea6D,Cfb7D,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,KemBsB,CXhKtB,AIyuByB,AOzkBzB,CAAA,GAAA,CAAA,IAAA,GAAA,EAC+C,Cfb/C,AQslBkD,AOzkBlD,EAAkD,CAAC,CfbnD,AmB3JA,AJwKA,CIxKuD,AnB2JvD,AeaA,AAA2D,CAA3D,AfbA,Aea4D,Cfb5D,AeaA,AAA6D,CAA7D,AACQ,CfdR,AeaA,CAAA,WAGuB,CIvKG,AJuK1B,CAAiD,CAAjD,CAAA,CAAoD,CAAC,CAArD,CAAA,CAAA,AAAgE,CAAhE,CAAA,CAAA,AkCiGA,ClCjGA,AAAoE,CAApE,AAAqE,CAAP,AkCiG9D,EAAA,GlChGmD,CAAC,CAApD,CAAA,CAAA,gCAMc,ClBqJG,AkBrJjB,AkCiGA,A9BjQA,CJgKmB,IAAI,GAAA,2BAEJ,IACJ,CkCiGf,A7CvOA,AJ2HA,AeWA,AfXA,CiD4GA,A7CvOA,AJ2HA,AeWA,CAAA,AkCiGA,AjD5GA,CeWA,AXtIA,A6CuOA,ClCjGA,AkCiGwB,A7CvOxB,AJ2HA,6BeegB,CXjIhB,Ae7BA,AtBqTA,AkBvJA,AfVA,EIvHA,CAAA,0CW8JU,CIrKV,AJqKA,AkCwFA,CAAA,A9B7PA,AJqKA,AkCwFA,C9B7PA,A8B6PA,AlCxFA,CAAA,AkCwFA,A9B7PA,A8B6PA,ClCxFA,AIrKe,A8B6Pf,kElCnFc,CIxKd,AnB4JA,AHiKA,AoDhEA,A9B7PA,YAAA,CAAA,CAAA,CAAA,EJwKgD,CAAhD,AIxK6C,CJwK7C,KAAuD,mBAED,CfbtD,CeYA,AfZA,AAA4D,CeY5D,AfZA,CAAA,CAAA,CAA2D,CAAC,SeelD,WAC6B,CIxKvC,A8B4PA,AlCpFA,CAAA,AIxKA,AJwKuD,AkCoFvD,ClCpFA,AkCoFA,A9B5PA,CJwKA,AIxKA,A8B4PA,CAAA,A9B5PA,AJwKA,CkCoFA,A9B5PA,AJwKA,CkCoFA,AlCpFA,AIxKA,CAA2D,A8B4P3D,AlCpFA,CAAA,sCAOmB,CkCiFnB,ApDkEA,AGnKA,AegBA,CfhBA,AegBA,AlBmJA,CAAA,CkBnJuB,ClBmJvB,AoDlEA,AlCjFA,AfhBA,CegBA,AfhBqB,AHmKrB,4BkBhJA,CI1KA,AtB4TA,CAAA,AsB5ToC,aJ6KrB,WAAE,CAAA,CAAA,CAAA,gBAEA,CACX,CkCgFoB,AlClF1B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAEoB,CAFpB,CAAA,CAAA,CAAA,CAAA,CAE0B,SACpB,CAHN,CAAA,AAGgB,CAHhB,CAAA,AAGkB,CAHlB,CAAA,EAAA,QAIM,CAJN,CAAA,AAImB,CAJnB,CAAA,AAIqB,CAJr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yC1dA,ApD6BA,AW6bA,CX7bA,AoD7BA,AzC0dA,CX7bA,AoD7BA,AzC0dA,CX7bA,AoD5B+B,CzCyd/B,GOnjBgD,ClBwHhD,AkBxHA,ClBwHA,AkBxHA,ClBwHA,AkBxHA,ClBwHA,AkBxHA,CAAA,AlBwHA,CkBxHsD,AlBwHtD,EkBxHwD,8BAId,ClBuH1C,AO3RA,CAAA,AP2RA,CO3RA,CP2RA,CO3RA,CAAA,AP2RA,CAAA,AO3RA,CAAA,AP2RA,CAAA,CAAA,AO3RA,CP2RA,AO3RA,CP2RA,AO3RA,CWqK4B,AXrK5B,AP2RA,CAAA,AO3RA,AWqKA,AkC+FA,ApDwBA,CkBvHA,AkC+FA,ApDuBA,AACA,AO3RA,CAAA,AWoKA,AXrKA,AP4RA,AoDxBA,C7CpQA,AP2RA,AoDvBA,AlC/FA,AXpKA,CP0RA,AO3RA,AACA,CP0RA,CO3RA,AP2RA,CO3RA,AP2RA,CO3RA,AP2RA,CAAA,AO3RA,CP2RA,AO3RA,CAAA,CP2RA,CAAA,AO3RA,CAAA,AP2RA,CO3RA,AP2RA,CO3RA,CP2RA,AO3RA,CP2RA,AO3RA,CAAA,CAAA,AP2RA,CAAA,AO3RA,CP2RA,AO3RA,+FWmL+B,CAAC,CADhC,AkCiGA,A7CtQA,CAAA,A6CsQA,AlCjGA,AACuC,CADvC,AkCiGA,A7CtQA,A6CsQA,AlCjGA,CkCiGA,AlCjGA,CkCiGA,AlCjGA,CAAA,EAC+C,CkCgG/C,AlCjGA,CkCiGA,AlCjGA,AACsD,CADtD,AkCiGA,AlCjGA,CAAA,AkCiGA,AlCjGA,CkCiGA,AlCjGA,CACqD,AkCgGrD,ClCjGA,OAMqC,CXzKrC,AJuJwC,AiD+GxC,AlC7FuC,CXzKvC,AWyKA,CkC6FA,A7CtQA,AWyKA,CAAA,AkC6FA,A7CtQA,CWyKA,AkC6FA,A7CtQA,CWyKA,AkC6FA,A7CtQA,CWyKA,AXzKA,C6CsQA,AlC7F8C,CXzK9C,A6CsQA,AlC7FgD,CkC6FhD,AlC7FA,CkC6FA,A7CtQA,CAAA,AWyKmD,CXzKnD,CAAA,A6CsQA,A7CtQA,AWyKA,CXzKA,A6CsQA,AlC7FA,CXzKA,A6CsQA,AlC7FA,CkC6FA,AlC7FA,AXzKA,CAAA,A6CsQA,AlC7FA,CXzKA,AWyKA,CkC6FA,A7CtQA,AWyK6D,CkC6F7D,AlC7FA,CXzKA,A6CsQA,AlC7F+D,CAA/D,AkC6FA,A7CtQA,C6CsQA,A7CtQA,gFW8KiD,CAAjD,CkC6FA,AlC7FA,AAAiE,CAAjE,AkC6FA,ClC7FA,AkC6FA,CAAA,AlC7FA,CkC6FA,AlC7FA,CAAA,CAAA,AkC6FA,AlC7FuE,CAAvE,AkC6FA,AlC7FA,CkC6FA,AlC7FA,AAAyE,CAAzE,AkC6FA,AlC7F0E,AACxE,CADF,AkC6FA,CAAA,AlC7FA,CkC6FA,AlC7FA,CkC6FA,AlC7FgE,+BAUtD,CAAV,CAAA,CAAA,mBAAA,CACuB,CACnB,CX5KJ,AW0KA,AX1KA,CAAA,AW0KA,AAGI,CX7KJ,AW0KA,AX1KA,AW0KA,AAGkC,CAHlC,AX1KA,AW0KA,AX1KA,CW0KA,AX1KA,AW8KoC,CAJpC,AX1KA,AW0KA,AX1KA,CW0KA,AX1KA,CW0KA,AX1KA,CAAA,AW0KA,AX1KA,CAAA,AW0KA,AX1KA,CAAA,AWgLsC,Cf3BtC,AInJA,AW8KA,AlByGA,COzRA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MJqJA,Ie4BU,CAAC,CX9KX,AJmJA,Ae2BA,Cf3BA,Ae2BA,CX9KA,AJmJA,Ae2BA,CAAA,Af3BA,AInJA,CAAA,AW8KA,CX9KA,AW8KA,Af3BA,CAAA,Ae2BA,CX9KA,AW8KA,CAAA,AX9KA,AJmJA,CInJA,AW8KA,Af3BA,CAAA,AInJA,AW8KA,CAAA,Af3BA,AInJA,CJmJA,AInJA,AW8KA,CAAA,Af3BA,AInJA,CW8KA,Af3BA,CInJA,AW8KA,Cf3BA,AInJA,AW8KA,CAA6B,Cf3B7B,Ae2BA,AX9KA,CJmJA,CInJA,CJmJA,AInJA,CAAA,AJmJA,CInJA,AJmJA,EInJA,AJmJA,CAAA,AInJA,CAAA,CAAA,AJmJA,AeyCU,CfzCV,AHsIA,AoDfA,CjDvHA,AInJA,CAAA,AJmJA,CAAA,AInJA,CJmJA,CInJA,AJmJA,CInJA,CAAA,AJmJA,CInJA,AJmJA,CAAA,AInJA,CJmJA,AInJA,E6C0QA,ClC9EuB,aAAE,CkC8EzB,AlC9EA,AlB6FA,CAAA,AkB7FA,AlB6FA,AoDfA,ClC9EA,AkC8EA,CAAiC,AlC9EjC,AlB6FA,YAAA,CAAA,CAAA,wBAAA,CAAA,CAAA,CAAA,IAAA,CkB5FW,eAAe,CAAC,CAD3B,CAAA,CAAA,APiiBA,COjiBA,CACgC,AAEN,CAFO,AAEjC,AkCkFA,ElClF2C,CkCkF3C,AlClFA,CkCkFA,AlClFA,CkCkFA,AlClFA,CkCkFA,AlClFA,CkCkFA,AlClFgD,0BAK3B,CfpCrB,AH+HA,sCkB1FgD,CAAhD,AfpCA,CeoCA,AfpCA,CeoCA,CAAoD,CfpCpD,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CeuC0B,CAA1B,CAAA,CAAA,CAA8B,CAAC,CAA/B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAiD,CAAC,CAAlD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAgE,CAAC,6EAMjC,CfrCS,AesCzC,AADA,CfrCA,AeqCA,AACW,AfrCX,CeoCA,CAAA,AfrCA,CeqCA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAA6C,KAOrC,CAAR,AkCkFA,QlClFA,EAA6B,CkCkF7B,AlClFA,CAAA,AkCkFA,CAAA,AlClFA,CkCkFA,AlClFA,MACiB,IAAI,CAArB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAA+B,CAAoB,AAAC,CAApD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAA4D,EAAE,CAA9D,EAAA,mCAGmC,CAAA,IAAA,CAAA,GACnB,CAAhB,APiiBA,ARtjBA,CeqBA,APiiBA,ARtjBA,CeqBA,AfrBA,CeqBA,APiiBA,CRtjBA,AeqBA,IAA0B,EAAS,CAAnC,CfrBA,AeqBA,CAAA,AfrBA,CeqBA,CfrBA,AeqBA,CAAA,CAAA,CAA2C,CAAC,CAA5C,CAAA,CAAA,CAAgD,CAAC,CAAjD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAyD,CAAC,QACpB,IAAA,CAAA,KAG1B,CPiiBO,AOjiBnB,AlBsGA,CAAA,AoDbA,AlCzFA,CkCyFA,ApDaA,CAAA,EAAA,uBkBpG8B,CAA9B,AkCwFA,AjDrGA,CAAA,AiDqGA,CjDrGA,AeaiC,CkCwFjC,AjDrGA,AeaA,CfbA,AiDqGA,ClCxFA,AfbA,AiDqGA,CjDrGA,CiDqGA,AjDrGA,UecsC,CAAtC,CAAwC,CAC1B,EAAA,uBAIwB,CAAtC,EACc,CkCsFd,AlCtFA,CAAmB,AkCsFnB,AlCtFA,CkCsFA,AlCtFA,CkCsFA,AlCtFA,CkCsFA,AlCtFmB,IAAnB,MAA8B,CAA9B,CAAA,AAEU,CAFV,CAAA,CAKQ,AALR,CAAA,AAKA,AkCqFA,AjDtGA,CeYA,AkC0FA,AjDtGA,CeYA,AkC0Fa,AlCrFb,AfjBA,CeYuC,UApBJ,CfQnC,AHqFA,EGrFA,AHqFA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CkBnE2C,AlBmE3C,CkBnEA,AlBmEA,CkBnEA,CAAA,AlBmEA,CkBnEA,AlBmEA,CkBnEA,AlBmEA,CkBnEA,CAAA,AlBmEA,CkBnEA,AlBmEA,CkBnEA,AlBmEA,CoDsBA,AlCzFA,AlBmEA,CkBnEsD,CAAC,AlBmEvD,CAAA,CkBhEkB,AlBgElB,CoDqBA,AlCrFA,AflBA,AHkFA,CGlFA,AekBA,AkCqFA,AlCrF0C,AlBgE1C,CkBhEA,AlBgEA,CkBhEA,AlBgEA,CkBhEA,AlBgEA,CAAA,AkBhEA,ClBgEA,CAAA,AkBhEgD,CAAC,CAAjD,AlBgEA,CAAA,AkBhEA,AAAqE,ClBgErE,AkBhEA,ClBgEA,AkBhE4E,AAA5E,CAAA,AlBgEA,AkBhE6E,CAA7E,AkCsFA,ClCtFA,AlBgEA,AkBhEA,CAAA,AlBgEA,AkBhEA,CAAA,AlBgEA,CAAA,AkBhEA,CAAA,ClBgEA,AkBhEA,ClBgEA,AkBhEA,ClBgEA,AkBhEA,CAAA,CAAA,AkCsFA,ApDtBA,CkBhEA,AlBgEA,CkBhEmE,AlBgEnE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OkB7D+B,CAA/B,CAAA,AXzLA,CWyLuC,AXzLvC,AWyLA,CAAA,AXzLA,AWyLA,CXzLA,AWyLA,AAA6C,AAA7C,CAAA,AXzLA,AWyLA,AXzLA,AWyLA,AXzLA,CAAA,AWyL2C,AAAL,AAAtC,AXzLA,AWyLwD,AXzLxD,CAAA,AWyLA,AXzLA,AWyLA,CXzLA,AWyLA,CXzLA,AWyLA,AXzLA,AWyLwE,CAAxE,AXzLA,CWyLA,AXzLA,CAAA,AWyLA,CXzLA,AWyLsD,AAAsB,CAC9D,CADd,CAAA,AAEc,CAFd,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACyB,IADzB,AAEsB,EAAC,CAFvB,EAE0B,CAF1B,EAAA,kBAO0C,CftB5B,AesBd,CAAA,IAAA,CAAA,EAAA,MAGc,CX5Ld,A6CkRA,AlCtFA,CX5LA,A6CkRA,C7ClRA,AW4LA,AkCsFA,AlCnFgC,EAAA,YAAhC,CAA+D,CAAA,EAAA,EAAA,KAAA,AAC1C,IAAA,CAAA,EAAA,EAAA,WAAA,EAAA,WACmB,CkCyFxC,AlCzFA,CkCyFA,AlCzFA,AAA8C,AkCyF9C,ClCzFA,CkCyFA,ClCxFqD,AkCwFrD,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,AlCrFgB,CkCyFO,AlCzFvB,AX5LA,C6CiRA,Q7CjRA,CAAA,GAAA,EAAA,EAAA,GW4LsE,CX5LtE,AW4LA,CX5LA,AW4LA,CAAA,CAA0E,CAC9D,CADZ,CAAA,AX5LA,AWgMM,CXhMN,AW4LA,AkC2FA,C7CvRA,AW4LA,CX5LA,AW4LA,CX5LA,AW4LA,GAIe,EAAO,CkCwFtB,CAAA,EAAA,alCvF2B,CAA3B,AX9LA,CAAA,AW8LA,CX9LA,AW8LA,CX9LA,AW8LA,CX9LA,AW8LA,CAAA,AX9LA,CAAA,AW8LA,CAAA,AX9LA,CAAoC,AW8LpC,GAAA,AAAqC,EAAA,IAAO,CAA5C,CAAA,CAAA,CAAA,CAAiD,CAAC,mBAGzB,CAAzB,AX7LA,A6CwRA,CAAA,EAAA,AlC3F2B,EAAC,CX7L5B,A6CwRA,UlCxFI,CAAJ,EAAQ,CAAR,CAAA,AAAqB,CAArB,AX9LA,A6CwRA,AlCzFM,CX/LN,A6CwRA,AlCzFA,CX/LA,A6CwRA,AlCzFA,CkCyFA,A7CxR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,CXjNA,AWiNA,CXjNA,AWiNA,CXjNA,AWiNA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAoC,WAEpC,EACY,CACE,CX/Md,AW+MA,CX/MA,AW+MA,CX/MA,AW+MA,CAAA,AX/MA,CAAA,AW+MA,CAAA,AX/M8B,IAAA,EW+ME,CAAhC,AX/MA,CW+MA,AX/MA,EW+MA,CAAA,WAAoD,QACtC,ClBkFd,AkBlFA,OAAA,CAAA,gBAC6B,EAAc,CAA3C,CAAA,CAAA,CAAA,CAAgD,CAClC,CX3Md,AW2MA,CAAA,CX3MA,AW2MA,CX3MA,AW2MA,IAAuB,CAAA,EAAQ,CAA/B,AX3MA,CW2MA,AX3MA,CAAA,AW2MA,CAAmC,CX3MnC,CAAA,CWgOQ,CXhOR,AWgOA,CXhOA,AWgOA,CXhOA,AWgOA,EXhOA,CAAA,CAAA,AWmNY,CXnNZ,AAQA,AW2MA,CXnNA,AAQA,AW2MA,CXnNA,CAAA,AWoN8B,CXpN9B,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CWqNY,AXrNZ,CAUA,AP+RA,AkBpFA,AXrNA,CPySA,AkBpFA,AAAgB,AXrNhB,CPySA,AO/RA,AW2MA,CAAA,AlBoFA,AO/RA,CW2MA,AlBoFA,AO/RA,CAAA,CW2MuB,CX3MvB,AP+RA,AkBpFA,CX3MA,AW2MA,GAA4B,CX3M5B,AP+RA,AkBpFsC,CX3MtC,AP+RA,AkBnFY,ClBmFZ,AO/RA,APkSA,AkBtFA,CX5MA,AP+RA,AAGA,AkBtFA,AAAgB,ClBmFhB,AO/RA,APkSA,AkBtFA,ClBsFA,AkBtFA,AlBmFA,AO/RA,CW4MA,AX5MA,AP+RA,CO/RA,APkSA,AkBtFA,AlBmFA,CkBnFA,AlBmFA,AO/RA,APkSA,CAAA,AkBtFA,AX5MA,AP+RA,CkBnFA,EAAA,CAA4B,CAA5B,AlBsFA,CAAA,AkBtFA,CAAA,AlBsFA,CkBtFA,AlBsFA,CAAmC,AkBtFnC,CAAA,GAE8B,CAA9B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAsC,EAAE,CAA1B,CAAd,CAAA,oBAEA,gBAAoB,ClBqFpB,AkBrFA,ClBqFA,AkBrFA,CAAA,MAAA,EACc,ClBqFd,AkBrFA,CAAA,CAAiB,AlBqFjB,AkBrFkB,CAAlB,AlBqFA,YkBrFA,CAAkC,ClBqFlC,AkBrFA,ClBqFA,AkBrFA,AAAgD,ClBqFhD,AkBrFA,AlBqFA,AkBrFA,ClBqFA,AkBrFA,ClBqFA,AkBrFA,AlBqFA,AkBrFA,CAAA,CAAA,AlBqFA,AkBrFA,AAAqD,ClBqFrD,AkBrFA,AlBqFA,CkBrFA,AlBqFA,CkBrFA,AlBqFA,CkBhFe,AlBgFf,AkBrFA,AlBqFA,CkBhFA,AlBgFA,AkBrFA,AlBqFA,AkB/EM,AlBmFN,CkBzF+C,AAMxC,AlBmFP,AkBpFA,ClBgFA,AkB/EQ,AlBmFR,AkBpFkB,CACV,AlB+ER,AkB/EQ,AlBmFR,CkBnFQ,AlB+ER,AAIA,CAJA,AAIA,CkBlFM,AlB8EN,CkB/EA,AlBmFA,CkBnFA,AlBmFA,AAJA,AkB/EA,CAAA,AlB+EA,AAIA,CAAA,AAJA,CAIA,AAJA,CAAA,AAIA,CAJA,AAIA,CAJA,CAIA,CAJA,AAIA,CAAA,AAJA,CkB9EgB,AADhB,AlBmFA,CAAA,CkBlFiB,AAAC,AlBkFlB,CACA,AkBpFA,AlBmFA,CACA,AkBpFA,AlBmFA,CkBnFA,ClBoFA,AkBpFA,AAGQ,AlBgFR,CACA,AkBnFuB,AlBkFvB,AkBhFA,ElBiFA,AADA,AkBhFA,AAFyB,ClBmFzB,AkBpFA,AlBmFA,CAAA,CkBhFyB,AAHzB,AlBoFA,CAEA,AkBnFA,AlBiFA,AADA,CkBhFmC,AlBgFnC,AAGA,AkBnFA,AlBiFA,CAEA,AkBnFA,AlBmFA,AkBnFA,AlBiFA,CAAA,AAEA,AkBnFA,AlBgFA,CACA,AAEA,AkBnFA,AlBmFA,AkBnFA,AlBgFA,CAGA,AkBnFA,AlBiFA,AkBjFA,AlBgFA,CAGA,AkBnFA,AlBiFA,AAEA,AAHA,AkBhFA,CAAA,AlBmFA,AAFA,AkBjFA,AlBgFA,CAGA,AkBnFA,AlBmFA,AkBnFkC,AlBgFlC,CAGA,AkBnFA,AlBiFA,AADA,CkBhFA,AlBiFA,AADA,AAGA,CAAA,AkBnFA,AlBiFA,AADA,CAGA,AkBnFA,AlBiFA,CkBjFA,AlBgFA,CkBhFA,AlBiFA,AADA,CACA,AADA,CkBhFoE,CAApE,AlBmFA,AAFA,AADA,CkBhFA,AlBmFA,AAFA,AADA,CACA,AkBjFA,AlBgFA,AAGA,CAAA,AkBnFA,AlBgFA,CAGA,AkBnFA,AlBiFA,AADA,CAGA,AkBnF0E,AlBiF1E,AADA,CAGA,AAFA,AADA,CkBhF4E,AlBiF5E,AADA,CAAA,AkBhFoD,AlBmFpD,AAFA,CADA,AAGA,AkBnFA,AlBmFA,CAFA,AAEA,AkBhFU,AlBgFV,AkBnFA,ClBmFA,AkBhFA,AlB8EA,AAEA,AkBnFA,AlBgFA,CAGA,AkBhFA,AlB8EA,AAEA,AkBnFA,AlBgFA,CACA,AAEA,AkBnFA,AAGA,AlB6EA,CkB7EA,AlBgFA,AkBnFA,AlBiFA,AADA,CACA,AkBjFA,AlBgFA,CAGA,AkBnFA,AlBgFA,AkB/EU,ClBkFV,AkBlFA,AlB+EA,AkBhFA,AlBoFA,AAHA,CkBjFA,AlBmFA,AAFA,AkBhFA,AAAoB,CAApB,AlBkFA,AACA,AkBnFA,AlBmFA,CkBnFA,AlBkFA,AkBnFA,AlBoFA,AkBnFA,AlBgFA,CkBhFA,AlBgFA,AAEA,AkBnFA,AlBoFA,AkBnFA,ClBgFA,AAGA,AADA,AACA,AkBnFA,AADA,AACA,ClBgFA,AAGA,AkBnFA,AlBmFA,AkBnFA,ClBmFA,AkBnFA,AlBgFA,AAGA,CkBnFA,AlBgFA,AkBhFmB,ClBmFnB,AkBnFA,AlBgFA,CAGA,AkBnFA,AlBgFA,CAAA,AkBhFA,AlBmFA,CAHA,AAGA,AkBnFA,ClBgFA,AkBhFA,AlBmFA,CAAA,AkBnFA,ClBgFA,AkBhFkC,ClBgFlC,AAGA,AkBnFA,ClBmFA,AkBnFoC,CAC1B,AlBkFV,CAAA,AkBlFA,AlBmFA,CkBnFA,AlBmFA,AADA,CkBlF4B,AlBmF5B,AkBnFA,AlBkFA,CACA,AkBnFA,AlBkFA,CACA,AkBnFA,AlBkFA,CACA,AkBnFA,AlBkFA,CkBlFA,AlBkFA,AACe,CADf,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CkBlF2B,OAAsB,AACjC,CADhB,AlBmFA,AkBlFA,ClBkFA,AkBnFmD,AACnD,AAGQ,ClB+ER,AkBlFA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AgD,AAAhD,CAAA,CAAA,AAAwD,AAAxD,CAAA,CAAA,CAAA,AAA2D,CAA3D,AAA4D,CAA5D,AAAuD,AAAvD,CAAA,AAA8D,CAAG,AAAjE,AAA+D,CAEnD,CAFZ,CAAA,CACY,CAAZ,CAAA,AAAoB,CAApB,CAAA,CAAA,AAAuB,CAAC,AAAxB,CAAA,AAAmB,CAAO,CAAC,AACX,ClBqDhB,AkBrDA,ClBqDA,AkBrDA,ClBqDA,AkBrDA,AAIc,ClBiDd,AkBrDA,AlBkEA,AkB9DA,ClB8DA,AAbA,AkBrDA,AAIA,AAAkC,ClBiDlC,AkBrDA,AlBkEA,AkB9DA,ClBiDA,AAaA,AkB9DA,AAJA,CAAA,AlBkEA,AkB9DA,AlBiDA,AkBjDA,ClBiDA,AkBjDA,AlB8DA,AkB9DA,AAJA,CAIA,AlBiDA,AkBrDA,AlBkEA,AkB9DA,CAJA,AAIwC,AlBiDxC,AAaA,AkB9DA,CAAyC,AlBiDzC,AkBrDA,AAIA,CAAA,AlBiDA,AAaA,AkB9DA,AAJA,CAI2C,AAA3C,CAA4C,AAE9B,AAFd,ClB+DA,AkB7DA,AAFA,ClB+DA,AkB7DA,AAFA,CAAA,AlB+DA,CkB/DA,AAEkB,CAAlB,AAFA,AlB+DA,CAAA,AkB7DA,AAFA,AAK2D,CAL1B,AAEjC,AlB6DA,AkB7DA,CAIgB,AAJhB,AlB6DA,AkB7DA,AlB6DA,CAAA,AkB7DA,AlB6DA,AkB7DA,AlB6DA,CAAA,AkBzDkB,AACF,AALhB,CAAA,AlB6DA,AkB7DA,ClB6DA,AkB7DA,AlB6DA,AkBvDgB,AANhB,AlB6DA,CAAA,AkB7DA,AlB6DA,AkB7DA,AlB6DA,AkB7DA,CAAA,AlB6DA,AkBxDoB,AlBwDpB,AkB7DA,AlB6DA,CAAA,AkB7DA,AA4Bc,ClBmDd,AkBnDA,AA5BA,AlB6DA,AkB7DA,ClB6DA,AkB7DA,AlB6DA,CkB7DA,AlB6DA,CAAA,AkB7DA,AlB6DA,CkB1DyE,AlB0DzE,AkBvDwB,AlBuDxB,CkBpDA,AAFe,CAEc,AlBoD7B,CACA,AkBrDA,AlBoDA,CACA,AADA,AkBpDA,ClBoDA,AACA,AkBrDA,ClBoDA,AkBpDA,AAAiC,AlBqDjC,CADA,CAAA,CAAA,CAAA,EkBjDyB,ClBqDzB,AkBrDA,ClBqDA,AkBpDmB,ClBqDnB,AkBrDA,ClBqDA,AkBrDA,ClBqDA,AkBrDA,ClBqDA,AkBrDA,CAAA,AlBqDA,CkBrDA,AlBqDA,CkBrD0B,ClBqD1B,AkBrDA,ClBqDA,CAAA,CAAA,CAAA,EAAA,CAAA,CkBpDyB,ElBqDzB,CADA,CkB/CA,AlB+CA,CkB/CA,AlB+CA,CAAA,CAAA,CAAA,CkB/CkB,AlB+ClB,CAOA,AkBtDA,ClBsDA,AkBtDA,AlB+CA,CkB/CoC,AACpB,AlBqDhB,AkBtDA,AlB+CA,CAQA,AkBtDA,AlBqDA,AkBtDA,AlB+CA,CAOiC,AkBtDjC,AACA,AlBsDA,AkBtDuB,AlB8CvB,CkB9CA,AlBsDA,AARA,CAQA,AkBtDA,CAAA,AlBsDA,AkBtDuB,AlB8CvB,CkB9CuB,AlBsDvB,AkBtDA,AlB8CA,CAQA,AkBtDuB,AlB8CvB,CkB9CuB,AlB8CvB,CAAA,CAAA,CkBtCqB,AlBsCrB,CkBrCY,AlBkDZ,AkBnDA,AlBsCA,CAaA,AkBnDA,AlBqDA,AkBlDA,ClBgDA,AkBnDA,AlBqDA,AAfA,CAAA,AkBtCA,AlBmDA,CAAA,AkBnDA,AlBsCA,CAaA,AkBnD2B,ClBmD3B,AAbA,CAaA,AAbA,CAaA,AkB/Cc,AlBkCd,CAgBA,AkBnDA,AlBgDA,AAbA,CAgBA,AAhBA,AkBnCA,AlBgDA,CkBhDA,AlBmDA,AAHA,AkB9CyC,AlBiCzC,CAAA,AAa0C,AAI1C,AkBlDA,CAAA,AlBkDA,AAJ2C,AAb3C,CAiBA,AkBlDA,ClBkDA,AkBlDA,AlBiCA,CAiBA,AkBlDA,AlBiCA,CAAA,AAiBA,AkBlDA,ClBiCA,AkBjCA,ClBkDA,AAjBA,AkBjCA,CAAA,AlBiCA,AAiBA,CAjBA,AAiBA,AkBlDA,CAAA,AlBiCA,AAiBA,CAAA,AkBlDqD,ClBkDrD,CkBjDc,ClBiDd,AkBlDc,ClBkDd,AkBlDA,AlBkDA,CAAA,AkBlDgB,AAAC,AlBkDjB,CAAA,AkBlDA,ClBkDA,AkBlDA,ClBkDA,AkBlDA,AlBkDA,CAAA,AkBlDA,ClBkDA,AkBlDA,CAAA,AlBkDA,CAAA,AkBlDwB,ClBkDxB,AkBlDyB,ClBkDzB,AkBlDA,ClBkDA,AkBlDA,CAAA,ClBkDA,AkBlDA,ClBkDA,AkBlDA,CAAA,AlBkDA,CkBlDA,ClBkDA,AkBlDA,CAAA,AlBkDA,CAAA,AkBlDA,CAAA,EAKc,ClBmDd,AkBnDA,CAAA,AAAkC,AlBmDlC,CkBnDA,AlBmDA,AkBnDA,CAAA,AlBmDA,CkBnDqC,AlBmDrC,AkBnDA,CAAsC,AAAtC,ClBmDA,AkBnDA,AlBmDA,CAAA,AkBnDwC,AlBmDxC,AkBnDA,AlBmDA,CAAA,AkBnDA,ClBmDA,AkBnDA,ClBmDA,AkBnDA,CAAA,AAA4C,CAA5C,AlBmDA,AkBnDA,CAA8C,AAA9C,AlBmDA,CAAA,AkBnDA,ClBmDA,AkBnDA,ClBmDA,AkBnDA,CAAA,AlBmDA,CkBnDiC,AlBmDjC,IkBnDgD,CAAhD,AlBmDA,CAAA,AkBnDA,CAAA,ClBmDA,AkBnDA,ClBmDA,AkBnDA,ClBmDA,AkBnDA,ClBmDA,AkBnDA,AAA0D,CAA1D,AAAwD,AlBmDxD,AkBnDA,AlBmDA,CAAA,AkBnDA,AlBmDA,AkBnDgE,CAEtD,AlBiDV,AkBnDA,AlBmDA,AkBnDiE,ClBqDjE,AkBlDQ,AlBgDR,CAGA,AkBnDS,AlBgDT,AkB/CA,AlBiDA,CkBjDO,AlBkDP,AAHA,AAEA,CkBjDQ,AlBkDR,AAHA,CAAA,AAEA,CACA,AAHA,AAEA,CACA,AAHA,CAGA,AADA,CACA,AADA,CAAA,CACA,CAAA,AADA,AkB9CQ,ClB+CR,AkB/CA,AlB8CA,CAIA,AkBlDA,AAA4B,AlB8C5B,CACA,AAGA,AkBlDA,AlBkDA,AkBlDA,ClBkDA,AkBlDA,AlB8CA,AACA,AAGA,AkBlDA,ClBkDA,AkBlDA,AlB8CA,AkB9CA,AlB+CA,CAAA,AkB/CgC,AlB8ChC,AAIA,AkBlDA,ClBkDA,AAJA,AAIA,AkBlDA,AlB+CA,CAGA,AAHA,AkB9CM,AlB6CN,AkB9CA,ClBmDA,AkBlDA,AADA,AlBkDA,AAHA,CAAA,AADA,AAKA,AkBlDA,AAA0B,AAD1B,ClB+CA,AADA,AAKA,AkBlDA,AlBkDA,AkBlDA,AlBiDA,AkBlDA,ClB+CA,AADA,AAKA,AkBlDA,AlBkDA,AkBlDA,ClBkDA,AkBlDA,AlBkDA,AkBlDA,AlB8CA,AADA,CAKA,AkBlDA,AlBkDA,AkBlDA,AlB6CA,CkB7CA,AlBkDA,AkBlDA,AlB8CA,AADA,CAKA,AkBlDA,AlB8CA,AAIA,AALA,CAKA,AkBlDiC,AlB8CjC,AADA,AkB7CA,CAAkC,AlB8ClC,AADA,CkB7CmC,AlB8CnC,CAIA,AAJA,AADA,CAAA,EkB7CqC,AlB6CrC,CAAA,AkB7CuC,AAAvC,AlBkDA,CAAA,AALA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CkB7CyC,AlB6CzC,CkB7CA,AAAiD,AlBkDjD,AALA,CAKA,AkBlDA,ClBkDA,AkBlDA,AlB6CA,CAK+C,AAL/C,AkB7CA,ClB6CA,AkB7CA,ClB6CA,CAAA,AkB7CmD,ClB6CnD,AkB7CA,ClB6CA,AkB7CA,AAAyD,CAAzD,CAA2D,CAA3D,CACQ,CADR,GACQ,EAQI,IACE,AAAC,CAAf,AlB8CA,CAAA,AkB9CA,ClB8CA,AkB9CA,ClB8CA,AkB9CmB,AACP,ClB+CZ,AkB/CA,ClB+CA,AkB/CA,AAAmB,ClB+CnB,AkB/CA,AlB+CA,CkB/CqB,AlB+CrB,AkB/CsB,AlB+CtB,CAAA,AkB/CA,AlB+CA,AkB/CA,ClB+CA,AkB/CA,AlB+CA,CAAA,AkB/CA,CAAA,AlB+CA,AkBjD4B,CAE5B,AlB+CA,AAHA,CkB5CA,AlB4CA,CkB5CA,AlB+CA,AAHA,CAGA,AkB/CA,AlB4CA,CkB5CA,AlB4CA,CAGA,AkB/CA,AlB4CA,CAGA,AkB/CA,AlB4CA,CkB5CkC,AlB4ClC,CAAA,CAAA,AkB5CA,ClB+CA,AkB/CoC,AlB4CpC,CAGA,AkB7CU,ClB0CV,AAGA,AAEA,AkB/CA,CAAmB,AlB0CnB,AAGA,AkB7CA,AlB+CA,CkB/CA,AlB6CA,AAEA,AkB/CA,ClB+CA,AkB/CA,AAAkC,AlB0ClC,AAGA,AkB7CA,ClB6CA,AkB7CA,AlB0CA,AAKA,CkB/CA,AAAoC,AAAE,AlB6CtC,AAHA,CkB1CA,AlB0CA,AAKA,AkB/CA,CAAA,AlB+CA,AAFA,AkB7CA,AAA4C,AlB0C5C,CAGA,AkB7CA,CAAA,AlB6CA,AkB7C0C,AlB0C1C,AkB1CA,CAAA,AlB6CA,AkB7CA,AlB0CA,CkBtCY,AAJZ,AAIa,AlBsCb,AkB1CA,AlB6CA,CkB7CA,AAIA,AlB+CA,AkBnDA,CAAA,AlBmDA,AkB/CA,AlBsCA,AAGA,CkB7CA,AlB6CA,AkB7CA,AAIA,AlBsCA,CAAA,AASA,AkB/CA,AAA0C,AAJT,AlB6CjC,AkB7CoD,ClBmDpD,AkB/CA,AlB+CA,AkBnDqD,AlB0CrD,AAGA,CkBzCA,AlB+CA,AkB/CA,AlB+CA,AATA,CkBtCA,AlB+CA,AkB/CA,AlBsCA,AAGA,CkBzCA,AAA+B,AAAe,AlB+C9C,AANA,AAHA,CAAA,AASA,AkB/CA,AlByCA,AkBzCA,AlB+CA,CAAA,AkB/CA,AlByCA,AkBzCA,AlB+CA,CATA,AASA,AkB/CA,AlByCA,AAMA,AkB/CA,ClBsCA,AASA,AkB/CA,AlByCA,AkBxCU,AlB8CV,AkB/CA,ClByCA,AkBzCA,AlB+CA,AACA,AkB/CA,AADA,AlBsCA,CAGA,AAOA,AkB/CA,AAAmB,AlB8CnB,AATA,CkBtCA,AlByCA,AAOe,AkB/Cf,AlB+CA,AkBhDA,AlB+CA,AATA,AASA,CkB/CA,AlBsCA,AAUA,AkBhDA,AlB+CA,AACA,AADA,CAAA,AANA,AAOA,AACA,AkB/CA,AAFA,AlBsCA,CAGA,AAMA,AACA,AkB9CA,AlBoCA,CAWA,AARA,AkBvCA,AlBoCA,CkBpCA,AlB+CA,AARA,AAHA,CAGA,AAHA,AAWA,AkB/CA,ClBuCA,AAHA,AAWA,AkB/CA,ClBuCA,AAHA,AkBpCoB,ClB+CpB,AkB/CA,ClB+CA,CkB9Ca,ClB+Cb,AkB/CA,ClB8CA,AACA,AkB/CA,ClB8CA,AACA,AkB/CA,ClB8CA,AACA,AkB/CA,ClB+CA,AkB/CA,CAAmB,ElB+CnB,CADA,AACA,AkB/CoB,ClB8CpB,AkB3CA,AlB4CA,AkB/CA,CAGuB,AlB2CvB,AACA,CkB5CA,AlB8CA,AAHA,AACA,AkB/CA,ClBiDA,AkB9CA,AlB2CA,AACA,AkB/CA,ClBiDA,AkB9CA,AlB2CA,AACA,AkB/CA,CAGA,AlB8CA,AkB9CA,AlB2CA,AACA,AkB/CA,ClBiDA,AkB9C4B,AAH5B,AlB8CA,AACA,CADA,AAGA,AAFA,AkB/CA,ClB+CA,CADA,AACA,AkB/CA,CAIkB,AlB2ClB,AADA,CkB9CA,AlB+CA,AAGA,AkB9CA,AlB0CA,CAAA,AkB9CA,AlBkDA,AkB9CA,CAJA,AlB+CA,AADA,AkB1CqB,ClB0CrB,AACA,AkB/CA,AAIsB,ClB2CtB,AADA,AkB1CA,AAJA,CAAA,AlBkDA,AkB9CwB,AAAE,CAJ1B,AlB+CA,AADA,AAIA,AkB9CA,ClB2CA,AADA,AkB9CA,AAIA,AAEM,ClBwCN,AACA,AkB/CA,AAIA,AlB8CA,AkB5CO,CAFP,AlB8CA,AAJA,AACA,AkB/CA,AAMQ,ClBwCR,AACA,AAGA,AkB9CA,AAKQ,ClByCR,AkB9CyE,AlB2CzE,AkB/CA,AASA,ClByCA,AkB9C0E,AlB0C1E,AACA,AkBtCA,AATA,ClBkDA,AkBzCA,AlBqCA,AACA,AkB/CA,ClBkDA,AkBlDA,AlB8CA,CAIA,AAHA,AkB/CA,ClB+CA,AAGA,AAJA,AkB9CA,CAiBU,AlBiCV,AAJA,AkB9CA,AlB+CA,CkB9BW,AlBiCX,AAHA,AkB/CA,ClB8CA,AAIA,AAHA,AkB/CA,ClBkDA,AAHA,AkB/CA,AlB8CA,CAIA,AAJA,AACA,AkB/CA,ClBkDA,AAJA,AACA,AkB/CA,ClBkDA,AAHA,AkB9BW,AlB6BX,CACA,AAGA,AkBlDA,AAiBW,AlB6BX,CAIA,AAHA,AkB/CA,ClBkDA,AAHA,AADA,CAAA,AACA,AkB/CA,AlBkDA,CAHA,AkB/CA,AAS0B,AlByC1B,CAJA,AACA,AAQA,AkBvDA,AlBkDA,CAHA,AAQA,AATA,CACA,AkB/CA,AlB8CA,AASA,AALA,CAHA,AkB/CA,AlB8CA,AASA,AALA,CkBlDA,AlB+CA,AAQA,AALA,CAAA,AkBlDA,ClBuDA,AARA,AkB/CA,ClBkDA,AAKA,AARA,CAQA,AARA,AkB/CA,AlBkDA,CAHA,AkB/CA,ClB+CA,AkB/CuE,AlBkDvE,CkBjCiC,AlBiCjC,CkBjC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,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAA4D,CAA5D,aAGgC,ClBzBhC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CkB4BQ,ClB5BR,CAAA,CAAA,AkB4BY,ClB5BZ,CAAA,AkB4BiB,ClB5BjB,AAEA,AkB0BA,CAAA,ClB1BA,AkB0BA,AlB5BA,CAEA,AkB0BA,AlB5BA,CAAA,AAEA,AkB0BA,ClB5BA,AAEA,AkB0BA,ClB5BA,AkB4BA,CAAA,AlB5BA,CAAA,CAAA,AkB4B6B,ClB5B7B,AAEA,AkB0BA,ClB5BA,AkB4BA,AlB1BA,AkB2BU,CADV,AlBzBA,AkB0BA,ClB7BA,AAEA,AkB0BA,AACA,AlB1BA,CkByBA,AlB5BA,AAEA,AACA,AkB0BA,ClB3BA,AkB0BA,AlBzBA,AkB0BA,ClB3BA,AkB0BA,AlB5BA,AAGA,AkB0BA,ClB3BA,AkB0BA,AlB5BA,AAGA,CkByBA,AlB5BA,AAEA,AkB4BY,ClB9BZ,AAEA,AkB0BA,ClB5BA,AkB4BA,AlB1BA,CkB0BA,AlB1BA,CAAA,AkB0BA,AlB5BA,CAAA,CAAA,CAAA,EAAA,CAAA,AkB4BgD,AAE1B,ClB1BtB,AkB0BA,ClB5BA,AAEA,AkB0BA,AACY,ClB7BZ,AAEA,AkB0BA,AACA,AlB1BA,CAHA,AAEA,AkB0B0B,AlBzB1B,AkB0BA,ClB7BA,AAEA,AkB2BA,AlB1BA,CAHA,AAEA,AACA,AkB0BA,CAAA,AlB3BA,AAFA,AAGA,CAHA,AAGA,AkB0BA,ClB1BA,AkB0BA,ClB7BA,AAGA,AkB0BA,ClB1BA,AkB0BA,AlB7BA,CAAA,AAGA,AkB0BsB,ClB7BtB,AAGA,CAAA,AAHA,CAAA,CkB6BwB,AlB7BxB,CAAA,CAAA,AkB6BwB,ElB7BxB,CAAA,EAAA,CAAA,AkB6BwB,AAAM,ClB7B9B,CkB8Bc,ClB3Bd,AkB0BA,ClB1BuC,AkB0BvC,EAAA,EACmD,CADnD,CAAA,CAAA,CAAA,CAAA,CAAA,CAC0D,CAAC,CAC7C,CAFd,CAAA,CAAA,CAAA,AAIA,CAJA,AlBzBA,AkB6BW,CAJX,AlBzBA,AkBgCQ,CAPR,AAOA,CAPA,AAOA,CAPA,AAOA,CAPA,AAOA,CAPA,AAOA,CAAe,AAPf,CAAA,AAOiB,CAPjB,AAOA,CAL6B,AAK7B,CAPA,AAOA,CAL+B,AAK/B,CAJa,AAIb,CAAA,CAAA,CAAyB,EAAE,CAA3B,CAAA,AAAiC,CAAjC,CAA+B,AAA/B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAA2C,CAAE,CAA7C,CAAA,CAAA,CACM,AADN,AAAgE,CAAhE,CAAA,CAAA,CAAA,CAAA,AAGW,CAHX,AlB3BA,AkB8BA,CAHA,AlB3BA,AkB8BA,CAHA,AlB3BA,AkB8BA,CAAA,AAHA,AlB3BA,CkB8BA,AAHA,AlB3BA,CkB8BA,AlB9BA,AkB2B4D,CAG5D,AAHA,AlB3BA,CkB8BA,AlB9BA,CAAA,AkB8BA,ClB9BA,AkB8BA,CAAA,AlB9BA,CAAA,AkB8BuB,ClB9BvB,AkB+BQ,CAAR,CAAA,AlB7BA,CkB6BA,AlB7BA,CkB6BA,CAAA,CAAe,CACL,ClB5BV,AkB4BA,CAAA,AlB5BA,CAAA,AkB4BA,CAAA,AlB5BA,MkB4BoB,ClB5BpB,AkB4BA,ClB5BA,AkB4BA,CAAA,AlB5BA,CkB4BA,AlB5BA,CAAA,AkB4ByB,ClB5BzB,UkB6BsB,CAAtB,AlB5BA,CAAA,AkB4BA,ClB5BA,AkB4BA,ClB5BA,AkB4BA,ClB5BA,AkB4BA,GAAA,AAA4B,EAChB,EAAiB,ClB7B7B,AkB4BA,CAAA,AlB5BA,CAAA,AkB4BA,ClB5BA,AkB4BA,AAC0C,ClB7B1C,AkB4BA,ClB5BA,AkB4BA,AACwD,CADxD,ClB5BA,AkB4BA,ClB5BA,AkB6BsC,AADtC,CAAA,CAC6D,AAArB,AADxC,CAAA,AAC8D,CAD9D,AAEW,CAFX,CAAA,CAAA,CACuD,EAI5C,8BACH,CAAR,CAAA,CAAA,CAAA,CAAA,CAAe,CAAE,CAAjB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAyB,EAAE,CAA3B,CAAA,AAAiC,CAAjC,CAA+B,AAA/B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAA2C,CAAE,CAA7C,CAAA,CAAA,CAAA,AAAgE,CAAhE,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAA4D,CAA5D,UAMiB,CAAjB,AlB/BA,QkB+B2B,CAA3B,AlB/BA,CkB+BA,AlB/BA,CkB+BA,CAAA,AlB/BA,CkB+BgC,AlB/BhC,CAAA,ekB+BA,CAAqD,AlB/BrD,AkBgCI,CACF,ClBjCF,AkBkCA,ClBlCA,AkBoCA,CAAA,AlBpCA,CAAA,AkBoCA,ClBpCA,AkBoCA,CAAA,AlBpCA,CAAA,AkBoCA,ClBpCA,CAAA,CAAA,CAAA,AkBoCS,CAAT,CAAA,CAAA,CAAA,CAAA,AACE,CADF,AACA,CAAA,EAAM,CAAN,CAAA,CAAA,AAAqB,CAArB,AlBhCA,CAAA,AkBgCA,CAAA,AlBhCA,CkBgCA,AlBhCA,CkBgC0B,AlBhC1B,CAAA,CAAA,CAAA,AkBkCS,ClBlCT,AkBkCA,ClBlCA,AkBkCA,CAAA,AlBlCA,CAAA,CAAA,AkBkCA,ClBlCA,CAAA,CAAA,AkBkCA,AAAY,ClBlCZ,CAAA,AkBkCgB,ElBlChB,CAAA,CAAA,EAAA,CAAA,CAAA,AkBoCM,ClBpCN,AkBoCA,ClBpCA,AkBoCA,CAAA,CACI,AlBrCJ,CAAA,AkBqCK,ClBrCL,AkBsCI,ClBtCJ,AkBsCA,ClBtCA,AkBsCA,CAAA,ClBtCA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,AkBwCQ,ClBxCR,AkBuCA,ClBvCA,AkBuCA,CAAA,ClBvCA,AkBuCA,CAGO,AlB1CP,AkB2CI,AAJJ,ClBvCA,AkB4CA,AADK,CACF,AlB5CH,CkB6CA,AlB7CA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,kaWv9B2B,CAL3B,AAK+B,CAL/B,CAAA,cAMM,CANN,AAMoB,CANpB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAOM,CAPN,AAOoB,CAPpB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,YAQM,CARN,CAAA,AAQ+B,CAR/B,CAAA,AAQqC,CARrC,CAAA,CAAA,AAQoC,AARpC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAQ2D,YACrD,CAAU,AAThB,CAUM,AAVN,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAUc,aACR,CAAW,AAXjB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,AAYM,CAZN,AAYU,CAZV,CAAA,kBAaM,CAbN,CAAA,AAa2B,CAb3B,CAAA,CAAA,CAAA,AAa+B,CAb/B,AAasD,CAbtD,CAAA,AAcQ,AAdR,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,AAce,AAdf,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAaoD,CAbpD,mIAyB2B,UAAA,CAAA,IAAA,CAAA,IAAA,kBACL,KAAA,CAAA,IAAA,CAAA,IAAA,6LAKhB,IAAA,CAAA,wBAAA,CAAA,IAAA,CAAmC,CdxhBzC,AwCvCA,A5CdA,AkB6kBA,CdxhBA,AJrDA,A4CcA,A1B+jBA,CdxhBA,AwCvCA,A5CdwC,AkB6kBxC,CAAA,giBAmGe,CAAA,YAAA,CAAA,iBAAA,2CAQc,UAAA,yDAkBzB,IAAA,CAAA,YAAiB,CAAA,IAAA,EACnB,CAqBO,CAAT,UAAA,CAAA,CAAA,YAMY,CAAA,cAAA,CAAA,UAA0B,YAE1B,CAAC,cAAA,CAAA,UAEJ,CRneT,AmBjFA,EnBiFA,EQweW,IAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAYF,CWvjBT,AXujBA,KAAA,CAAA,CAAA,iCAMiC,ClBrlBjC,AJ2FA,A6BoDA,AoCCA,AnDhCA,WQseiC,CAAA,cAAA,CAAgB,CAAjD,ALvdA,CAAA,Ab9HA,AkBqlBA,GAAsD,CLvdtD,Ab9HA,AkBqlBwD,CAAxD,AlBrlBA,Aa8HA,CAAA,AKudA,6BAyDS,CAAT,MAAA,CAAA,CAAA,aASQ,ClB3mBR,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,8EkBooBkE,CR/hBlE,AQ+hBA,AyCrYA,A7CzOA,CI8mBA,AyCrYA,A7CzOA,AJ+EA,CiD0JA,A7CzOA,AJ+EA,AQ+hBA,KAA0E,CyCrY1E,AzCqY2E,CyCrY3E,AzCuYW,IAAA,CAAA,YAAiB,CAAC,MAAA,CACvB,CJhnBN,AlBkEA,AsB6iBA,AyCtYA,EzC8YA,UAKI,CW/nBJ,AX2nBA,AtB9iBA,CAAA,CsBojBI,IAAM,EAAA,CAAV,EAEI,EAAA,IAAA,CAAA,YAAA,CAAA,wBAAA,CAAA,wBAGM,EAAA,IAAA,CAAA,CAAA,EAAA,EAAA,GAAA,EAAA,GAAA,CAAA,CAEF,GAAA,CAAA,CACA,KAAA,IAAA,CAAA,YAAA,CAAA,aAAqC,CAAC,CO5f9C,AlByIA,AGxLA,AiDyJA,2CzCqZ+B,CWroB/B,AXqoBA,AXnXA,AGxLA,CHwLA,AGxLA,AmB1FA,AjCiFA,AsBojBA,CR3iBA,AHwLA,AXjMA,AsBojBA,CR3iBA,AdTA,AiCjFA,AXqoBA,CXnXA,AWmXA,AR3iBA,AmB1FA,CnB0FA,AdTA,AiCjFA,AXqoBA,AXnXA,KAAA,OWoXU,CWroBV,AXqoBA,AJznBA,AdDW,GkB4nBX,eAGuD,CAAvD,ALphBA,AjBlCA,AiCjFA,CAAA,AhBmHA,AjBlCA,AsBsjBA,KAAA,CtBtjBA,AsBsjBgE,AWvoBhE,CXwoBE,AtBvjBF,AsBsjBiE,AWvoBjE,CAAA,AjCiFA,+DsBmmBgC,SAAS,CAAC,EAAQ,CADlD,CAAA,CAAA,CAAA,CACuD,CADvD,CAC0D,CACpD,CAFN,CAAA,CAuBS,AAvBT,CAuBA,AAvBA,CAuBA,AAvBA,CAuBA,AAvBA,CAAA,CAAA,CAAA,CAEgB,CACX,MAoBL,CAAA,CAAA,OAMwB,CAAxB,CAAA,EAA4B,CAAC,CAA7B,CAAA,UAAyC,CAAC,WAAW,yEAKJ,CAAA,0BAwB/C,CAoCO,CAAT,YAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAOI,OAAA,IAAW,CAAA,KAAA,CAAA,YAAA,CAAA,eACe,CAD9B,AJntBA,AJsHA,CItHA,AImtBA,AR7lBA,EItHA,CAAA,SIotB4C,CAAC,EAAQ,CADrD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAC6D,CAD7D,CACgE,CAC1D,CAFN,CAAA,CAAA,AAUA,CAVA,CAAA,CAAA,CAAA,CAAA,CAAA,CAEgB,CACX,GAOL,CAAA,CAAA,kBAO2B,UAAA,CAAA,6DAGa,CAAxC,AJ5tBA,AJqHA,AiDgIA,A/D/KA,CAAA,AsBspB0C,AO1kB1C,Af7BA,AiDgIA,GzCwfS,cAIL,CAAA,CAAA,6FAKoC,CAAxC,CR9mBA,AQ8mB0C,CR9mB1C,EQonBS,CAAT,uBAAA,CAAA,CAAA,+GA2B0B,CXnd1B,AkBtHA,APykBA,COzkBA,AfbA,AHmIA,CWodO,CO1kBP,AfbA,AQulBA,AXpdA,CAAA,AkBtHA,AP0kBA,CRvlBA,AHmIA,CAAA,CkBtHA,CfbA,AHmIA,AkBrHA,AfbA,AIjJA,AIuuBA,GAAA,IACY,CAAC,CADb,AJvuBA,AJiJA,CIjJA,AIuuBA,CRtlBA,AIjJA,AIuuBA,CRtlBA,AIjJA,AIuuBA,CJvuBA,AIuuBA,ARtlBA,CQslBA,AJvuB2B,AJiJ3B,MQulByB,CAAA,UAAW,CAAC,sBAI9B,CXxbP,AsBzTA,AXivBA,CXxbA,AsBzTA,AXivBA,CXxbA,AG/JQ,AecA,AIxKR,AXivBA,COzkBQ,CAAA,IAAA,QPykBkB,CAA1B,AJzuBA,AWgKA,CAAA,APykBA,CAAA,CAA8B,IAAA,CAAA,mBAAA,CAAyB,CAAvD,AOzkBA,AXhKA,CAAA,AWgKA,APykBA,CAA0D,CAAC,GAAA,OAAA,IAAA,CAAA,IAAA,IAAA,CAAA,wBAAA,GAEzD,CAKF,YAAA,uBAE0B,GAAA,IACf,CAAA,IAAA,IAAA,CAAA,YAAA,CACe,CAD1B,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACoC,CAAC,iBACX,CO3kB1B,AkCiGyB,A9BjQzB,AX2uBA,ARvlBA,CQulBA,AO3kBwB,AIhKxB,OX8uBW,CAAA,IAAA,QAAA,GAAA,CAAmB,CJntB9B,AWuIA,AP4kBA,ARvlBA,GQulBkC,CAAC,CAAnC,AJntBA,CImtBA,ARvlBA,AI5HA,CJ4HA,AI5HA,AImtBA,CAAA,ARvlBA,AI5HA,eImtBsD,CAAC,CRvlBvD,AQulBA,CAAA,ARvlBA,CAAA,CAAA,AQulB4D,CAA5D,ARvlBA,CQulB8D,ARvlB9D,CQulBmE,ARvlBnE,CQulBgE,ARvlBhE,AQulBA,CAAqE,ARvlBrE,CAAA,AQulBA,CAAuE,ARvlBvE,CQulBwE,ARvlBxE,gBQ+lB4C,CAAA,CAExC,CAAJ,AO5kBA,AXhIA,CAAA,AI4sBA,CAAA,AO5kBA,AXhIA,SI2sBS,CAAT,AXtbA,AOtRA,kBAAA,CI4sB6B,CRnlB7B,AmBxJA,A8B+PA,ApDsDA,AWsbA,CJ5sBA,AI4sBA,AXtb6B,AoDtD7B,A9B/PA,EX2uBiC,CAAC,CW3uBlC,AX2uBA,AJ5sBA,AJyHA,AiDuGA,CAAA,AjDvGA,AmBxJA,Af+BA,AI4sBoC,CACzB,AyC7eX,AjDvGA,AmBxJA,Af+BA,AI4sBqC,CO3kBrC,AfRA,AiDuGA,A7ChOA,AACA,APsRA,AsBtTA,AX4uBA,CXtbA,AoDvDA,A9B/PA,Af+BA,AJyHA,AeQA,AXhIA,CehCA,AtBsTA,AkBtJA,AP4kBc,AJ5sBd,A6C+NA,A7ChOA,CACA,APsRA,AWsbA,ARplBqC,AmBxJrC,Af+BA,A6CgOqC,CzC8e/B,CO5kBN,AI9JA,AX0uBA,GAAA,CAAW,mBAAA,CAAA,IAA0B,CAAC,mBAAA,CAAoB,CW1uB1D,AJ8JA,AP4kBA,CW1uBA,AX0uBA,AO5kBA,CAAA,AP4kBA,AW1uBA,CJ8JA,AI9JA,AX0uBA,CO5kBA,AP4kBA,CAAgE,CACxD,GAAO,CO7kBf,CP4kBA,CAAA,CAAA,AACqB,CADrB,CACuB,CAGrB,AAFK,CW1uBP,EAAA,yBXovBQ,CAAC,CW5uBT,A8B6PA,A7C/NA,AI8sBA,kBAAA,CAAA,IAAA,CAAA,GACW,CJ9sBX,AI8sBA,AXvbM,AsBrTN,A8B6PA,C7C/NA,A6C+NA,A9B7PA,4BX6uBiC,CAAjC,AJ9sBA,Ce9BA,Af8BA,AI8sBA,CAAA,AJ9sBA,Ae9BA,CX4uBqC,CAAC,CAAtC,AW5uBA,Af8BuC,Ce9BvC,AX4uBA,AJ9sBwC,Ce9BxC,AX4uBA,CW5uBA,AX4uBA,CAAA,AW5uBA,CX4uBA,CAAA,AW5uBA,CAAA,AX4uBA,CW5uBA,AX4uBA,CAAA,CAAA,AW5uBA,CAAA,AX4uBA,CAAA,AW5uBA,CAAA,AX4uBA,CW5uBA,AX4u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A,AgDhDA,AGXA,CrC8FA,AiDsKA,AlCjIA,AZlBA,A4BmKA,AMpRA,AnD2DA,yE6CwOI,CG5QJ,AH4QA,MAAW,IAAA,CAAA,KAAA,CAAW,WAEd,CAAR,AZhQA,CeZA,AfYA,AYgQA,EAAA,EAAsB,EAAA,YAAA,CAAsC,iYzBteb,CAAA,EAAA,yNA8BF,wBAItB,CAAA,GAAA,CAAA,oHgDxCL,CjB9BlB,AlBkBA,AMTA,A5BGA,AqCDA,AiBEA,AIduD,AlECvD,A4DYA,A3CAuD,AhBDvD,AUAA,ARRA,AWIA,AYJA,AeEA,IwByBoB,CjB9BpB,AYeS,AEFT,AtDDA,A4BHA,AzBEA,ARRA,AiBJA,ApBCA,A6CWA,AfOA,AWbA,A3BEA,A+BIA,CGXA,APKA,AqBQA,AnDFA,ASZA,AyBYA,A1CRA,A0CQA,A7CXA,A0BUE,AZHF,ANKA,A4BHA,ANSA,CePA,CAAA,iToBmEyB,CAAA,6DAiDQ,EAO/B,C/BzDC,AsBqBA,A/CmDH,AF/DK,GAAA,EAAA,GAAA,G0DgD0D,wPlDvEjB,CeF9C,A9BjCA,AyC6B+C,AxCJ/C,Aa4EA,Ac/GA,AiBwCA,Ae0PA,ArDjRA,AUEA,AnBdA,AiBwC+C,iHAOG,CPmOlD,AwC1OA,A/BrBA,A2BSA,AWImD,AVSnD,A9BMA,uFAOM,CVsBN,CAAqD,uBUrBT,CAAC,C2BgJ7C,A/B1FA,AGiBA,ATjDqC,AuC/BrC,AoBbkD,AjDsBlD,CJsDA,sIInCuB,EAAA,sHAgBmB,KAAA,+DAIwB,CADlE,AP6PA,AqC1PA,kP9BiCyC,CAAzC,AVmCgD,AM0BhD,AkCjEA,CAAA,EAAA,CAAA,sD9BoB+C,UAAA,CAAA,4CAQwB,CdpBvE,AcoBA,CAAA,AdpBA,CAAA,AcoBA,CAAA,IAA+E,OACpC,yBAOV,UAAA,kCAKQ,CAAC,CDkG1C,AClGA,A6CsP+C,C7CtP/C,AdjBA,AciBA,ADkGA,GClGA,EAAA,UAAuE,CdjBvE,CckBU,CdlBV,EAAA,CAAA,CAAA,mDcuBoB,CAAC,CADrB,IAC0B,CAAC,CAD3B,CAAA,AAC6C,CAD7C,CAAA,CAAA,CAC2C,AAD3C,CAAA,CAAA,CAAA,CAAA,CACsD,CAAC,CAC9C,IAOiD,CAAA,CACxC,ClBkDlB,AgD3DA,AFrCA,AxBsmBA,qHJ3iBqC,ClB+CrC,AcqBA,AmB/DA,AkBxBA,AL1BA,2C5BmDe,QAAA,CAAA,SAAA,CAAA,AAC2B,CAL1C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAKmD,CADpC,OACI,CALnB,CAAA,AAKmD,CALnD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,WAWY,yBAIC,IAAA,CAAA,GAAkB,C2B0NG,AWvQE,AtC6CpC,AdjCA,AO+RA,AoDjBA,A/DtMA,A8CrFA,A7BsIA,CbzHA,A0CbmC,A9CqFnC,AkBvCA,A6C6OA,A9CrJA,ANsKA,CO9PA,AIkjBkB,AlBnlBlB,AO+RA,AMtKgC,AjBjDhC,A+DsMA,I7C7OA,CAAA,QACc,EAAY,GAAA,mCAGZ,EAAA,AACG,YADH,OACG,EAAA,EAAA,CAAA,CAAA,EACgB,CAFjC,CAAA,CAEuC,CAAD,AAFtC,CAAA,CAAA,CAAA,EAE6C,CAAE,CAF/C,CAAA,AAE2D,CAF3D,AAEiE,AAFjE,CAAA,AAEkE,AAFlE,CAAA,CAAA,AAE2E,AAAC,AAF5E,CAAA,AAE6E,AAF7E,CAAA,AAGW,AAHX,CAAA,CAAA,AAEyD,CAFzD,CAAA,oBAOqC,CAFrC,CAAA,AAEkD,CAFlD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAE+C,CAAC,uCAIlB,CAA9B,AdnCA,A6BiCA,AeXA,AhDgDA,A+DuMA,A9CjJA,CAAA,AgB3FA,AeXA,AhDgDA,AItEA,A2D6QA,A7C1OA,C6C0OA,A7C1OA,A8BbA,AfWA,A7BjCA,AJsEA,C+DuMA,A9B5OA,A7BjCA,AcmCA,ADyFA,CjBtDA,AItEA,A2D6QA,A7C1OA,A8BbA,AfWA,KAAA,CAAA,EAAA,iDfQ6B,IAAA,CAAA,EAAA,MAAwB,6BAM1B,ClBmC3B,AIrEA,CAAA,AJqEA,AiCjCA,iBfAiD,WAAW,OAAtB,CAAtC,A8BVA,A5CtBA,A6BkCA,A8B0OA,CAAA,A9B1OA,AeZA,A9BUA,AdhCkD,C6BkClD,A8B0OA,AftPA,A5CtBmD,AcgCnD,C6C4OA,A7C5OA,A8BVA,AfYA,CfF2C,C8BV3C,CfYA,AfFA,AAOoB,CAPpB,AeEA,AeZA,AnB2HA,AX1GA,A6CwOA,AlBqBiC,AZhQjC,CedA,AnB2HA,AXjHA,AeEA,AfKA,AeHA,AYgQkC,AkBrBlC,C7CxOA,AW0GA,AkC8HA,C9B3OA,A8B2OA,A7CxOA,C6CwOA,A9B3OA,AfGA,AW0GA,CAAA,AkC8HA,A9B3OA,AJ6GA,CAAA,cXtGiC,C8BfjC,AeuPA,A3D7QA,AyB+IA,AfjCA,AIzEA,CW0GA,AfjCA,AiD+JA,A3D7QA,AcqCA,A8BfA,C9BeA,AJyEA,AkCxFkD,A5CtBlD,A2D6QA,AlC9HA,CfjCA,AiD+JA,AfvPmD,A9BenD,AdrCA,OcsC2B,CDuF3B,A8CkJA,A7CzOA,AJ0EA,CAAA,AI1EA,A6CyOA,A/DxMA,AiBsDA,CCvFA,ADuFA,A8CkJA,AjD/JoC,AdzCpC,CAAA,AkBjCA,A6CyOA,A9ClJA,EAAA,OAAA,CAAA,GAAA,KCpFsB,C6CyOtB,A/DxMA,AkBjCA,AW2GA,Af9BA,mBI5EsC,CAAtC,AlBiCA,A6CsOA,AZzQA,CAAA,AjCmCA,A6CsOA,A3BvQA,ClBiCA,A6CsOA,AZzQA,AfEA,AlBiCA,A6CsOA,C7CtOA,AkBjCA,AeFA,AYyQA,AZzQA,AjCmCA,A6CsOA,C7CtOA,A6CsOA,AZzQA,AfEA,A2BuQA,A7CtOA,AiCnCA,CYyQA,AZzQA,AjCmCA,AkBjCA,A2BuQA,A7CtOA,CkBjCA,A2BuQA,C7CtOA,AkBjC8C,AeF9C,AYyQA,e3BpQyC,GAAA,KAAA,SAIE,CD+F3C,AC/FA,CAAA,A6C8OA,A9C/IA,C8C+IA,A7C9OA,AD+FA,SC/FuD,CAAC,OAAC,EAAO,CACxC,C6C8OxB,A7C9OA,C6C8OA,A7C9OA,C6C8OA,A7C9OA,C6C8OA,A7C9OA,C6C8OA,CAAA,C7C9OqC,CAArC,CAAA,CAAA,CAAyC,CAAC,CAA1C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAkD,CAAC,CAAnD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAA2D,CAAC,CAA5D,CAAA,CAAA,CAAA,CAAiE,CAAC,iBAOJ,CAA9D,CAAA,CAAA,CAAyC,AAAzC,CAAA,AlBgEA,AkBhEA,CAAA,AlBgEA,AkBhEA,CAAA,CAAA,AlBgEA,CAAA,AkBhEA,AAAuE,ClBgEvE,AkBhEA,CAAA,AlBgEA,AkBhEyE,ClBgEzE,AkBhEA,CAAA,AAUc,AlBsDd,CiCpDA,AJ8GA,A7BpD2B,AW2M3B,AXjNA,AkBhEA,CPiRA,AAKA,AOtRA,ClBgEA,AkBhEA,IPsRA,IOxQY,CeEZ,A7B3BA,AU6GA,AHoLA,AMxKA,AChGA,A6CiPA,C3D1QoB,A2D0QpB,AjD7JA,AHoLA,AsBtQA,AhB8FA,AChGA,CDgGA,ANwKA,AOxQA,AeEA,AnBkFA,WInEQ,YAXK,KAAK,CAAC,CDqGnB,AHjBA,AV5GA,A6B0BA,A8B+OA,A7CjPA,CAA2B,CeE3B,AhBmGA,A8C4IA,A7CjPA,MAGU,IAAA,YAAoB,QACb,CPyQjB,AXtMA,AkBnEA,AWqHA,AIpHA,A7B1BA,GOkSA,CAAA,EAAA,CAAA,KAAA,kBOvQ4B,CAAA,EAAA,iCAKpB,CAAA,CAEJ,mBAaA,CAAkB,CAClB,CAA0B,CAAA,kCAIP,IAAI,CAAA,aAAA,CAAA,EAAA,cACf,EAAA,GACS,EAAA,IAAA,CAAA,QAAA,CAAA,iBAAA,CAAA,sBACiC,OAAW,C6C8OjE,A7C9OA,AlBkEA,AiCxEA,AhB2GA,C8CyIA,A7C9OA,ADqGiE,AjBnCjE,CkBlEA,A6C8OA,A9BpPA,AjCyEkC,C+D2KlC,A9BpPA,SfQa,IAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAID,CAAC,EAAe,Cdd5B,A2D0PA,A9BpPA,AnByFA,AIjF8B,C6C4O9B,A3D1PqC,AU+FrC,AIjFA,oBASS,CAAT,KAAe,CAAA,CAAA,CAAA,CAAA,qBAEG,CWyHlB,AIpIA,AtBgRA,APlRA,AkB2mBqB,ARjhBrB,4CI3EsC,C6CyOtC,A9BpPA,AnByFA,AI9EA,AWyHA,CAAA,CAAA,EAAA,SAAA,CAAA,EXzHqE,KAAI,CAAC,4BAE9B,C6CyO5C,AzCiYA,AR5hBA,Ae2CA,AXzHA,APuQ+C,6DO/P5B,KAAA,CAAM,CW4HzB,AkC6GA,AjDxJA,AIjFA,C6CyOA,AjDxJA,Ae2CA,AX5HA,EAAA,CAAA,EAAA,SAAA,EAA0D,C6CyO1D,A7CzOA,AJiFA,CAAA,AiDwJA,A7CzOA,aAMS,CAAT,MAAA,oDAMU,EAAA,EAAA,QACN,IAAA,CAAA,YAAA,GAAA,OAAA,CAAA,4CACoD,CeZxD,AfYA,CeZA,AfY0D,CAAC,AeZ3D,efgBqB,MAAA,4DAOV,CeXX,A8BoPA,A7CzOA,AJqFA,Ae2CqB,AzB7HrB,GcHe,CAAC,CAAhB,AJqFA,AHmLA,AkBxIA,AI3IA,A7BcA,GAAA,CAAA,IcHyB,CAAC,AWgI1B,AkCyGA,A9BpPA,AtBmRA,APrQA,AJkEA,CkBrE2B,CeX3B,AjCgFA,A6B2DA,AkCyGA,A7CzOA,AJqFA,AVlFA,AOqQA,CoD/BA,A3DtOA,AyB6HA,Af3CA,AIrFA,KAAA,CAAmC,AAAC,IACxB,CAAD,EAAC,GAAA,IAAsB,CAAC,EAAS,CPwQ5C,AXnMqC,AcgBrC,Ae8CA,AXnIA,AdKA,A6BhB6C,MfWM,CPwQnD,AkBrIsD,AzB9HtD,AcLoD,OACjC,CAAC,C6CyOpB,APvRuB,AvBmCvB,AtBmRA,AkBrIA,AXnIA,CPwQA,AOxQA,A6CyOA,A9BpPA,CfWA,AWmIA,AI9IA,AtBmRA,AoD/BA,Q7CrOY,CAAA,OAAA,CAAQ,CAAA,GAAA,EAAA,CAAc,CJ2FlC,AH6KA,AOxQA,AlBqEA,QkBpEa,IAAI,CAAC,GAAA,OAAa,CAAC,AAAC,CPwQjC,AsB/QA,AjC4EA,AkBrEA,OACY,CAAC,KAAA,CAAA,EAAc,CAAI,CAAC,CAAhC,AlBqEA,A+DyKqC,ApD0BrC,COxQsD,CAAC,AlBqEvD,AkBpEM,ClBoE6B,AWmMnC,AkB3HA,AX5IO,CPuQP,IOrQQ,C6CkPR,A9BnPA,AnB6FA,AI5FA,CAAe,YAAA,CAAa,OAAO,CAAA,IAAK,CAAC,CPwQzC,AOxQA,AW8IA,CX9IA,APwQA,AkB1HA,IX9I+C,CAAE,CAAjD,APwQA,COxQA,EAAqD,CAAC,UAehD,CAAA,CAAA,QAEU,CAAA,CAAA,aACC,OAAO,CAAC,CPiQzB,AOjQA,AlB8DA,AiCzEA,AnB8GA,CInGA,AlB8DA,AsBwmBqB,AWjrBrB,AtB4QA,AOjQA,AJmGA,CInGA,CAAoC,IAAI,CAAC,OAAO,CAAC,CPiQjD,AOjQA,CPiQA,AOjQA,APiQA,COjQA,APiQA,EOjQ4D,CAAC,CAAI,CAAjE,AAAkE,CAAC,mBAItD,OAAO,CAAA,EAAA,CAAW,CAAC,AIqqBhC,ARvjBA,CI9GgC,KACpB,EAAQ,CJkHpB,AHgJA,AkB5HA,AXtIA,AIqqBA,AWhrBA,CfWsB,IAAA,CAAA,OAAY,CAAC,CAAnC,AJkHA,CIlHA,AJkHA,AQmjBA,AJrqBA,CJkHsC,AQmjBtC,AJrqBA,OACU,GAAQ,CIsqBlB,AyCnbA,AlC3GA,AlB8HA,AOtQA,AJoHA,CmB7HA,AJiJA,AP8hBA,AXhaA,AGlJA,AIpHA,CeTA,AJiJA,AP8hBA,AXhaA,AoDnBA,AjD/HA,AIpHA,IAAyB,IAAI,CAAC,CAA9B,AlBmEA,AciDA,AiD+HA,A9B5PA,CnB6HA,AiD+HA,A9B5PA,AfSA,CAAA,AJoHA,AiD+HA,A9B5PA,AjC4EA,IAAA,CkBnEsC,ClBmEtC,AiC5EA,A8B4PA,A7CnPA,CAA4C,AAA5C,A6CmPA,A/DhLA,AciDA,AmB7HA,CjC4EA,A+DgLA,AjD/HA,AmB7HA,AfSA,CJoHA,AiD+HA,A9B5PA,AfSA,AAEI,ClBiEJ,AiC5EA,AnB6HA,AiD+HA,A7CnPA,APwQA,AkB7Hc,C7BxEd,A+DgLA,A9B5PA,AnB6HA,AIpH4C,OAI1C,CAIO,CAAT,YAAsB,CW8ItB,AIxJA,A8B4PA,AjD7HA,AHiJA,AOtQA,CJqHA,AIrHA,AeVA,A8B4PA,ApDoBA,AkBxHA,AX9I4B,CJqH5B,AeyBA,AkCoGA,ApDoBA,AsBhRA,AJwJoB,AfzBF,AIrHlB,A6CkPA,A9B5PA,C8B4PA,A7ClPA,AeVA,AtBgRA,AkBxHA,AfzBA,CiD6HA,AlCpGkB,AfzBlB,AmB/HA,AtBgRA,COtQA,GAA6C,CeV7C,AnB+HA,AHiJA,AoDpBA,A7ClPA,QACI,OAAA,IAAW,CAAA,IAAK,CAAC,C6CkPrB,ApDoBA,AOtQA,AlBkEgB,AcmDhB,CAAA,AiD6HA,ApDoBA,AOtQA,AeVA,CAAA,AnB+HA,AiD6HA,ApDoBA,AOtQA,CPsQA,AGjJA,AiD6HA,A9B5PA,AfUA,CeVA,AnB+HA,AIrHA,A6CkPA,ApDoBA,CsBhRA,A8B4PA,A7ClPA,APsQA,AGjJA,CIrH4B,CPsQ5B,AoDpBA,A7ClP6B,AJqH7B,CIrH8B,OAAA,CAAQ,C6CkPtC,A9B5PA,AfUA,AJqHA,CHiJA,AsBhRA,AnB+HoC,AIrHpC,A6CkPA,G7ClP6C,C6CkP7C,AjD7HA,AIrH+C,CAA/C,AJqHA,AiD6HA,ApDoBA,CGjJ6C,AiD6H7C,A7ClPA,CACI,IAAA,YAAoB,GAClB,IAAA,CAAA,MAAW,CAAC,CeVlB,AnB+HA,AiD6HA,A7ClPA,APuQA,WOvQ8B,CAAA,GAKxB,OAAA,IAAA,CAAY,IAAI,CAAC,ClBsEvB,AcgDA,AHmJA,AOzQA,CJsHA,AdhDA,AWmMA,AOzQA,CAAA,AlBsE0B,AcgD1B,AHmJA,CGnJA,AHmJA,AOzQA,IAA+B,CAAC,ClBsEhC,AcgDA,AItHA,ClBsEA,AkBtEA,AJsHA,CdhDA,AcgDA,AItHA,cAAiD,EAAE,CAAnD,AlBsEA,MkBtE0D,CAAC,CAA3D,CAAA,AAA+D,CAAD,AAA9D,CAAA,CAAkE,CAAE,CAApE,CAAA,CAAuE,CAAC,MAUpE,CI6tBJ,AJ7tBA,AWkJA,CP2kBA,AJ7tBA,EAAU,EAAA,IAAA,CAAA,YAAA,0CAGW,CAAA,EAAA,YAIN,IAAA,CAAA,IAAA,CAAA,eAAA,CAA0B,CeXzC,AfWA,GAA8C,CeX9C,AfWA,CeXA,AfWA,CAAA,AeXA,CfWA,AeXA,CAAA,AfWA,CAAA,AeXA,CfWA,CAAsD,CAAtD,AeXA,CfWyD,AeXzD,AfWA,CAAyD,EAAA,CAAA,+BAM1B,IAAA,CAAA,6CAGF,CAA7B,AeTA,AX6uBA,GW7uBA,EfS2C,EAAA,MAAA,uBACG,CAA9C,CAAgD,CAAC,CAAC,QAGhD,sDASI,IAAA,EAAA,IAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,iBAEA,CAAN,EAAA,AAAU,CAAC,ClBkGX,AkBlGA,ClBkGA,AkBlGA,AlBkGA,OAAA,QkBhGsB,IAAA,IAAsC,KAGtD,CeZN,AnBqJA,AIzIA,CAAA,OAAA,CAAA,OACwB,C6C6PxB,A9BzQA,AfYA,CAAA,A6C6PA,A9BzQA,CfY2B,AeZ3B,iBfsBY,CIuuBG,AOzkBf,AfbA,AIjJA,CIuuBA,AOzkBA,AX9JA,CJiJA,AIjJA,gBACsB,CJiJtB,AQulB+B,AWnvB/B,AfWA,CAAA,AeXA,AnB4JA,CmB5JA,AnB4JA,AIjJyB,AAAE,CeX3B,AnB4JA,AIjJ0B,AeX1B,AfWA,CAAA,AJiJA,AmB5JA,CAAA,AnB4JA,AIjJA,CeXA,AfWA,GAAA,CAAA,YAC8B,EAAA,yCAqCrB,CAAT,CAAA,CAAA,WAAA,CACI,CAAJ,CAAA,CAAA,IAAA,IAAA,CAAA,KAAA,CAAA,QAAA,CAAA,WAAA,CAAA,WAKS,CAAT,aAAA,CAAA,EAAA,IAKM,CALN,AP6RA,CAAA,AO7RA,CAKkB,CALlB,CAAA,CAAA,AAMQ,CANR,AAMA,CANA,AAMA,CANA,AAMA,CANA,AAMA,CANA,AAMA,CANA,CAAA,CAAA,AAMA,CANA,AAMA,CANA,CAAA,AAMmC,CAAnC,A6CkOA,A7CxOA,AP8RA,CAAA,AoDtDA,A7ClOA,AANA,C6CwOA,ApDsDA,AOxRA,AADmC,CACnC,A6CkOA,ApDsDA,CAAA,AOzRqC,CPyRrC,GOvRQ,CAAR,Ae7BA,EAAA,CAAA,Cf6B+C,CAA/C,CAAA,APwRA,AOxR8D,APwR9D,CAAA,AOxRA,AACwB,APuRxB,COxRA,APwRA,COxRA,APwRA,COxRA,APwRA,CAAA,AOxRA,CAAA,APwRA,COxRA,APwRA,COxRA,CAAA,APwRA,CAAA,AOxRA,CAAA,APwRA,COxR6D,APwR7D,WOhRa,Ce9Bb,AtBsTA,AOxRA,CPwRA,AsBtTA,Af8BA,CAAgB,CAAA,EAAA,KAAA,EAAA,UAAA,OAAA,CAEb,qBAOC,Ce9BJ,AX4uBA,AJ9sBA,CI8sBA,CAAA,AW5uBA,Af8BA,AAAe,UAAf,OAAe,oCAIoB,C6C8NnC,A9B7PA,CAAA,A8B6PA,CAAA,CAAA,A9B7PA,C8B6PA,A9B7PA,CAAA,A8B6PA,C9B7PA,A8B6PA,C9B7PA,A8B6PmC,C9B7PnC,qBfqCI,CAAJ,A6C6NA,ApDgEA,CAAA,CAAA,AoDhEA,A7C7NA,AP6RA,EAAA,UO5RgC,CWwIhC,AfZA,AI5HA,CJ4HA,AI5HkC,AWwIlC,CfZA,AeYA,AXxImC,AAI7B,CWoIN,AfZA,AHwKA,AoDlEA,A7C9NA,CJwHA,AeYA,AkC0FA,A7C9NA,CJwHkC,AeYlC,iBXtIkB,CAAA,EAAK,CW0IvB,AkCoFA,A7C9NA,Ae9BA,CAAA,AJwKA,AX1IA,C6C8NA,A7C9NA,Ae9BA,AfgCA,AWwIA,CIxKA,Af8BA,A6C8NA,AlCpFA,CXtIE,CAAC,KAEU,CAAb,CAAA,CAAA,oBAAA,CACI,Ce7BJ,AJ0KA,AkCiFA,A7C9NA,C6C8NA,A7C9NA,AW6IA,KAAA,IAAA,CAAA,KAAA,CAAA,OAAA,AX5IE,CACF,kBA0BY,MAAA,gBAFV,CAAF,CAAA,CAAA,CAAA,CAAA,QAAA,CAAA,CAEY,CW8JZ,AXhKA,APgSA,CkBhIA,AXhKA,APgSA,COhSA,AWgKA,GX9J4C,CW8J5C,CX/JoB,CAApB,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,OACA,MAAA,CAAA,8DAM4C,UACnC,QAAA,CAAA,IAAA,wBAIO,QACQ,AAqCf,CJsJT,AQqkBA,AOjjBA,AX1KA,A6CsQA,ClC5FA,AfpBA,AQqkBA,AyCrdA,A7CtQA,AAA0B,CJsJ1B,AeoBA,APijBA,AJ3tBA,APyRA,AWkcA,CyCrdA,AzCqdA,AJ3tBA,APyRA,CoDnBA,AzCqdA,AXlcA,CO9TwB,A6C2SxB,A7CtQA,APyRA,CWkcA,AXlcA,COzRgC,2BA7BE,AAAnB,C6C0Pf,A7C1PA,AWiKA,APwjBA,CAAA,AOxjBA,AkCyFA,A7C1PA,CWiKA,APwjBA,AyC/dA,A7C1PA,CWiKA,AXjKA,A6C0PA,CAAA,A7C1PA,AIytBA,CAAA,AJ/tBwC,CP8RxC,wEO7Q2B,CP2R3B,AO5RA,CAAA,AP4RA,CO5RA,CP4RA,AO5RA,CAAA,AP4RA,CAAA,AO5RA,CAAA,CP4RA,AO5RA,CP4RA,AO5RA,CP4RA,AO5RA,CP4RA,AO5RA,CP4RA,AO5RA,CAAA,AP4RA,CO3RyC,CAAC,AP2R1C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,WOhRE,CJuJC,CI7IH,SAAgB,GACd,C6CoQF,ApDmBA,AOxRA,C6CqQA,ApDmBA,AOxRA,AAEE,CPsRF,AoDnBA,A7CnQkB,A6CmQlB,A7CrQA,CAAA,APwRA,AoDnBA,ApDmBA,COxRA,APwRA,AoDnBA,A7CrQA,APwRA,AoDnBA,CpDmBA,AoDnBA,A7CrQA,A6CqQA,CpDmBA,AoDnBA,ApDmBA,AoDnBA,A7CrQA,CAI4B,AAJ5B,CAAA,APwRA,AoDnBA,O7CjQoC,CWqKpC,AkC6FA,ClC7FA,CkC6FA,AlC7FA,CAAA,AkC6FA,ClC7FA,CAAA,AkC6FA,ClC7FA,AkC6FA,ClC7FA,AkC6FA,CAAA,AlC7FA,CkC6FA,AlC7F4C,AX5JtB,C6CyPtB,A7CzPuB,CW4JuB,AfRtB,AIpJxB,C6CyPA,AlC7FA,AX5JA,AJoJyB,CiDqGzB,C7C1RA,SAmCA,CAEA,CAAA,KAAA,WAAA,6FAckB,CAAlB,CAAA,CAAA,GAAA,IAAA,GAAA,IAAA,CAAA,CAES,CAAT,AJ8IA,CAAA,AI9IA,CAAA,AJ8IA,MAAA,CAAA,CAAA,CAAA,CI9IA,CWoLA,OXhLW,IAAA,CAAA,KAAU,CAAA,QAAS,CAAC,CAA/B,AJ+IA,CI/IwC,CAAxC,AJ+IA,CAAA,AI/IA,CAAA,AJ+I6C,CAAC,AI/I9C,CAAA,WAGA,CJ8IA,wBIzIgC,CWoLhC,AkCkFA,A7CtQA,CWoLA,AXpLA,A6CsQgB,ClClFhB,CAAA,CAAA,CXnLS,CAAT,AIitBA,AyC3cG,W7CtQH,CIitBA,AJhtBI,CIgtBJ,AACA,AJjtBA,MAAW,CAAX,AJ8IA,AQmkBA,CRnkBA,AQmkBA,AJjtBA,EAAA,CAAgB,CAAhB,AIitBA,ARnkBA,CI9IA,AJ8IA,AQmkBA,CJjtBA,AIitBA,ARnkBA,QAAA,CAAA,WI9IuC,CAAA,WAEvC,CACA,CAAA,CAAA,CAAA,IAAA,CAAA,SAIM,CAAN,AJmKA,CInKA,SAAA,GAEoB,CAApB,AJsKA,CAAA,AItKA,QAEoB,CAApB,KAAA,CACoB,CIuyBpB,AJvyBA,IAAA,AAJE,CAAF,AI4yBA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MJtyBS,CAAA,EAAQ,QAAA,CAAA,GALG,IAApB,CAAA,CAAA,CAAA,CAAA,4BAEoB,CP+RpB,AoDfA,AjDrGA,AI3KA,KACA,CAAA,C6CgRA,A7ChRA,C6CgRA,A7ChRA,C6CgRA,A7ChRA,CAAA,A6CgRA,CAAA,C7ChRoB,C6CgRpB,A7ChRA,AW0LY,CX1LZ,A6CgRA,M7C7Qe,CACb,CAEO,CAAT,CAAA,CAAA,MAAkB,CAAlB,CAAmC,AAAnC,CWwLA,AXxLA,CAAA,CAAA,CAAA,UACe,GAAM,EAAA,IAAa,CWwLlC,AXxLoC,CWwLpC,AXxLA,CWwLA,AXxLA,AAA4C,CWwL5C,AXxLA,AWwLA,AXxLA,CAAA,AWwLA,AXxLA,AWwLA,CAAA,AXxLA,AWwLA,CAAA,AXxLgD,AAAN,CWwL1C,AXxLiD,CWwLL,AXxL5C,IAAsD,CWwLtD,AXxLuD,CWwLvD,AXrLS,CWqLT,AXrLA,CWqLA,CAAA,CAAsD,CAAC,OXrLvD,CAAA,CAAA,sDJ0KA,IAAA,CAAA,KAAA,CAAA,OAAA,kBIhKwB,CAAA,IAAA,EAAA,OAAA,CAAA,mBACkB,CAAA,EAAQ,CW4LlD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,AX3LoD,CAAC,CAArD,CAAA,CAAA,AACe,C6CqRf,ApDYA,AOjSA,AADA,CAAA,A6CsRA,A7CrRA,APiSA,AO1RqB,CARsC,A6CsR3D,ApDYoB,AkBrGN,AX5Ld,CAD4D,IAiBpB,CAAxC,C6C0RA,A7C1RA,CAAA,A6C0RA,A7CtRY,CAJZ,AAIA,A6C0RA,C7C1RA,A6C0RA,C7C1RA,A6C0RA,C7C1RA,A6C0RA,C7C1RA,C6C0RA,A7C1RkB,C6C0RlB,C7C9SkC,CW4LlC,CAAA,AkCyFA,ClCzFA,AkCyFA,A7CjQuB,CAAA,AWwKvB,AkCyFA,ClCzFA,AkCyFA,CAAA,AlCzFA,CAAA,AkCyFA,A7CjQwC,CWwKF,AX5KqB,AAI3D,A6CiQA,CAqBA,A7CtRA,C6CsRA,A7CtRA,C6CsR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6B,AP+R7B,CO9R2B,AAH3B,EAAA,AAKE,CAAF,CAAA,CAAA,CAAA,EAAA,CAAsC,CAAC,CAAvC,CAAA,AAAgD,CAAhD,AACQ,CADR,AP8RA,AO7RA,CADA,AACA,CADA,AACA,CAAuC,AADvC,CW4MA,AX3MA,AAD+C,CW4M/C,AX3MA,AAAgD,CAAhD,AW2MA,CAAA,AX3MA,AW2M0C,CAA1C,AX3MA,CAAA,AW2MA,CAAA,AX3MA,CW2MA,AX3M+C,EAMtC,GAAM,CAAf,AW4MA,AlBmFA,CAAA,AO/RA,AW4MA,CAAA,AX5MA,AP+RA,CO/RA,AP+RA,CO/R+C,CAA/C,AW4MA,AlBmFA,CkBnFA,AlBmFA,AO/RA,AAA+D,CAA/D,AW4MA,AlBmFA,AkBnFA,AX5MA,AACA,CP8RA,AO/RA,AW4MA,CAAA,AX5MA,AP+RA,AO/RA,AW4MA,CX5MA,AP+RA,AkBnFA,AlBmFA,AO/RA,AW4MA,CX5MA,AW4MA,AlBmFA,AO/RA,AW4MA,AlBmFA,CkBnFA,AX5MA,AP+RA,AO/RA,AP+RA,CkBnFA,AX5MA,AW4MA,AlBmFA,AO/RA,CAAA,AP+RA,AkBnFA,AX5MA,AP+RA,CAAA,AkBnFA,AX5MA,AW4MA,AlBmFA,CO/RA,AP+RA,AkBnFA,AX5MA,CP+RA,AkBnFA,AlBmFA,AO/RA,CAA6D,AW4M7D,AlBmFA,AO/RA,CP+RA,AkBnFA,AX5M4E,AW4M5E,AlBmFA,CO5RsC,CAAtC,AAAgD,CAAhD,CAAA,AAEE,CAFF,AAEA,KAAS,CAAA,CAAA,CAAA,GAAA,EAAA,qBAAA,CACT,8G+Bv2BM,CADN,A1CDA,AmCWoD,ApCVpD,AuB+BA,AgBmIA,A/B/EA,C+B+EA,AvClKA,ACDA,AmCWqD,AOVrD,ApB+BA,AfoDA,CmCnFA,ApB+BA,AfoDA,ARnFA,AuCkKA,AmB3JwD,AAAC,C1DPzD,A2CAA,ApB+BA,AfoDA,AkD5EyD,CAAA,EfNT,CpB8BhD,AoB/BA,CpB+BA,AoB/BA,AACuD,CADvD,ApB+BA,AoB/BA,CAAA,ApB+BA,AoB/BA,CpB+BA,AoB9BqD,ApB8BrD,AoB/BA,CpB+BA,AoB/BA,ApBoCiC,CoBpCjC,CAAA,CAAA,CAAA,CACgE,CAAC,CAC5D,yHvCeD,CmC6JJ,AGrIA,AlC0DA,AJtFA,CAAA,AsC4BA,AHqIA,A/B3EA,CJtFA,AIsFA,A+B2EA,AGrIA,mCtClB8B,CAAA,GAAA,CACxB,0GASa,IAAA,+CAO2C,wMAuBT,CAAA,EAAA,EAAO,MAAM,gBAEtD,CADZ,AACsB,CADtB,AACsB,CADtB,CAAA,AsFjBsE,AtFkB3C,CAChB,CAFX,CAAA,CAEc,QAEqB,EAAA,CAAA,OAOjC,wCAMF,CAAG,yIsCnDsB,CbxBzB,AnC4DA,A+DoMA,A3D5OA,AU8DA,A6C9EsD,AbItD,AEgBA,ADjBA,CAAA,SCkBY,EAAA,CAAA,EAAA,IAAA,EAAA,SAAA,CAAA,EAAA,oBAIJ,EAAA,oFAcwC,Ce2PhD,AxB/PA,AqD4N8E,A3EjJ9E,A2BxEA,AICiD,C/BuEjD,A8CoLA,A9D7RsD,A2CiCtD,wBIRA,2FAiDQ,C5CXR,A6BOA,AJ6FA,AgBuDA,AkB4GA,A7C7PA,A8BCA,CHgJA,GAAA,wEG5I4D,yBA0DxB,CrCoQpC,AOhQA,AJ8DA,AewBA,AmB1FA,IAzDyD,AAAC,C/B4E1D,AElHA,A6BsCA,AgBkL2D,ahBjLxB,2BAIzB,GAAA,GAAA,GAA6B,EAAA,UAAA,EAAA,OACL,CxCyBlC,AwCzBA,A9BFA,A4B/BA,AjB2HA,CAAA,KmB1FgD,CAAC,GAIrC,EAAA,EAAA,UAAA,CAAA,IAAA,CAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAC0B,CrC+OtC,AqChPA,ARjBA,APcA,YeOmE,C5CZnE,A6BOA,AeKA,2FA4B+B,EAAA,GAhB/B,EAgB+B,CAAA,oBAEG,EAAA,qEA6BlC,SAAA,GAAA,CAAA,CAAA,CAAA,mIA8BuD,EAAA,MAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,iEAM/C,CAAC,AFjChC,AnCgTA,AGhMA,AdrBA,A6BgEA,AkCoIA,AzCuU8B,CwBtmB9B,AnCgTqC,AGhMrC,AdrBA,A6BgEA,AkCoIA,AzCuUA,AL3dA,mB+BnGA,EApC2B,GAAA,MAAA,CAAA,CAAA,EAAA,mGAWtB,CAAA,YA2BI,GAAA,CAAA,CAAA,CAAA,aAKT,CAEA,SAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,iBAiBS,iCAeI,EAAA,GAAA,CAAA,GAEF,GAAsB,CnByHjC,AX1GA,AJyEA,AV9GA,A4CsBA,C/BoGA,ACrFA,AJyEA,AV9GA,A2D6QA,AfvPA,AnByHA,CAAA,AZrBA,ACrFA,AdrCA,AU8GA,AkCxFA,C9BeA,AJyEA,AkCxFA,AeuPA,A3D7QA,CyB+IA,AX1GA,A6CwOA,A9CnJA,AHZA,AkCxFA,A5CtBA,Ca0HA,Ab1HA,A2D6QA,AlC9HA,AX1GA,A8BfuC,CAAC,IAAA,CAAA,GAAA,IAAgB,CAAxD,AlCwFA,AiD+JA,A3D7QA,AyB+IA,CfjCA,AiD+JA,AlC9HA,AzB/IA,A4CsB0D,CAAE,AAAC,GACvD,CADN,C5CtBA,A4CsBA,C5CtBA,A4CsBA,AACqB,CADrB,CAC4B,AAD5B,CAAA,CAAA,CAC0B,AAD1B,CACgC,CAAC,CACvB,CAnBD,EAAA,MACM,CAAA,SAAA,EAAA,CAAA,CAAA,CAAA,EACT,C5CtBN,A6D6JA,AhC5Hc,AeXd,MAAA,GAAA,GAAA,EAAA,GACiB,CAAA,GAAY,EAAA,EAAA,IACnB,GAAA,EAAA,EAAqB,C5CtB/B,A2D8QA,AjDnK6B,AemC7B,AX7GA,A8BXA,A/BsGA,AgBxFA,MeXA,esB1OM,GAAA,IAAA,2K1D8GN,EAAA,IAAA,sH0DVI,CxBjBJ,AD0MA,AM/KA,AjCUA,A4ElCK,AxE+lBL,CAAA,gBAAA,6CgD3nB6B,GAAA,EAAA,4IAwBd,gvBPuQ+C,CAA9D,CAAA,UAAA,GAAA,EAAA,UAAA,yIAqB0C,SAAS,EAAA,CAAA,CAAA,GAAA,gBAEO,C/D9N1D,A+D8NA,AjDjMqB,AkC/DrB,ChDkCA,A+D8NA,AC9EgE,oCDgF/B,CAAA,IAAA,aACF,C9B9P/B,AfEA,AlB8BA,AI9CA,A2D4QA,AlCzKA,AfrBA,AKvGA,AyBmDA,AjCoPA,CkCzFA,AD3JA,AXZA,A8B8PA,ApDEA,AP9QA,AcgBA,AlB8BA,A6BqDA,AfrBA,AKvGA,CcuCA,AfEA,A0BUA,AmBkPA,A5CrSA,AnBuEA,A6CuIA,AhBlFA,AlB2KA,AGhMA,AV9EA,MU8EA,6CiDsMuC,EAAA,IAAA,CAAA,MAAgB,CAAA,gBAAA,sBAErB,EAAA,0DAKnB,0BAOM,GAAA,KAAA,8BACoC,CAAC,CZjQ3C,A/Cbf,AcoBA,A6C0PA,C3D9QA,AcoBA,A6C0P4D,AAAC,C3D9Q7D,AcoBA,CdpBA,AcoBA,CAAA,AdpBA,oG2DoRQ,CADR,AACoB,AjD9LpB,AkCjEA,AhDwDA,C+DsMA,A7C3PA,A8BHA,AlCiEA,AiD8LqB,C/DvMrB,AgDxDA,Ae8PA,AjD7LA,AI9DA,A6C2PA,CAAA,AAC8B,CAD9B,CAAA,CAAA,CAAA,CAAA,CAC6B,sDAiBgB,CjDjL7C,AIrEA,APsQA,AWmTA,AyCnUA,AlBxEA,A7CpHA,U+D4LA,WACiC,eAAA,CAAA,eAAA,UAEZ,CAAC,IAAI,CAAC,SAAA,CAAA,4EAQ3B,YAK0B,aAAa,CAAA,+IA2Be,CjBxRtD,AxB4lBA,AuBnUA,AkBDA,A/DtMA,E8ClFA,YAAA,OAAA,EAAA,EAAA,EAAA,KAAA,mEiByS2C,CAA3C,A/DzMA,AIrEA,AyC6RiE,A/BnLjE,CiDoKA,A3D9QA,AU0GA,AiDoKA,A/DzMA,CAAA,AcqCA,AV1GA,A2D8QA,CjDpKmD,AiDoKnD,SAA0D,C3D9Q1D,A2D8QA,A/DzMA,A+DyMA,C3D9QA,A2D8QA,A/DzMA,A+DyMoE,CAApE,A/DzMA,AIrEA,AJqEA,C+DyMA,A/DzMA,AIrEA,AJqEA,CIrEA,A2D8QA,A/DzMA,C+DyMA,A3D9QA,CAAA,AJqEA,A+DyMA,A/DzMA,CAAA,I+D2MgC,EAAA,2DAKD,C7C5O/B,AlBmCA,AiBwDA,Ab3HA,A4CsBA,AfYA,M8B0OiC,CAAA,CAAA,CAAA,YAGrB,C9B3OZ,A8B2OA,AfvPA,AH4QA,AhBnJA,iDkCuI4B,C7CzO5B,AlBiCA,A6B0EA,AkCgIc,OAXd,KAWc,OAAA,iDAasB,C9C9IpC,Ab9HqD,A2D4QrD,AjDtJA,IiDsJA,EAA6C,EAAA,wBAQtB,CAFvB,A3D3QA,AoDVmC,A3BuJnC,AZhBA,CAAA,4B8CkJ8C,CAA9C,A7ClPA,AlBgEA,C+DkLgD,A/DlLhD,AkBhEA,ClBgEA,AkBhEA,CAAA,AlBgEA,CkBhEA,ClBgEA,AkBhEA,ClBgEA,CAAA,AkBhEA,CAAA,AlBgEA,CAAA,+C+D4LU,GAAA,OAAA,IAAA,CAAA,iBAAA,CAAA,EAAA,wBAEmB,CAA7B,A/DhLA,AiC/DA,AJ+GA,AlBuJA,AMxKA,CgB9FA,CAAA,8G8B2PW,CpDyBX,AsBxQA,AJoHA,AkC2HA,A9C3IA,AjBlCA,C+D6KA,A9B/OA,AtBwQA,AXtMA,A6BkDA,akC2H0B,CAAA,EAAA,CAAA,mDAGuB,C3DxQjD,A2DwQA,A9B/OA,CAAA,A8B+OA,A3DxQA,CAAA,A6ByBA,A8B+OA,C9B/OA,A8B+OA,C9B/OA,A7BzBA,A2DwQA,CAAA,A9B/OA,A7BzBA,CAAA,A2DwQA,A9B/OA,C8B+OA,A3DxQA,C6ByBA,A8B+O0D,A3DxQ1D,C2DwQ2D,A9B/O3D,A7BzBA,CAAA,A6ByBA,C7BzBA,A6ByBA,C7BzBA,A6ByBA,CAAA,CAAA,A7BzBA,U2D0Q2B,CAAA,EAAA,GAAQ,CjDzJnC,AV/GA,A2DwQA,A9B/OA,wB8BiPgC,CAAC,C9B/OjC,A8B+OA,A3DxQA,CAAA,A6ByBA,A8B+OA,C3DxQA,A6ByBA,A8B+OA,C3DxQA,A2DwQA,CAAA,A9B/OA,C8B+OA,OAAA,KAGI,C9B/OJ,A8B+OK,CAAC,iBAGN,KACS,CpDyBT,AsB1QA,AfCA,A+CwHA,A3CqcA,AyC7UA,EAAA,IAAA,CAAA,IAAA,CAAA,YAAA,CAAA,GAAA,WAC4D,CAAA,YAAA,CAAA,EAAA,CAElD,CAAA,oBAwBa,ClChHvB,AIpIA,A8BoPA,AjD3JA,AQwhBA,CWjnBA,AnByFA,AiD2JA,AzC6XA,AO7eA,EAAA,CAAA,YAAA,CAAA,GAAA,CAAA,IkCiHW,ClChHX,AlB8IA,APnRA,AU0FA,AQ4hBA,AJ1mBA,A6CyOA,EAAA,IAAA,CAAA,aAAA,CAAA,IAAA,4DAUoC,EAAQ,ClC3G5C,AlB0IA,AGvLA,AiDwJA,ClC3GA,AkC2GA,ApD+BA,AGvLA,Ce6CA,AlB0IA,AGvLA,AiDwJA,CjDxJgD,AHuLhD,AoD/BA,uCAKsD,CAAtD,AjDzJA,CiDyJA,AjDzJA,CiDyJyD,CAAC,CjDzJ1D,AiDyJA,CjDzJA,AiDyJA,CjDzJA,AiDyJA,AACgB,CADhB,AjDzJA,CAAA,AiDyJ+D,CjDzJ/D,AiDyJgE,EjDzJhE,AiD2J8B,CjD3J9B,CAAA,CAAA,CAAA,CAAA,CAAA,CiD2J8B,CAAQ,GAAA,EAAA,GACP,CAAA,mBAOvB,EAAA,OAAkB,CAAA,AAAE,CpD6B5B,AsBlRA,AjCiFA,A+DoKA,C/DpKA,AiCjFA,A8BqPA,ApD6BA,CXjMA,A+DoKA,ApD6BA,CsBlRA,A8BqPA,ApD6BA,AXjMA,A+DqKU,GAAM,C7CzOhB,AI8pBA,AJ9pBA,AWgIA,AI5IA,AjCkFA,OkBtEA,C6CyOwB,C9BrPK,AJ4I7B,A2B5K6B,AOqRH,GAAG,EAAA,CAAS,ClCzGO,AkCyG7C,ClCzG+C,AkCyG/C,CAAA,CAA0C,CAAC,CAA3C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAwD,CAAC,CAAzD,EACU,CzC2bV,AOpiBA,AXhIA,AdDiB,A2D0OjB,MAAA,MAAuB,CAAA,EAAS,CzC2bhC,AJpqBA,A6CyOA,CzC2bA,AJpqBA,A6CyOA,C7CzOA,AIoqBA,AyC3bA,CAAoC,A7CzOpC,AIoqBA,wByCzbQ,CAAC,AjDnJT,AHkLA,AOxQA,kE6CiP+B,CAA/B,A3DjOA,AJ6DA,CciBiC,AV9EjC,AJ6DA,A+DoKA,CjDnJA,AV9EA,A2DiOA,C3DjOA,AJ6DA,A+DoKA,CjDnJA,AV5E8B,A2D+N9B,A/DpKA,4E+D8KE,uDAOwC,CAA1C,AlCpGA,AlB0HqC,KoDtBrC,CAAiD,EAAA,AAE/C,CAEQ,CAAV,A7C7OA,eAAA,CAAA,CAAA,CAAA,CAAA,+D6CmPwB,CAAxB,AzCwbA,ARjlBA,AekDA,A7BxEA,E+D+K2B,CAAA,EAAW,EAAA,IAAA,8BASH,CjD9InC,AdnCA,AcmCA,AQkkBA,wEyC5akD,CjD/HlD,AmB7HA,A8B4PA,CjD/HA,AmB7HA,A8B4PA,CjD9HwB,AmB9HxB,A8B4PA,EAAuD,+CAIpB,CjD7HnC,AmB/HA,AtBgRA,AoDpBA,C9B5PA,AnB+HA,AHiJA,AoDpBA,CAAA,ApDoBA,AsBhRA,AnB+HA,CAAA,CiD6HwC,YAAA,CAAA,GAAA,CAAA,GAAA,WACD,CAAA,eAAA,CAAA,GAA2B,CAAlE,CAAA,CAAA,CAAsE,CAAE,cAG1D,EAAA,IAAA,CAAA,eAAA,CAAoC,CAAlD,CAAA,CAAA,AAA2D,CAA3D,CAAA,AACQ,CADR,AACQ,CADR,CAAgE,CAAC,AACzD,EAAA,IAAA,EAAA,AAGoC,C/D9K5C,AWmMA,AOzQA,A6CoP6C,AjD9H7C,CHmJA,AoDxBQ,AjD3HR,AdhDA,AkBtEA,E6CiPQ,OAAA,CAGoB,CAA5B,A/D9KA,AkBtEA,CJsHA,AHmJA,AoDrBA,A7CpPA,AlBsEA,CkBtEA,A6CoPA,AjD9HA,AHmJA,AXnMA,CWmMA,AGnJA,AdhDA,A+D8KA,AAEU,CjD/HV,AdhDA,AWmMA,AoDpBA,A7CrPA,CAAA,AlBsEA,A+D+KA,AjD/HA,AItHA,APyQA,CoDpBA,A7CrPA,AJsHA,AdhDA,CkBtEA,APyQA,AoDpBA,AjD/HA,CHmJA,AXnMA,A+D+KA,AjD/HA,AItHA,ClBsEA,A+D+KA,ApDoBA,AGnJA,AItHA,ClBsEA,AcgDA,AItHA,A6CqPA,ApDoBA,AOzQA,C6CqPA,ApDoBA,AOzQA,CPyQA,AGnJA,AiD+HmB,A/D/KnB,AkBtEA,M6C+PuC,CAAA,GAAA,IAAA,CAAA,aAA6B,CAAC,CjDhIrE,AiDgIA,AlCnGA,AI5JA,GAAA,A8B+PyE,CAAC,AjDhI1E,CAAA,CAAA,CAAA,mDiDwI6B,CAA7B,A7CvPA,AWuJA,CXvJA,AJqHA,AekCA,AkCgGA,CAAA,A7CvPA,AJqHA,AekCA,AkC+GU,CAAV,AjDjJA,AekCA,AkCgGA,A7CvPA,AI+uBA,AJpuBA,AeTA,AtBsRA,CoDjCA,A7CvPA,AWuJA,APwlBA,AyCzeA,AlC/FA,AIrKA,AfSA,AP6QA,CAAA,AoDlBA,AAfA,AjDlIA,AekCA,APwlBA,COxlBA,AflCA,AIrHA,A6CuPA,ClChGA,AflCA,AIrHA,A6CuPA,CjDlIA,AIrHA,AWuJA,AkCgGsC,CjDlItC,AiDkIuC,A7CvPvC,CAAA,AJqHA,AekCA,CkCiGoC,C7CvPpC,A6CuPA,AjDlIA,CiDkIA,CAAA,CAAA,MAYiC,CzCwejC,AyCxeA,A9BpQA,AnB+HA,CiDqIA,A9BpQA,AnB+HA,AQ6mBA,CAAA,CyCxeqC,C9BpQrC,AX4uBA,AR7mBA,AiDqIA,CAAA,A9BpQA,AX4uBA,AR7mBA,AiDyHoD,CzCofe,AyCxenE,A9BpQA,AnBsHA,CmBtHA,AnB+HA,AQ6mBoE,AyCxepE,AAEiB,AjDhJjB,CAAA,AmBtHA,AnB+HA,AiDqIA,CjD9IA,AmBtHA,AnB+HA,AiDqIA,CjD9IA,AmBtHA,AnB+HA,AiDqIA,CjD9IA,AiDmJqB,CjDnJrB,AI1GA,AW6JA,AIrKA,A8BqQA,CjDnJA,CAAA,CAAA,GiDmJ4B,CAAC,C7C7P7B,AW6JA,AkCgGA,CAAA,sBAOU,CjDjIV,AHmJA,AoDlBA,AlCjGA,AP0kBA,CXvdA,AWudA,AO1kBA,CfhCA,AegCA,AP0kBA,AyCzeA,UKhpBE,CAAA,yCAKsD,C5DiBxD,AyBxBA,COZA,AhCoCA,AyBxBA,EAAA,A8BkpBA,C9BvQA,CA3YA,AA2YA,I8BoQA,M9B/oBA,CAAA,KmCSqC,CAAA,4FAQb,CAAC,C5DkBzB,CAAA,CAAA,EAAA,C4DhBiB,C5DgBjB,A4DhBkB,CACL,A5Deb,CAAA,A4Dfc,C5Ded,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MuDmnB6C,YAAY,CAAE,CjD5H3D,AiD4HA,CAAA,AjD5HA,AiD4HoE,CjD5HpE,AiD4HA,AjD5HA,AiD4HA,CjD5HA,AiD4HA,AjD5HA,AiD4HA,CjD5HA,AiD4HA,AjD5HA,AiD4HA,CjD5HA,AiD4HA,AjDzHoB,AiDyH8C,CjD5HlE,AiDiIU,AALV,CjD5HA,AiD4HA,CAAA,AjDxHqB,CiD6HgB,C9BxQrC,AJoKA,AlBqHA,AoDjBA,CAAA,A7C5PA,AP6QA,GoDhBkC,EAMxB,ClCpGV,AXzJA,A6C6PA,CpDsBA,AkB1HA,AkCoGA,EAAc,CAAC,aAAa,CAAA,OAAQ,CAAC,CAAC,EAAQ,CpDsB9C,AkB1HA,AXzJA,A6C6PA,ClCpGA,AlB0HA,AOnRA,A6C6PA,CpDsBA,AkB1HA,AkCoGA,EACY,CjD7GZ,AeSA,AItKA,AfaA,A6C6PA,ApDsBA,CGnIA,AeSA,AlB0HA,AoDtBA,A9B1QA,CfaA,A6C6PA,A9B1QA,AtBgSA,CoDtBkB,C7C7PlB,AJgJA,AiD6GA,ApDsBA,AsBhSA,AJsKA,ClB0HA,AsBhSA,AJsKA,AXzJA,A6C6PA,ApDsBA,CGnIA,AIhJA,APmRA,AkB1H2B,AkCoG3B,C9B1QA,A8B0QA,AjD7GA,AHmIA,KoDtBwC,CAAC,MAChB,CAAK,A/DzJ9B,AkBpGA,APmRA,AoDtBA,AjD7GA,CAAA,AHmIA,AOnRA,AlBoGA,A+DyJ+B,A9B1Q/B,A8B0QA,C9B1QA,AtBgSA,AOnRA,AJgJA,Ad5CA,AW+KA,AoDtBgC,AAAhC,A/DzJA,Ac4CA,CiD6GA,AAAgC,A7C7PhC,AJgJA,Ad5CA,AW+KA,GoDtBsC,GACxB,C7C7Pd,AebA,AjCoHA,A+DsJA,C9B1QA,AjCoHA,A+DsJA,AjD7GA,AiD6G2B,CAA3B,A/DtJA,AcyCA,AdzCA,AkBvGA,A6C6PA,A9B1QA,AfaA,AJgJA,CIhJA,A6C6PA,AjD7GA,AdzCA,AkBvGA,A6C6PA,AjD7GA,AdzCA,AiCpHA,CnB6JA,AdzCA,AiCpHA,AfaA,A6C6PA,A/DtJA,AkBvGA,CJgJA,AdzCA,AkBvGA,A6C6PA,AjD7GA,AmB7JA,CnB6JA,AiDiHM,AAL0C,A7C5PhD,AlBuGA,A+DsJA,AjD7GA,AdzCA,A+DsJA,A9B1QA,C8B0QA,A9B3QA,AfaA,APmRA,AGnIA,AI/IA,AJgJA,AdzCA,A+DsJA,A9B1QA,AnB6JA,AIhJA,CebA,AnB6JA,AHkIA,AGnIA,AiD8GA,A/DtJA,AkBvGA,AJgJA,AIhJA,AlBuGA,A+DsJA,C9B3QA,AnB8JA,AIhJA,A6C6PA,AjD9GA,AHmIA,AOnRA,CPmRA,AsBhSA,AfaA,AACA,AlBuGA,A+DsJA,AjD9GA,CI/IA,AJgJA,AdzCA,A+DsJA,CjD7GA,AiD6GsC,GAO3B,CACT,CAEO,CAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAoB,CAA4B,CAAE,CzC0elD,AWjvBA,AtBwTA,AkBhJA,AfbA,AiD4GA,AzC0eA,CRtlBA,AiD4GA,AzC0eA,AWjvBA,AJwKA,AlBgJA,AOhTA,AIyuBA,KyCzeU,CjD5GV,AiD4GA,CAAmB,IAAI,CAAC,ClC9FxB,AkC8FA,AjD5GA,AInJA,CJmJA,AiD4GA,AlC9FsB,AXjKtB,CJmJA,AInJA,AWiKuB,AkC8FvB,C7C/PA,AJmJA,AiD4GA,C7C/PA,AJmJA,AiD4GA,C7C/PA,A6C+PA,AjD5GA,CiD4GA,AjD5GA,AInJA,CAAA,AJmJA,AiD4GA,C7C/PA,AJmJA,AiD4GA,C7C/PA,A6C+PA,CAAA,A7C/PA,AJmJA,CInJA,A6C+PA,AjD5GA,CAAA,AInJA,A6C+PA,CAAsC,CAAC,EAAU,CjD5GjD,AiD4GA,CjD5GA,AiD4GA,CAAA,AACI,CjD7GJ,AiD4GA,AACA,CjD7GA,AiD4GA,AACA,CjD7GA,AiD4GA,AACA,CjD7GA,AiD4GA,CjD5GA,AiD4GA,CjD5GA,AiD4G0D,AAC1D,CAD2D,AjD5G3D,AiD6GA,CjD7GA,AiD6GA,CAAA,AjD7GA,CAAA,CAAA,CAAA,AiD6GA,CjD7GA,CAAA,AiD6G+B,EjD7G/B,CAAA,CAAA,CiD6G+B,AjD7G/B,CAAA,CAAA,AiDgHS,CAAT,CAAA,CAAA,eAA2B,CjD5G3B,AeYA,AIvKA,AtBwTA,AoDjDA,CAAA,A9BvQA,AtBwTA,AkBjJA,AfZA,AiD4GA,C9BvQA,AJuKA,AfZA,AiD4GA,ApDiDA,CG7JA,AmB3JA,A8BuQA,ApDiDA,AkBjJA,CIvKA,AtBwTA,AkBjJA,AfZA,AiD4GA,C9BvQA,AtBwTA,AkBjJoB,AfZpB,AiD4GA,C9BvQA,AnB2JA,AiD4GA,CjD5GA,AH6JA,AsBxTA,A8BuQA,OAGQ,CjD5GR,AQslBA,AW3uBA,A8BiQA,CAAA,IAFU,CAAA,SAAA,CAAU,CpDiDpB,AkBlJA,AfXA,UiD4GsB,CAAA,CAAA,CAAA,EACZ,CzC0eV,ARtlBA,AmBxJA,A8BoQA,CAAA,IAAuB,CAAA,cAAe,CAAC,CjD5GvC,AiD4GA,CAAA,AjD5GA,CAAA,AiD4GA,CjD5GA,AiD4GA,CjD5GA,AiD4GA,CjD5GA,AiD4GA,CjD5GA,AiD4GA,CjD5GA,AiD4G+C,CjD5G/C,CiD+G0B,EAAO,KAAA,CAC7B,C9BjQJ,A8BiQA,C9BjQA,CAAA,A8BiQA,GAAA,EAAA,OACsD,gCAG7B,KAAA,EAAA,0BAEzB,CjD5GA,AI3HA,AP6RA,AoDtDO,C7CvOP,CJ2HA,AI3HA,AP6RA,CAAA,AO7RA,AJ2HA,CHkKA,CO7RA,AJ2HA,CHkKA,AGlKA,AiD6G0C,CpDsD1C,AoDtDA,A7ClOA,C6CkOA,A7ClOA,APwRA,CoDtDA,A7ClOA,CAAA,A6CkOA,ApDsDA,CAAA,AoDtDA,A7ClOA,C6CkOA,ApDsDA,AOxRA,C6CkOA,ApDsDA,AOxRA,CPwRA,AoDtDA,A7ClOwD,C6CkOL,CAAC,ApDsDpD,CoDrDoB,ApDqDpB,CAAA,EAAA,CAAA,CAAA,AoDpDc,CpDoDd,AG5Je,AmBvJf,A8B+PA,CpDoDA,AoDpDA,CpDoDA,CoDpDwC,CpDoDxC,AoDpDA,ApDsDA,AOtRA,CPoRA,AOpRA,wB6CmOQ,QAIE,C9B7PV,A8B6PA,6L5B9wBY,CAAa,AAFzB,CAE0B,AAF1B,CAAA,CAEoC,AAFpC,CAAA,CAAA,CAAA,CAEwC,AAFxC,CAAA,AAEyC,AAFzC,CAAA,CAEmC,AAFnC,CAAA,CAAA,CAE8C,CAAC,CACnC,CAHZ,CAAA,AAIY,CAJZ,CAAA,AAKY,AAFI,CAHhB,CAAA,CAIiB,AAJjB,CAAA,CAAA,CAAA,CAAA,CAAA,CAKqB,CACV,CACF,qFASyB,CfGpB,AeJd,CfAA,AeAA,CfAA,AeAA,CACgD,CADhD,CAAA,AACuD,CADvD,CAAA,CAAA,AACqD,CADrD,CAAA,CAAA,CAAA,CAAA,CACgE,CAAC,CAC5D,mB4BwwBqB,EAAW,C9B7PrC,A8B6PA,CAAA,A9B7PA,C8B6PA,A9B7PA,A8B6P4D,CAA5D,C9B7PA,A8B6PA,C9B7PA,A8B6PsE,AAAtE,CAAA,AAAuE,AAAvE,A9B7PA,C8B6PA,A9B7PA,A8B6PA,C9B7PA,A8B6PA,C9B7PA,A8B6PA,CAAA,A9B7PA,C8B6PqE,AAArE,CAAA,A9B7PA,CAAA,A8B6PA,CAAA,A9B7PA,CAAA,A8B6PA,CAAA,A9B7PA,C8ByQW,IAAc,CjDjGzB,AeeA,AlBoJA,AoDlEA,CAAA,AlClF2B,AlBoJ3B,AGnKA,CAAA,AiDiGgD,AAAhD,ApDkEA,CAAA,AoDlEA,AjDjGA,AHmKA,AoDlEA,CpDkEA,AoDlEA,AjDjGA,CAA2B,AHmK3B,AoDlEA,AAAkE,CAAlE,CAAA,AACQ,CADR,CAAA,AACQ,CADR,CAAA,CAAA,CAAA,AACQ,CADR,CAAA,CAAA,CAAA,CAAA,6BASS,GAGD,aADyC,CjDpGjD,AiDoGA,QAAA,AAA0D,CjDpG1D,AI1HA,C6C4NS,AjDjGO,AI3HhB,CAAA,S6CiO6B,CAA7B,ApD+DA,CAAA,AoD/DA,A7C9NA,CP6RA,AoD/DA,A7C9NA,CP6RA,AO7RA,C6C8NkC,C7C9NlC,AP6RA,AoD/DmC,CpD+DnC,AO7RA,a6C8NqC,KACzB,EAAA,EAAA,KAAA,CAAA,aAAsC,CAC1C,C7C/NR,AP6RA,AoD/DA,CAEQ,ApD6DR,AoD/DA,CpD+DA,AoD/DA,A7C9NA,AP6RA,AoD/DA,CpD+DA,AoD/DA,A7C9NA,CP6RA,AO7RA,A6C8NA,ApD+DA,CO7RA,AP6RA,AoD/DA,ApD+DA,CoD/DA,ApD+DA,AO7RA,AP6RA,AoD/DA,C7C9NA,AP6RA,AoD/DA,ApD+DA,AoD/DA,CpD+DA,AO7RA,A6C8NA,ApD+DA,CoD/DA,ApD+DA,AoD/DA,ApD+DA,AO7RA,C6C8NA,ApD+DA,AO7RA,AP6RA,CO7RA,AP6RA,AoD/DA,C7C9NA,AP6RA,AoD/DA,C7C9NA,AP6RA,AoD/DA,wBAOU,EAAA,IAAA,CAAA,iBAAA,CAAA,GACA,C7CjOV,A6CiOA,CAAsB,AAAtB,C7CjOA,A6CiOA,A7CjOA,C6CiOA,A7CjOA,CAAA,A6CiOA,AAA6C,C7CjO7C,A6CiOA,A7CjOA,A6CiOA,CAAA,A7CjOA,A6CiOA,C7CjOA,A6CiOA,CAAA,A7CjOA,CAAA,A6CkOqB,AADrB,A7CjOA,CAAA,A6CiOA,A7ChOA,A6CiOA,A7ClOA,C6CiOA,A7CjOA,A6CkOA,CADA,C7CjOA,A6CiOA,C7CjOA,A6CiOA,C7CjOA,A6CiOA,C7CjOA,A6CiOA,AACA,CADA,A7CjOA,A6CkOA,CAD2D,A7CjO3D,C6CiO4D,C7CjO5D,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,E6CkOgD,CAAA,EAAA,wBAIV,CAAA,EAAA,QAAA,CAAmB,CAAzD,CAAA,CAAA,AACI,CADJ,CACI,AADJ,CAAA,CAAA,CACI,AADJ,CAAkE,CAChC,AADiC,CpD2DnE,AoD1DA,CpD0DA,AoD1DA,CAAA,ApD0DA,CAAA,OoDvDM,CAAN,AjD5FA,CiD4FA,EAAA,EAAA,GAAA,IACY,CpDwDZ,AoDvDQ,CpDuDR,AoDzDA,CpD2DgD,AoDxDxC,AAHR,CAAA,CAAA,AAIQ,CAJR,CAKQ,AALR,CAAA,CAAA,AAKgB,AALhB,CAAA,AAGe,CAHf,CAIe,AAJf,CAAA,CAKqB,AAAN,CAAO,CALtB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAKgC,CACtB,CANV,CAAA,CAAA,AAMsB,CANtB,CAAA,CAAA,AAMyC,AANzC,CAAA,CAAA,AAMyC,AANzC,CAAA,CAAA,CAMqB,AANrB,CAAA,CAMyC,AANzC,CAMyC,AANzC,CAAA,CAMyC,AANzC,CAAA,CAAA,CAAA,CAMuC,EAAE,KAQ5B,GAAA,SAAA,CAAA,IAAA,CAAA,KAAA,CAAA,EAAsC,ClCrFnD,AkCsFQ,C7C/OR,AWyJA,AkCsFA,AjDrGA,CeeA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,AkC8FS,ClC9FT,AkC8FA,CAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA,uEAWqC,CAHrC,6BAQwD,CzCydxD,AyC5dA,CAAA,AzC4dA,CACyE,AyC7dzE,CAAA,AzC8dK,CyC9dL,CAAA,CAAA,CAAA,CAGiE,CAAC,YAElE,CAAA,GAAA,OACM,CAAN,AzC4dA,CyC5dA,AzC4dA,AyC5dA,CzC4dA,AyC5dA,GAAA,CAAA,aAAA,CAAA,EAAA,YAGW,qBAKP,C7C5PJ,A6C0PA,AzC+dA,AOxjBA,CPwjBA,AJztByB,A6C0PzB,CAAA,MAAA,CAAA,CAAA,SAAA,CAGqB,CzC4drB,AOxjBA,MAAA,CAAA,CAAA,CAAA,CkC6FyB,CACrB,CALJ,AAKyB,CALzB,CAAA,CAAA,CAAA,CAAA,cAWsC,EAAA,KAAA,EAC9B,EACA,CzCwdR,AyC1dA,ApD6BA,CW6bA,AyC1dA,ApD6BA,CoD7BA,ApD6BA,CAAA,AoD7BA,AzC0dA,CAAA,AyC1dA,CAAA,ApD6BA,CAAA,AoD7BA,AzC0dA,CX7bA,AoD3B+B,AzCwd/B,CX7bA,AoD1BO,AzCudP,CyCldA,AzCkdA,CX7bA,AW6bA,UyCpdgC,KASL,GACV,CpDwBjB,AkBrHA,AfdA,AIxJA,A6CmQA,IAAA,CAAA,IAIM,EACA,EACA,CjD/GN,AHmIA,AoDvBA,CpDuBA,AoDvBA,CAIQ,CAJR,CAAA,CAAA,CAIY,EACJ,8DAAR,qBAuBA,CAEA,CAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAEE,ClChFF,AkC8EA,ApDeA,CkB7FA,AlB6FA,AkB7FA,AkC8EA,ClC9EA,AkC8EA,ClC9EA,AkC8EA,ApDeA,AkB7FA,CAAA,AkC8EA,ApDeA,AkB7FA,ClB6FA,AkB7FA,AkC8EA,AAKE,CALF,ApDeA,AkB7FA,AkC8EA,ApDeA,CoDfA,AlC9EA,CkC8EA,AlC9EA,AlB6FA,CAAA,AoDfA,AlC9EA,KkCqFyB,CAAzB,AlClFA,CkCkFA,AAAkC,ClClFlC,AkCkFA,ClClFA,AkCkFA,CAAA,AlClFA,CkCkFA,AlClFA,CkCkFA,AlClFA,CkCkFA,AlClFA,CkCkFA,AlClFA,CAAA,AkCkFA,CAAA,AlClFA,CAA0C,AkCkF1C,OAAmD,CAAC,CAApD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAA6D,CAAC,C7C3Q9D,EAAA,EAAA,SAAA,EAAA,EAAA,S6C6Q4D,CpDU5D,AoDTA,CpDSA,AoDTA,EpDSA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,AoDTA,CpDSA,AoDTA,CpDSA,AoDTA,CpDSA,CAAA,CAAA,KoDTA,CAAA,CAAA,CAAA,EAAA,KAAA,QAGI,CjDtHJ,AiDsHA,CAAA,AjDtHA,GAAA,GAAA,uBiDwHI,CAAJ,AjDvHA,CAAA,AiDuHA,A7CtQA,C6CsQA,AjDvHA,qFiD6HoB,CjDtHpB,AeqCA,AkCiFA,CjDtHA,AeqCA,AkCiFA,CjDtHuB,AeqCvB,AkCiFA,EAAA,SACI,C7CpQJ,A6CoQA,sCAG2D,CAD3D,ApDaA,CoDbA,ApDaA,CoDbA,ApDaA,AoDXQ,CAFR,ApDaA,CoDbA,CAAA,CAAA,CAAA,CAAA,CAEe,CACR,WAEoC,EAAQ,CAAnD,IAAwD,CAAC,CAEzD,CAEA,SAAgB,GAAA,CACM,CACpB,CAAsD,AAFxD,CAGE,AAHF,CAAA,AAGiD,AAHjD,CAAA,CAAA,AAKE,AALF,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,AAKQ,CzCucR,AyC5cA,AzC4cA,CyC5cA,CzC4cA,AyC5cA,CAK+B,AAL/B,CAKiC,AALjC,CjDvGA,AeqBoB,AkCuFc,AzCuclC,CAAA,CAAA,CyCvc0C,CAA1C,AlCvFA,AP8hBA,CAAA,AyCvcA,AlCvF8B,KAAA,CAAA,CAAA,CkCuF6B,ClCvF3D,AP8hBA,AyCvcA,ClCvFA,AP8hBA,AyCvcA,AAgCE,ClCvHF,AP8hBA,AyCvcA,AAgCA,ClCvHiD,AP8hBjD,AyCvcA,ClCvFkD,AP8hBlD,AyCvcA,CzCucA,AyCvcA,CzCucA,AyCvcA,CAAA,A7CxQA,AI+sBA,CyCvcA,AzCucA,CAAA,AyCvcA,CzCucA,AyCvcA,CAAA,AzCucA,CAAA,AyCvcwE,CzCucxE,CAAA,CAAA,CAAA,CAC+B,AJhtB/B,CIitBG,MJjtBH,wB6CkRmB,EAAA,EAAA,WAGnB,CAAuC,CAG/B,GAAA,IAAA,CAAa,CAArB,CAA8B,AAA9B,CAAA,CAAA,CAAA,CAAA,CAAA,AAA4B,CAAQ,CAAC,EAAE,QAClB,CAArB,AlCrFA,AfjBA,yCiDqHS,EAGT,CAAA,CAAA,CAAA,CAAA,CAAA,IAAS,GAAA,CAAA,SAGA,SAAS,A7CpRlB,C6CoRA,A7CpRA,A6CoRuC,C7CpRvC,A6CoRA,A7CpRA,AW4LA,AkCwFyC,CAAzC,A7CpRA,A6CoRA,AAAiD,ClCxFjD,AX5LA,A6CoRA,A7CpRA,C6CoRA,AlCxFA,AkCwFA,A7CpRA,CW4LA,AX5LA,A6CoRA,A7CpRA,AW4LA,CkCwFA,AlCxFA,AX5LA,AW4L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A/DvMA,CW4MA,AMxKA,CAAA,CNwKA,AMxKA,CAAA,ANwKA,2FMzJqB,C8C4JrB,AjDrLA,AdXA,AI9EA,AyC6LA,AGzKA,aAAA,C/B+FgB,CjBrChB,AgD1DA,AlCqEA,AVzFA,QAAA,CAAA,CaqH4B,CAL5B,8CAQyC,CAAA,EAAA,KAAwB,CAAA,EAAA,CAAA,EAAA,KAAA,CAAA,GAAA,CAAA,EAAA,KAAA,0DAKjE,CAAA,ACjGA,AdrBA,CAAA,EAAA,KAAA,CasHyE,CAAzE,CAAA,CAAA,IAAA,CAAkF,KAIxE,CAAA,UAAA,CAAA,CAAA,SAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACN,EAAA,EAAA,aAAA,CAAA,EAEE,CAFN,AbnHA,AciBA,CAAA,ADkGA,CClGA,AdjBA,AamHA,CClGA,AdjBA,AamHA,CbnHA,AamHA,AClGA,CDkGA,AClG4D,AdjB5D,uIa4HmE,CAAC,CAApE,CAAA,AAA6E,CAA7E,CAAA,AAA+E,CAA/E,CAAA,CAAA,CAA4E,GAIlD,gGAoBiB,CAAA,0CAIpB,EAAA,SAAA,uDAUmB,CAA1C,AYgBA,AmBrHA,A1B0jBA,COrcA,AZhBA,AKqdA,AtB1gBA,AiBqDmD,CjBrDnD,AsB0gBA,AOrcA,AZhBA,A+BrGA,A1B0jBA,AOrcA,A7BrEA,CAAA,AgDhDA,AnBqHA,AZhBA,AKqdA,CtB1gBA,AiBqDA,A+BrGA,A1B0jBA,AOrcA,CZhBA,AKqdA,AOrcA,AmBrHA,CAAA,A1B0jBA,AtB1gBA,A6BqEA,AZhBiD,C+BrGjD,AhDgDA,A6BqE0D,kBZf1D,C+BrGA,AhDgDA,AiBqDA,Ab7HA,Ca6HiD,CAAjD,Ab7HwD,Ca6HG,AjBrD3D,AgDhDA,A/BqGA,C+BrGA,AhDgDA,AiBqDA,A+BrGA,AhDgDA,AiBqDA,Ab7H0D,CAA1D,A4CwBA,AhDgDA,AiBqDA,A+BrGA,AhDgDA,AiBqDA,C+BrGA,A/BqGA,AjBrDA,CIxEA,AJwEA,AgDhDA,A/BqGA,CAAA,AjBrDA,AgDhDA,A/BqGA,C+BrGA,A/BqGA,CjBrDA,AiBqD0D,GAAW,CAArE,EAAA,CAAA,EAAA,CAAA,CACgB,CADhB,CAAA,CAAA,AAC4B,CAD5B,CAAA,CAC+C,AAD/C,CAAA,CAC+C,AAD/C,CAAA,CAAA,CAC2B,AAD3B,CAAA,CAAA,AAC+C,CAD/C,AAC+C,CAD/C,CAAA,CAAA,CAAA,CAAA,CAC6C,EAAE,EAAA,UAAA,KAEZ,SAAA,CAAA,EAAA,KAAmC,CAAC,CACzD,CADd,CACgB,YAIS,C4BmKzB,AkBhBA,AElHgC,ApCfhC,AZlBA,KgDiCgC,ChDjCE,C4BmKlC,A5BnKmC,AjBtDnC,A+DyMA,AlCjIA,CfrCA,AeqCA,AgBiJA,kC5BjK0C,CAAC,gDAS5B,EAAA,YAAA,EAA6B,uDAQN,YAAA,mBACL,eACL,Cb1H5B,A2D4QA,AlC9HA,AZpBA,AjBtDA,E+DwMA,G9ClJsD,C8CkJtD,AjD5JA,AGUA,CjBtDA,AiBsDA,A8CkJA,A/DxMA,Cc4CA,AGUA,A8CkJA,A/DxMA,CAAA,A+DwMA,AjD5JA,AGUA,CHVA,AGUA,AjBtDA,CAAA,A+DwMA,AjD5JA,AGUA,CjBtDA,A+DwMA,A9ClJA,CAAA,AHVA,Ad5CA,CiBsDA,A8CkJA,C/DxMA,A+DwMA,AjD5JA,CAAA,AiD4JA,A9ClJiE,AjBtDjE,Cc4CA,AiD4JA,A/DxMA,QIhEA,KAAA,Ia6HY,CAAZ,AHZA,AVjHA,Ca6HA,Ab7HA,A6BiCA,ChB4FA,AgB5FA,A7BjCA,AUiHA,AqDzJgC,OlDsKF,CgB5FK,A8B6OnC,AjD7JA,AGYgC,CAAA,EAAA,CAAA,CAAhC,CC1F8C,AJ8E9C,AGY0D,CAAC,AC1FZ,CJ8E/C,CAAA,EAAA,CGca,AHdb,CAAA,AmB7EA,A7BjCA,AOuSA,CGzLA,AHyLwB,AsBtQxB,A7BjCA,CU8GA,CAAA,CAAA,EGeyB,C8CmJzB,A3D/QA,AyBgJwB,AZpBxB,EAAA,EAAA,EAAA,cAEgC,kFAOgB,CAAC,CHRjD,AiDsJA,A7C9OA,ADgGA,CAAA,A8C8IA,AjDtJA,CGQA,AChGA,A6C8OA,AjDtJA,CGQA,A8C8IA,A7C9OA,AJwFA,CAAA,AiDsJA,A9C9IA,AChGA,CDgGA,A8C8IA,A7C9OA,CJwFA,AIxFA,A6C8OA,A9C9IA,C8C8IA,A9C9IyD,AChGzD,AJwFA,CiDsJA,AjDtJA,8BGSkD,CAAC,CAAnD,Ab7HA,CAAA,GAAA,CAAA,YASA,+Ha0HA,C8CiJA,A7ClPA,ADiGuD,AjBjCvD,C+DkLA,A/DlLA,AkBhEA,C6CkPA,A7ClPA,AlBgEA,gBiBsCuB,qBACI,CAAC,CAA5B,AgB5FA,CAAA,AhB4FA,AYkBA,AZlBmC,CgB5FnC,AJ8GA,AZlBA,CAAA,AYkBA,AI9GA,ChB4FA,AgB5FA,AJ8GA,GAAA,CZlB2C,6DAU3B,C8C8IhB,Q9C7II,CAAO,AAJX,A8CiJA,CAAA,A9CjJA,A8CiJA,C9CjJA,A8CiJA,CAAA,A9CjJA,C8CiJA,A9CjJA,CAAA,A8CiJA,iE9CtIsD,CAAtD,AHjBA,AmBlFA,A7B1BA,C6B0BA,AhBmGkE,Ab7HlE,Aa6HA,AHjBA,CGiBA,AHbS,AVhHT,A6B0BA,AhBmGA,AHfsC,CV9GtC,Aa6HA,Cb7HA,A6B0BA,AhBmGA,IgBnGA,qOhBkImC,CjBrCnC,A6BqDA,APoeO,eLnfyB,CAAhC,A8CyIA,AjD5JA,AInFA,AlBmEA,WAAA,qCiBqCsC,GAAA,EAAA,+BAmBtC,sEHjXwC,+EAM0B,EAAA,EAAA,sLAoCnD,CGQf,A8BhFA,AFyJA,UEzJA,CAAA,CjC0E4C,C+B+E5C,AEzJA,sBjCoFU,EAAA,kZA+BuB,CAAA,CAAc,CAAE,CADjD,AHiMA,AsB3PA,wDnB+D0C,CAC9B,EAAA,EAAA,EAGA,CAJZ,AkC7DA,CAAA,AlC6DA,CkDuHa,AlDvHb,CkC7DA,AlC6DA,2GAsEgB,SACZ,CH6LJ,AX5MA,AkB1DA,AJqEA,AiDiLiE,AfxPjE,AHgLA,AGhLA,CHgLA,AlCwFA,AGjMA,AiDiLkE,A7CtPlE,AlB0DA,AgD5DA,ChD4DA,A6CoHA,AlCwFA,AGjMA,AIrEA,CJqEA,AdXA,A6CoHA,A3B9KA,APsQA,AqCxQA,CAAA,AlCuEA,AdXA,AW4MA,6CG9KM,GAAA,EAAA,iBAAA,CAAA,EAA6C,EAAA,GAAA,EAAA,EAAA,EAAA,WACkB,GAAA,GACnD,EAAA,KAAA,CAAA,GAAA,CAAA,EAAA,yCAEoB,CV9FtC,AyCiMA,AlC0FA,AoDhBA,A9B3OA,CAAA,AYiKA,AlC0FA,AP3RA,CyCiMA,AlC0FA,AsB3PA,CAAA,AYiKA,AzCjMA,AO2RA,CP3RA,AyCiMA,AlC0FA,CsB3PA,A7BhCA,AyCiMA,AlC0FA,CP3RA,AyCiMA,AZjKA,CtB2PA,AkC1FwD,AzCjMxD,A6BgCA,CtB2PA,AP3RA,+BU8GgB,CAHhB,CAAA,AdrBA,CAAA,AcqBA,CAAA,AdrBA,CcqBA,AdrBA,CcqBA,AdrBA,CcqBA,AdrBA,EcwByB,CAClB,wBAGsB,Cd1B7B,A6BoEkC,AgB8GlC,AvByVA,ARjfA,AGsBA,ANuKA,WAAA,CAAA,GAAA,CAAA,EAAA,IAAA,CAAA,KAAA,qJGhKa,CAAA,CAAE,EAAA,aACT,GAA8C,CiDoKpD,A/DzMA,AcqCA,AV1GA,C2D8QA,A3D9QA,AU0GA,CAAA,AV1GA,A2D8QA,A/DzMA,CAAA,A+DyMoD,AjDpKpD,KAGmB,CemCnB,AzB9IA,A2D8QA,AjDnKA,AmBvEA,AedA,EAAA,CAAA,clCuF4B,CmBxE5B,AfHA,AD2FuB,AjBvDvB,AIrEA,IUoIY,wBAvB8C,CdvC1D,AiCjCA,CjCiCA,AiCjCA,EAAA,AjCiCA,CiCjCA,AjCiCA,CiCjCA,AjCiCA,CiCjCA,AjCiCA,CiCjCA,AjCiCA,CAAA,acyCqB,EAAA,IAAA,CAAA,KAAA,kDAOY,CAAjC,AQseA,ALxdA,A8CmJ8B,A9B3O9B,A7BlCA,AyB+IA,gBfnCkD,CACxC,EAAA,6BAME,EAAA,8BAaqD,Ce6BjE,AzB/IA,AUkHA,CVlHA,AUkHA,Ae6BA,AzB/IA,CUkH+E,AVlH/E,AyB+IA,Af7BA,Ce6BA,Af7BA,AAAgF,AVlHhF,CAAA,AUkHA,Ae6BoE,CzB/IpE,AyB+IqE,Af7BrE,AACU,CVnHV,AUkHA,CAAA,AVlHA,gDUyHgB,CIrFhB,A6C8OA,AjD3JA,GAAA,CAAA,KAE0B,CIrF1B,AJsFU,CItFV,AJmFA,CAAA,CInFA,AJmFA,CAAA,AInFA,CAAA,AJmFA,CInFA,AJmFA,CAAA,AInFA,CJmFA,AInFA,CAAA,AJmFA,CAAA,AInFA,CJmFA,AInFA,CJ0F2B,AAP3B,CInFA,A6CgPA,AlC9H4B,A2B1JQ,A1C8Hb,CItFvB,AsCxCqC,A3B0JR,AkC8H7B,AjDzJS,CIvFT,AsCxCsC,AOwRtC,EAAA,A7ChPA,C6CgPA,A7ChPA,CAAA,C6CgPA,A7ChPA,C6CgPA,A7ChPA,C6CgPA,sBjD/IqC,CAArC,AmDsC4C,AFqH5C,A/DlLA,AiBiCA,CHVgD,AdvBhD,AiBiCA,AHVA,AiD2J6C,CjD3J7C,AdvBA,AiE6DA,A/C7HA,C+C6HA,A/C7HA,AJuFA,AdvBA,CiE6DyD,A/C7HzD,AJuFA,AAGQ,Ad1BR,Cc0BA,AI1FA,A+C6H0D,AtD6I1D,AXxMe,AIvFf,AayHA,A8CgJA,AjD7JA,AdvBA,C+DoLA,A7CpPA,A+C6H2D,AnDtC3D,AdvBA,CAAA,AkBhE+B,AJuF/B,CiD6JA,KAAA,CjD1JiC,CGUjC,AHVA,AiD0JA,A/DlLA,CiBkCA,AjBlCA,AcwBA,AGUA,CjBlCA,AcwBA,AGUA,eHcM,GAAA,CAAA,EAAA,EAAA,CAAA,EAAA,QAAyC,CAAC,CiDyJC,AjDzJjD,AV/GA,CAAA,wFU6HU,MAES,EAAQ,KAAK,CAAC,CQufjC,ARvfA,AIxFA,A6CmPA,A3D5QA,AJ6FA,CAAA,AI7FA,AUiHA,AIxFA,A6CmPA,AzC4VA,CtB3gBA,A+D+KA,A3D5QA,AUiHA,AIxFA,CdzBA,QUmHa,EAAA,0BAlCb,WAuCoC,CiD4JpC,A7C9OA,AlBoEA,AIjFA,CAAA,AcaA,AlBoEA,A+D0KA,GjD3JY,CmDmCZ,AFyHA,AlCjHA,Af3CA,CAAA,GAAA,iCAOyE,EAAzE,mBACwC,kBAS5B,CAAC,MAAA,EAAA,IAAA,CAAA,MAAA,CAAA,OACc,CAAC,EAAA,EAAA,EAAA,IAVY,OAAA,2BAeQ,CiDwJhD,A7CzOA,AJiFA,CiDwJA,AjDxJA,CiDwJA,A7CzOA,AJiFA,CiDwJA,A7CzOA,AJiFA,CAAA,AiDwJA,A7CzOA,CJiFsD,AiDwJtD,CAAA,A7CzOA,AJiFuD,CIjFvD,C6CyOA,A7CzOA,C6CyOA,A7CzOA,CAAA,A6CyOA,CAAA,A7CzOA,C6CyOA,A7CzOA,CAAA,C6CyOA,A7CzOA,C6CyOA,A7CzOA,CAAA,CAAA,A6CyOA,gBjDtJ4C,CAAA,EAAA,WAAA,CAAA,eAuS5C,CIvIA,AJuIA,CIvIA,AJuIA,CAAA,AIvIA,MJuIS,CAAT,AIvIA,A6CoOA,CjD5FE,CegBF,AkC4EA,AjD7FA,AAC6B,CegB7B,CAAA,EfbE,CAAF,AInIA,CAAA,CAAA,AJmIA,AAAM,CiD2FN,A7C9NA,AJmIA,CInIA,AJmIA,CAAA,AInIA,A6C8NA,CjD3Fe,GAAS,CAAC,CeczB,AfdA,CecA,AfdA,CAAA,AAAkC,AeclC,CfdA,AHoJA,AGpJA,Aec2B,ClBsI3B,AGpJA,CHoJA,AGpJA,AAAmD,CHoJnD,AGpJA,CHoJA,AGpJA,CHoJ8B,AGpJ9B,AAA2D,CAA3D,CAAwD,CAAC,IAAE,EACzD,CQokBF,ARpkBA,CI3IA,AI+sBA,CAAA,ARpkBA,AAAM,CAAA,GAAS,Ceef,APqjBA,AyCleA,AjDlGA,CiDkGA,AzCkeA,ARpkBA,AeeA,CkCmFA,AjDlGA,AQokBA,AOrjBA,APqjBA,CAAA,AOrjBA,AkCmFA,AjDlGA,CAAA,AQokBA,AOrjBA,AkCmFA,ClCnFmB,APqjBnB,AyCleA,AjDlGA,AAAuC,CQokBvC,ARpkBA,AQukBA,AJhtBA,A6C2OA,AjDlGA,CQukBA,AJhtBA,AJyIA,CAAA,AQukBA,IAAA,MRrkBQ,CI1IR,AJ0IA,CAAA,EACS,CiDqGT,AlCtFA,AfhBA,CegBA,AkCsFA,AjDtGA,AI1IA,CJ0IA,AiDsGA,AlCtFA,AX1JA,CAAA,EAAA,EAAA,IAAA,CJ4IM,CI3IN,CAAA,CAAA,CJ4IW,EAAK,CI1IhB,A6C+OA,AlC/EA,AftBA,GAAoB,MACH,IAAA,EAEX,EAAK,IAAA,EAAQ,CAAnB,AIzIA,AWiKA,CfxByB,CewBzB,AfxBA,CewBA,AlB8HA,AGtJA,CewBA,AfxBA,AHsJA,CAAA,CGpJQ,CiDqGR,AjDrGA,CiDqGA,AjDrGA,CiDqGA,AjDrGA,CAA+B,AAA/B,CHqJA,AkB9HA,AfvBA,CAAA,AeuB6B,CfvBK,CAAC,CHqJnC,AGrJA,CAAA,AHqJA,CAAA,AGrJA,CAAA,EAA2C,EAAM,CAAjD,CAAA,AHqJA,CGrJoD,CAAC,CHqJrD,AGrJA,CHqJA,AGrJA,CAAA,CAAA,CAMQ,CAAR,AiDuGA,CAAA,AjDvGA,CiDuGA,AjDvGA,CAAA,IAAmB,CAAnB,AiDuGA,CjDvGyB,AAAzB,AiDuGA,CAAA,AjDvGA,CiDuGA,AjDvGA,CiDuGA,CjD3GI,CI1IJ,AJyIA,CAAA,AACsB,CHoJtB,AGrJA,CHqJA,AGrJA,CHqJA,CGpJ0B,CAD1B,CAAA,AHqJA,CGpJ6B,AHoJ7B,CGnJM,AAFN,AHqJA,CAAA,AoD9CA,A7C/OA,AJ0IA,AHmJA,CAAA,CAAA,AGnJA,AiDqGA,CpD8CA,CAAA,CGnJe,CHmJf,CAAA,EAAA,CGnJsB,AHmJtB,CAAA,AoD9CA,A7C/OA,AJ0IA,AesBA,ClB6HA,AGnJ2B,CHmJ3B,CAAA,CAAA,CAAA,CAAA,CGlJY,AHkJZ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EG9IM,CI3IN,AJ2IA,CI3Ie,AJ2If,AAAuB,OACQ,CAA/B,GAAmC,CiDuGnC,AjDvGA,CAAA,AiDuGA,CAAA,AjDvGsC,CAAC,CiDuGvC,AjDvGA,CAAA,AiDuGA,AjDvG6C,CAA7C,AiDuGA,CAAA,AjDvGA,CAAgD,CAAC,CiDuGjD,AjDvGA,CAAA,AiDuGA,CAAA,AjDvGA,CAAqD,CiDuGrD,AjDvGA,CAAuD,AiDuGvD,CjDvGwD,AiDuGxD,gBjDrGsB,CeqBtB,AkCqFA,AzC4dA,ARtkBA,AI5IA,C6CsPA,A7CtPA,AIktBA,ARtkBA,AAAgC,CiD0GhC,AlCrFA,AXjKuB,AIktBvB,ARtkBA,MACa,GAAG,CAAA,GAAA,CAAK,CeqBrB,AXjKA,AJ4IA,AiD6GA,CjD7G0B,CiD6G1B,A7CzPA,AWiKA,AfrBA,CAA0C,CI5I1C,AJ4IA,AeqBA,CfrBA,AeqBA,AXjKA,AJ4IoD,CAApD,AI5IA,AWiKA,AfrBA,AI5IA,CWiKA,AXjK8C,AJ4I9C,AI5IA,AJ4I0D,CI5I1D,AJ4IA,AI5IA,CAAA,AJ4IA,AI5IA,AJ4IA,CAA6D,AAAJ,AI5IzD,CJ4I8D,CAA9D,CAAA,CAAiE,CAAC,CAAlE,CAAA,CAAqE,CAAC,CAAC,CAAC,CAC/C,CAAzB,AiD6GA,A7CzPA,AP8RA,CO9RA,AP8RA,AoDrCA,AjD7GA,CiD6GA,A7CzPA,AP8R0B,AGlJ1B,CI5IA,A6CyP+B,AjD7G/B,EAAA,CAAA,KAGI,EAAmB,OAAO,CAAA,AAAE,IAC1B,CAAN,AQwkBA,CAAA,ARxkBA,AAAa,CQwkBb,ARxkBA,EAAgB,CAAC,GAAG,CACZ,CI9IR,AIqtBA,ARxkBA,CQwkBA,ARxkBA,AAEQ,CI/IR,AIqtBA,ARxkBA,AI7IA,AJ8IW,CQukBc,AJrtBzB,AJ6IA,AAEwB,CAFxB,AI7IA,AJ6IA,CI7IA,AJ6IA,AI7IA,AJ6IA,AAE8B,CAF9B,AI7IA,AJ6IA,AI7IA,AJ6IA,CI7IA,AJ6IA,AI7IA,AJ6IA,AI7IA,AJ6IA,CI7IA,AJ6IA,AI7IA,AJ+I6B,AAAI,CAFjC,AI7IA,AJ+IkC,CAFlC,AI7IA,AJ6IA,CI7IA,AJ6IA,AI7IA,AJ6IA,CI7IA,AJ6IA,AAEqC,CAFrC,AI7IA,AJ+IsC,CI/ItC,AJ6IA,AI7IA,AJ6IA,CAAA,AI7IA,AJ6IA,CAEuB,AI/IvB,AJ+IyC,AAAG,CI/I5C,AJ+I0C,AAF1C,AI7IA,CAAA,AJ6IA,AAEiD,CI/IjD,AJ6IA,AI7IA,AJ6IA,CI7IA,AJ+IgD,AI/IhD,AJ6IA,CAEoD,CAAA,GAAI,CAAC,CAFzD,CAAA,CAE4D,CAAC,AAEzD,CAF0D,AQukBzD,ARrkBA,AiDyGL,CjD1GO,AiD0GP,AzC4dM,ARrkBA,CiDyGN,CAAA,MjDtGS,CACT,EA9U6C,CAA7C,AHuLA,AkB1IA,ClB0IA,AGvLA,Ae6CA,AlB0IA,CkB1IA,AlB0IA,AGvLA,CAAA,AHuLA,CkB1IA,Af7CA,AHuLA,CkB1IA,AlB0IA,AGvLA,CHuLA,AGvLA,Ae6CA,CAAA,Af7CqD,AHuLrD,GGvL+D,Ce6C/D,8Bf5C6D,CAAA,GAAI,CAAC,CAAlE,CAAA,CAAA,CAAA,CAEQ,AAF+D,CAAC,CAEhE,AAFiE,YAEjE,CAAA,GAAwB,CAAA,EAAA,wFAkB5B,CAAA,CACA,CddJ,A+DmKA,ApD8BA,AGtLA,AAGyB,CiDqJzB,ApD8BA,AGtLA,AAGyB,CACD,CAAA,QAE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AAA,EAAA,CAAA,KAAA,EAAA,EAAA,KAAA,CAAA,aAAA,CAAA,EAAA,OAAA,kBAQkB,CAAA,EAAA,KACpB,CH6JR,AG7JA,AmBzJA,CnByJA,AmBzJA,AtBsTA,CAAA,AG7JA,CAAA,EAAqB,CAArB,AmBzJA,A8B6PA,C9B7PA,A8B6PA,AjDpGA,AH6JA,AsBtTA,C8B6PA,ApDyDA,AG7JA,CmBzJA,A8B6PA,ApDyDA,AG7JA,AmBzJA,CAAA,AtBsTA,AG7JA,IACqB,CH6JrB,AsBtTA,Af+BA,AJ0HA,CAA6B,AH6J7B,AsBtTA,AnByJA,AI1HA,CJ0HA,AH6JA,AOvRA,CJ0H6B,AAA7B,AH6JA,AsBtTA,Af+BA,CAAA,Ae/BA,AnByJA,CH6JA,AsBtTA,AnByJA,CmBzJA,AnByJA,AI1HA,APuRA,COvRA,APuRA,AsBtTA,AnByJ6B,WAEN,CAAvB,AI1HA,CJ0HA,CI1HA,AJ0HA,WAEyB,IAAA,CAAK,CAA9B,AIzHA,Ae9BA,CnBuJA,AIzHA,Ae9BA,CAAA,Af8BA,AJyHA,CmBvJA,AnBuJA,AIzHwC,Ce9BxC,AnBsJ4B,AAC5B,qBAGU,CADV,AiDsGA,A9B7PA,AtBuTA,CsBvTA,AtBuTA,AGhKA,AiDsGA,EjDnGU,CAHV,AmBvJA,A8B6PA,ApD0D4D,CoD1D5D,AjDtGA,AmBvJA,A8B6P0D,C9B7P1D,A8B6PA,AjDtGA,CiDsGA,A9B7PA,AnB0Jc,AiDmG4C,C9B7P1D,A8B6P0D,EjD/F9C,CH2JK,AG3JjB,AI9HA,GJ8HA,GACU,AACA,GAFiB,AACjB,GAAiC,CAA3C,CAAA,EAA+C,CAA/C,CAAA,CAAkD,AAAlD,CAAoD,CAC1C,GAAiB,CAAC,CiDiG5B,AjDjGA,CAAA,GmB1JA,OnB6JmC,CAAnC,CAAA,AeYA,CAAA,KfZ6C,CeY7C,AfZA,CeYA,AfZA,CeYA,AfZA,CAAA,AeYA,kEfCI,AewBJ,CfxBA,AewBA,AXlJA,CWkJA,AXlJA,AWkJA,CfxBA,AewBA,GAAA,oBfvBgC,CAAA,gBAAA,CAAA,EAExB,CI5HR,AJ0HA,CI1HA,AJ0HA,AAGQ,CAHR,CAAA,AI1HA,AJ0HA,AAGkB,CAHlB,AI1HA,AJ0HA,CI1HA,AJ0HA,CAAA,AI1HA,AJ0HA,CI1HA,AJ4HgB,AAFhB,AAGsB,CAHtB,AAIQ,CAJR,CAAA,AAGiB,AAET,CALR,CAAA,CAK0B,AAL1B,CAAA,CAAA,AAKkC,AADnB,AAJf,CAAA,CAAA,CAAA,CAAA,CAKiC,AALjC,AAKuC,CALvC,AAKwC,CALxC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAKkD,CAAC,CALnD,CAAA,CAKsD,CALtD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,AAaM,CAbN,AIrHA,AJkIA,CAbA,AIrHA,AJkIA,CARoE,AAQpE,AIlIA,AJkIA,CARqE,AAQrE,CAPO,AAOP,CAEA,CAAA,AInIA,QJmIS,CInIT,AJmIA,CAAA,AInIA,CJmIA,CAAA,AInIA,AJmIA,CInIA,AJmIA,GAAA,CAAA,CAAA,CAAA,CAAA,SAIO,CItIP,AJsIA,CAAA,AItIA,AJsIW,CItIX,AJsIU,EAAC,CAAI,CItIf,AWkJA,AfZA,CItIA,AWkJA,AfZA,UACkB,CAAlB,AiD2FA,A7CjOA,EAAA,GAAA,IJsI8C,CItI9C,A6CiOA,AjD3FgD,IAAA,IAAA,WAEhC,CAAC,CItIjB,AJsIA,AegBA,AkC2EA,ClC3EA,AkC2EA,A7CjOA,AJsIA,CA6CA,CAAA,QAAS,CQukBT,ARvkBA,CQukBA,ARvkBA,CAA0B,CAA2B,CH2IrD,AW4bA,CX5bA,AG3IA,AQukB4B,AyCzd5B,AjD7GE,CiD6GF,ApD6BA,AG1IA,CH0IA,CoD7BA,ApD6BA,CoD7BA,ApD6BA,CoD7BA,ApD6BA,CAAA,AG1IS,CiD6GT,ApD6BA,AG1IS,CiD6GT,ApD6BA,CoD7BA,CjD7GkB,AH0IlB,AoD7BA,CAAA,ApD6BA,AG1ImB,CiD6GnB,AjD7GmB,AH0InB,CoD7BA,ApD6BA,CG1IyB,AH0IzB,CoD7BA,ApD6BA,CoD7BA,ApD6BA,CAAA,CoD7BA,ApD6BA,AG1IyB,CiD6GzB,ApD6BA,CoD7BA,ApD6BA,AG1IiC,CIlJjC,AP4RA,AACA,AkB3HA,AkC8FA,AjD9GA,AiD6GA,CAAA,A7C/PA,AP6RA,AkB3HA,AfhBA,AiD8GA,AjD9GqC,CiD8GrC,A7ChQA,AP6RA,AkB3HA,AfhBA,AiD6GA,ApD6BA,CoD5BA,A7ChQA,AP6RA,AkB3HA,AfhBqC,AiD6GrC,ApD6BA,CG1IqC,AiD6GrC,ApD6BA,CG1I0C,CAA1C,AIlJA,A6CgQA,ApD6BA,AADA,AoD7BA,CpD6BA,AO5RA,AJkJA,CiD6GA,ApD6BA,CO5RA,AJkJ8C,AiD6G9C,CACA,AjD9G+C,AH2I/C,AO7RA,A6C+PA,ApD6BA,CO5RA,A6CgQA,ApD6BA,AGxIA,AiD0GA,ApD6BA,CGvIA,AHwIA,AoD7BA,A7ChQA,CJqJA,AiD2GA,A7ChQA,CJqJA,AiD2GA,ApD6BA,AO7RA,CP6RA,AO7RA,C6CgQA,ApD6BA,AO7RA,CP6RA,AoD7BA,A7ChQA,CAAiD,AP6RjD,AoD7BA,CAAA,A7ChQkD,CP6RlD,AoD7BA,AjD3GS,CiD2GT,ApD6BA,CoD7BA,ApD6BA,CGxIoC,AiD2GpC,ApD6BA,CGxIsC,AiD2GtC,CzC4dA,AX/bA,AoD7BA,AAEA,ApD6BA,AG1IA,CiD2GA,ApD6BA,CoD7BA,CpD6BA,CAAA,AoD7BA,AjD3GA,CAAsD,AHwItD,AoD7BA,CjD3GsD,AHwItD,CGxI6E,AiD2G7E,ApD6BA,CAAA,AoD7BA,CjD1GE,AiD0GF,CjD1GA,GAAQ,EAAY,CH0IpB,AW6bA,ARvkBA,CH0IA,AW6bA,ARvkBA,AAAwB,CH0IxB,AG1IA,EAA2B,CAAC,CQukB5B,ARvkBA,EIjJA,GAAA,GAAA,KJmJI,CIlJJ,AJkJA,CAAA,CAAuB,CekBvB,AkC+FA,AzCsdA,ARvkBA,CQukBA,ARvkBA,AekBA,AkC+FA,ClC/FA,APqjBA,ARvkBA,AiDiHA,ClC/FA,AfnBgD,CemBhD,AlBuHA,eGtIA,eA6FE,CAAA,CAAA,CAAA,MAGI,CAAN,gBACuC,UAAU,CiDqGjD,AjDrGmD,EiDqGnD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,AAEqB,EAFrB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GjDnGiD,GAA7B,CAApB,AiDqGqB,GAAA,CAAA,KAAA,gBjDpGmC,CQioBxD,CAAA,CAAA,CAAA,CAAA,CJ1yBA,AI0yBA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAA4E,IR5nBtE,EAAA,4CAIK,EAAO,UAAA,UAGT,IAAA,KAAA,EAAA,eAGwB,CeqBjC,AfvBA,CeuBA,AfvBA,AAE4C,CeqB5C,AfvBA,CeuBA,AfvBA,CeuBA,AfvBA,AAE0D,CAF1D,AeuB4E,AfvB5E,CAAA,AeuB6E,AfvB7E,CAAA,CAAA,AAE0C,CAF1C,CAAA,CAAA,CAEuD,AAFvD,CAEyD,AAFzD,CAAA,CAAA,CAEsE,CAC9D,CAHR,CAAA,CAAA,CAAA,CAAA,CAAA,AAK8B,CAL9B,AAKA,AIzKA,CAAA,AJoKA,AAKA,CALA,AAKA,CAAA,AALA,AIpKA,CAAA,AJyKA,AAFmB,CACZ,sBAMP,msBmBjzB0B,CeG1B,A5CZA,A6BOA,AiCDoB,C9DNpB,A6BOA,AeKA,EAAA,GfH0C,WAAa,WAAE,CAFzD,CAEoE,AAFpE,CAAA,AAEqE,CAFrE,AAEsE,AAChE,CAHN,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAGe,CACV,oHAUiB,UAGE,EAAA,UAAA,CAAA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,IAAA,OACY,GAAA,gHAUpC,wEAYM,CADN,CAAA,AACY,CADZ,CAAA,CACW,AADX,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACwB,CADxB,CAC0B,CACrB,gHAamD,EAAA,OAAA,QAcpD,CAAA,CAAA,0HAeoD,CW0BxD,AX1BA,AeZ6D,CfY7D,AW2B0B,CAD1B,AX1BA,AeZ+D,CJsC/D,CAAA,IAAA,iDXpBS,CnB8DT,AmB9DA,CAAA,CnB8DA,AmB9DA,GAAA,CAAA,CAAA,yBAKoB,wCACgC,C7B/BpD,AyBkIA,AgB8DA,AzChMA,oE6BoCI,mCAM2C,CnB6D/C,AmB7DA,AYiKA,AlCwFA,CsBzPA,QAUa,+DASL,CY2NR,AG3OA,AF7BA,Ab6CA,A7BhCA,A2D8QA,GAAA,C9B9Oa,OAAA,oNAe+C,CAAA,IAAK,CtBkQjE,AX7NA,AgDhDA,AeyPA,AZtQA,CHaA,AhDgDA,AmD7DA,AxC0RA,2CsB/PA,0CAO0B,EAAE,GAWV,C7BlClB,A6BkCA,AJ6GA,AgBkJA,A/BnLA,Ad3CA,C6B4EA,AZrBA,A4BuKA,A/BnLA,AmB5EA,C7BlCA,AyB+IA,AZrBA,AHZA,Ad3CA,A6C8NA,AZ/PA,CAAsB,CnB4EtB,AmB5EuB,A8B2OvB,A/D1MA,A6C8NA,AhBlJA,AZrBA,Ab1HA,CJmEA,A6C8NA,AhBlJA,AzB/IA,AU8GA,C+BmLA,AkBpBA,A/D1MA,A6B4EA,AZrBA,Ab1HA,AU8GA,4CmB1ES,CXijBT,AWjjBA,C7BlCA,A6BkCA,AXijBA,KlBnlBA,CAAA,G6BkCoB,CAAC,oBAEX,CAAC,mBAAA,CAAA,gCAM6B,CAAC,IAAA,CAAA,OAAY,CAAA,IAAA,EAAO,SAMtD,CAAN,CAAA,CAAA,CAAA,CAAW,CAAX,CAAA,AnBwFA,iBAAA,CAAA,MmBxFqC,CAAA,QAQlC,CAJH,6BAOgB,IAAA,CAAA,cAAA,CAAA,EAAA,8CAC4C,EAAE,wBAGnD,2CAWoC,CAA/C,AnBkFA,GmBlFmD,CAAC,IAAA,AAAI,CuB1CC,A1C4HzD,AmBlFyD,CAAC,CAA1D,CAAA,AnBkFA,CmBlFA,AnBkFA,CmBlFA,AnBkFA,CmBlFA,CAAA,CAAA,+DASiE,CAAA,GASxD,CAAT,QAAA,CAAA,CAAA,iBACoC,EAAA,KAAA,kCAED,CAAC,EAAA,CAAA,EAAA,WAIlC,CJ4HF,AI1HS,CAAT,KAAe,CfKf,AJmFA,AmBxFA,AJ2HA,CAAA,SI1HmB,CAAE,CjCwErB,A+D4KA,AjD5JA,AGmBA,C8CyIA,A7C/OA,AJmFA,AGmBA,AjBnCA,CAAA,AiBmCA,A8CyIA,iD9B9OA,2FAamD,CAAnD,C8BqPA,A9BrPA,C8BqPA,A9BrPA,CAAA,A8BqPA,CAAA,A9BrPwD,C8BqPxD,A9BrPqC,CJsID,AItIsB,AAA1D,A8BqPA,A/DvKA,C+DuKA,A9BrPA,AjC8EA,C+DuKA,EAAA,CAAA,EAAA,CAAA,A/DvKA,C+DuKA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,oB9B/Oe,CAA4B,C7BY3C,AyB2HA,AX5HA,AJiFA,AHuLA,AXpMA,QiC9EI,IAAI,CAAA,IAAA,GAEJ,CAAJ,EAAA,KAAA,wEAK8D,CAAA,MAAO,CAAA,gCAE/C,iEAelB,IAAA,EAAA,IAA8B,CAAA,cAAe,CAAA,WAAA,CAAA,4EAOvC,CuBpCP,AvBoCH,OAAA,CAAA,SAEA,mDAMsB,CjCyEtB,eAAA,CiCxEoB,CAJpB,CAKQ,AALR,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAKe,qEAOU,CAAzB,AJ+IA,CI/IA,AJ+IA,YAAA,CAAA,CAAA,sCI1Ie,OAAA,sEAQwB,CnB6HvC,AiD+HA,AzCmbA,CW/qByC,C8B4PzC,AjD/HA,CQkjBA,ARljBA,CQkjBA,AyCnbA,AjD/HA,CiD+HA,AzCmbA,ARljBA,CQkjBA,AyCnbA,CzCmbA,ARljBA,CiD+HA,AzCmbA,ARljBA,CAAA,AQkjBA,AyCnbA,CzCmbA,AyCnbA,CjD/HA,AQkjBA,CRljBA,AiD+HA,CjD/HA,AiD+HA,AzCmbA,CyCnbA,AzCmbA,ARljBA,CiD+HA,AjD/HA,AQkjBA,CRljBA,AiD+HA,AzCmbA,CRljBA,AiD+HA,AzCmbA,CAAA,ARljBA,CAAA,AiD+HA,AzCmbA,CAAA,ARljBA,AiD+HA,CjD/HA,AiD+HA,CzCmbA,ARljBA,AiD+HA,CzCmbA,ARljBA,AiD+HA,CjD/HA,AQkjBA,CRljBA,AiD+HA,CAAA,AjD/HA,AQkjBA,CyCnbA,AzCmbA,ARljBA,CiD+HA,AzCmbA,CAAA,ARljBA,AiD+HA,CzCmbA,AyCnbA,AjD/HA,CAAA,AiD+HA,AzCmbA,CRljBA,AiD+HA,AzCmbA,YWnqBuB,CtBiRvB,AsBjRA,AJwJA,AkCoGA,A/D/KA,CWoMA,AXpMA,A6B2EyB,AkCoGzB,A9B5PA,CAAA,AjC6EA,EiC7E4B,CACL,C8B4PvB,ApDqBA,AGlJA,AeyBA,AP8jBA,AWttBA,CJwJA,AIxJA,AnB+HA,AHkJA,AWqcA,AtBxoBA,CiC9E0B,CAAA,mIAyBhB,CAAA,cAAA,CAAkB,CAA5B,A8BqQA,CAAA,A9BrQA,AJmKA,EInKgC,CAAC,CJmKjC,AInKA,A8BqQA,ClClGA,AkCkGA,A9BrQA,CJmKA,AInKA,A8BqQA,ClClGA,AInKA,A8BqQA,ClClGA,AInKA,A8BqQA,SAAA,CAAA,WAAA,CAAA,EAAA,+G9BnPQ,CfWR,AP8QA,AsBzRS,CtByRT,AO9QA,CAAA,OeP2B,CtByR3B,AO7Q4B,A6C6P5B,mB9BxQ6C,CAA7C,CAAA,A8ByQA,C9BzQA,A8ByQA,C9BzQA,A8ByQA,CAAA,A9BzQA,C8ByQA,A9BzQA,C8ByQA,A9BzQA,CAAA,A8ByQA,CAAA,A9BzQA,CAAA,A8ByQA,C9BzQA,A8ByQA,C9BzQA,CAAA,A8ByQA,CAAA,A9BzQA,CAAA,CAAA,A8ByQA,CAAA,A9BzQA,CAAA,A8ByQA,CAAA,CAAA,KAAA,CAAA,sD9B3PgC,CAAA,kBAEX,CAAC,CtB2StB,AOnSA,OePM,kGAMgD,CAChD,CnB0JN,AmB3JA,CnB2JA,AmB3JA,CnB2JA,AmB3JA,CACU,CAAC,CnB0JX,AmB3JA,CAAA,AnB2JA,CmB3JA,AnB2JA,CmB3JA,AnB2JA,CmB3JA,CAAA,AnB2JA,CmB3JA,AnB2JA,CmB3JA,AnB2JA,CmB3JA,AnB2JA,CAAA,AmB3JA,CnB2JA,AmB3JA,CAAA,AnB2JA,CmB3JA,AnB2JA,CmB3JA,AnB2JA,QmB1JiC,CAAC,CADlC,CAAA,CAAA,AAGE,CAHF,AAKS,CALT,AXmvBA,AW9uBA,CX8uBA,AWnvBA,AAKA,CAAA,AX8uBA,AWnvBA,CAC0C,CAAC,CACtC,UXivBL,CAAA,CAAA,CAAA,CAAA,qCW1uBwC,CAAC,CnBqJzC,AmBrJA,CnBqJA,AmBrJA,AnBqJA,CAAA,AmBrJA,CAAA,AnBqJA,AmBpJE,CAEO,AAHT,CAGA,AnBkJA,AmBrJA,CAGA,AnBkJA,AmBrJA,CAAiD,AAGjD,CnBkJA,WmBlJA,CAAA,CAAA,6BACgC,CtBqThC,AkBrJA,AIhKA,CJgKA,OIhKyC,CJgKH,AIhKtC,GAA0D,CAA1D,CAAA,CAAA,CAA8D,AAC5D,CAEU,CAAZ,CAAA,CAAA,cAAA,CAAuD,CAAvD,CnBoJA,AI1HA,CJ0HA,CAAA,EmBnJa,CAAC,OAAO,C8BgQrB,AjD5GA,AeWA,cI9JmB,CJ+JnB,AfXA,AI3HA,AP6RA,AsBtTA,MAAA,CAAA,GAAA,IAAA,CAAA,mBAAA,CAA2D,CtBsT3D,AsBtT4D,CnBoJ5D,AHkKA,AsBtT8D,CtBsT9D,AsBtTA,CnBoJA,AHkKA,AsBtTA,CnBoJA,AHkKA,AsBtTA,AAEE,CnBkJF,AmBpJA,AAIU,CtBkTV,AsBtTA,CAAA,AnBoJA,AHkKA,CAAA,AsBtTqE,CtBsTrE,AsBtTsE,AnBoJtE,mBmBhJU,CAAA,CAAA,CACN,CAAJ,Af+BA,AI4sBA,CAAA,AW3uBA,Af+BA,Ce/BU,CAAA,UAAA,CAAA,CAAA,CAAgB,CtBqT1B,AoDtDA,AjDvGiB,AmBxJjB,Af+BA,GAAA,CAAA,MAAA,2BerBU,CAAV,Af+BA,cAAA,CAAA,Ce/BgD,CJiKhD,AfRA,AI1HA,APuRA,AsBtTA,AAA0E,CAA1E,Af+BA,Ae/B0E,CACtE,CtBsTJ,AOvRA,Ae/BA,CtBsTA,AOvRA,Ae/BA,CtBsTA,AsBtTA,UAAY,CtBsTZ,AsBtTA,Af+BA,Ae/BA,AnByJA,CH6JA,AsBtTA,Af+BA,Ae/BA,CtBsTA,AsBtTA,Af+BA,AJ0HA,AmBzJA,AAAyB,AnByJzB,AI1HA,CAAA,Ae/B0B,Af+B1B,AJ0HA,CemBA,EAAA,IIpKqB,CAAA,IAAA,CAAA,uBAGmC,CJuKxD,AlBoJA,AsB3TA,CJuKA,AlBoJA,AsB3TA,QAA0B,OAAO,CtB2TjC,AkBpJA,AkCsFA,A7C9NA,Ae/BA,CJuKA,AkCsFA,ApD8DA,AsB3TA,Af+BA,Ue/BA,KACa,yBAAA,CAAA,CAAA,CAAA,qBAKoD,CAAjE,A8B4PA,CAAA,A9B5PA,C8B4PA,A9B5PA,C8B4PA,A9B5PA,GACQ,wBADgC,C8B4PxC,AlCpFA,AIxK0C,C8B4P1C,AlCpFA,AIxK2C,C8B4P3C,AlCpFA,EkCoFA,e9BpPqC,CtB4TrC,AsB5TA,CtB4TA,AsB5TA,CAAA,AtB4TA,CsB5TA,AtB4TA,CsB5TA,CAAA,CAAA,EAAkD,CtB4TlD,AsB5TA,CtB4TA,AsB5TA,CAAA,CtB4TA,AsB5TA,CAAA,AtB4TA,iBsB3ToB,C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GAAA,GAAA,kGAIsC,C5BqCjE,A4BrCA,CAAA,C5BqCA,A4BrCA,C5BqCA,A4BrCqE,C5BqCrE,iG4B7BY,CADZ,AhCqGA,AVjFA,A4DyMgE,ClDxHhE,AVjFA,A0CpBA,AACmB,ChCoGnB,AgCrGA,CAAA,A1CoBA,AUiFA,CAA2E,AVjF3E,A0CpBA,GAAA,EAC6B,CAD7B,CAC+B,CACpB,kBAQX,aAgB2B,CAAA,CAAA,CAAA,EACzB,ChC+GF,A8B5BA,AEnFA,EhC+GA,EAAA,MAAA,EAAA,gEgC9GA,C5B0CA,AdrBA,A0CrBA,CAAA,EACgE,MAAA,CAAA,CAAA,CAC1D,qBAAY,CAFlB,CAE4B,AAF5B,CAGK,AAHL,CAAA,CAAA,CAAA,CAAA,oEASA,CboDwD,AhB0FxD,A6B9I0D,CjByJrB,AZXrC,A6B9I2D,iSkBwG7C,EAAA,CAAA,CAAkC,CAAA,SAE1C,EAAA,UAAA,mBAGsB,CAAA,kBAAA,CAAA,CAAA,mBAAA,CAAA,kBAGtB,CxDzJN,AwDyJsB,CxDzJtB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,UwD0JM,CxD1JN,CAAA,CAAA,AwD0J+B,CxD1J/B,AwD0JoC,CxD1JpC,CAAA,CAAA,CAAA,AwD2JS,CxD3JT,CAAA,AwD4JK,CxD5JL,AwD4JQ,CxD5JR,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,AwD4Je,CxD5Jf,AwD4JgB,CxD5JhB,CAAA,CwD2JuB,AxD3JvB,AwD0J4B,CxD1J5B,CAAA,AwDqKoB,wCAAqB,ClDrHzC,AKnGA,AfyBA,A4CaA,AJDA,A3B6EA,AP5GA,4EsDwNS,CAAA,mDHxRH,CDJC,AICL,ACaA,AzDAF,AqCHS,AhBPP,AqCSO,A9DFA,A+DZA,AhBCA,AlBkBA,AvBbT,AoDLS,A3DAA,AcOA,AuBNA,AjBFT,A2BiIA,A5BxHS,AFIT,A2CCE,AnBRO,AaDA,AzCUT,AhBkBA,AuCvBS,AzBGP,AHAO,AqCDT,A9BLS,A4BDT,ATDA,qD2B2RsB,EAAA,UAAoB,CnCzF1C,AVhIA,ARqRA,AmChRA,AiBiSA,cC3EoC,CAC1B,IAAA,EAAA,KAAA,kGAGmB,EAAA,gBAYR,MAAE,CAAI,CAAE,CAAA,YqBtPE,C3EX/B,AFkDA,AwC7BA,ADRA,AsCDE,GAAG,CAAqB,CrCS1B,ADRA,CCQA,ADRA,CCQA,ADRA,CAAA,CCaW,ADbX,CAAA,CAAA,CAAA,CAAA,CAAA,EAIO,sKsCeO,EAAA,OAAA,CAAA,MAAuB,CvEgFrC,AV1EA,AgBpBA,A4BiCA,AmBsEW,AtBqGX,AnC3MA,A2EasC,CxC8LtC,IwC7LW,CAAA,6CAgCF,CAAA,CAAA,CAAA,QAKkB,oDAGrB,CAAA,CAAA,EAAuB,WAAA,GAAA,CAAA,CAAwB,CAAA,EAAA,qBAW5C,IAAA,CAAA,OAAA,IAAA,OAAA,CAAA,4FAQyB,KACb,CAAA,CAAA,CAAA,EAAA,CAAA,YAA8B,CAAA,CAAA,CAAc,CAAC,CjFFlE,CiFEuE,AnEkBvE,AdpBA,CAAA,AiFEuE,AnEkBvE,CAAA,AmElBsE,IAAO,AAC3E,CjFHF,AcoBA,AmElB8E,AAC3E,mCAnDwB,CACxB,CAAC,4JAOwB,CAAA,CAAA,sDAS5B,C9BsDC,A8BtDA,CrBsMO,CD6ER,AfhQA,AlC6DA,Cd3BA,Ac2BA,AkC7DA,AegQA,AfhQA,ClC6DA,Ad3BA,AgDlCA,AegQA,CAAA,A/D9NA,Ac2BA,AkC7DA,GgBsLQ,UAAU,EACV,aAAa,QAVb,YAAA,EAAA,WAAA,SACS,EAAA,OAAA,cAYO,EAAA,CAAA,4LAEd,EAAA,SAAc,CAAA,EACJ,C1CuXpB,ARhfA,CQgfA,ARhfA,CQgfA,ARhfA,CAAA,AQgfA,CRhfA,CAAA,EkD6HM,IAAA,EAAA,IAAA,iCAIA,GAAA,EAAY,MAAM,CAAA,SAC4B,MAAM,CAK5C,EAAA,QACQ,MAAM,EAAA,MAAA,GAEpB,EAAe,CGhNK,AlD2G5B,A+BtFA,ArCmQA,AW4TA,AsBpiBA,A1BxBA,AiDpDwB,eAAA,CAAA,QAAA,EAAA,gDH8OyB,QAAS,C9CvL1D,AJ6DA,CI7DA,AJ6DA,CAAA,AI7DA,CJ6DA,AI7DA,CAAA,AJ6DA,CI7D8D,AJ6D9D,2BkD6H4C,CAAA,QAAA,KACd,YAIL,CAAA,gBAAiB,CAAC,C9CrL3C,A8BHA,AhDwDA,AcSA,CAAA,AdTA,A4CvBA,AIjCA,Ae8PiD,A7C3PjD,MAAA,EAAA,0B8CyLoB,CAAA,EAAc,MAAM,ClDtHxC,A0ElH2C,AvE6I3C,A+B7FA,A1B8jBA,AtBpgB4B,AkBvD5B,A6C6PA,ACxEyC,ArD6EzC,CqCrQA,A1B8jBA,AR5fA,A0ElH4C,A7EqT5C,AMxKA,AC1FA,M8CuLmD,EAAU,KAAK,eAC1D,CxDjJR,AsC3EA,A9CkGA,A+DiMA,A9BhPA,AWkBA,A3B+DA,AYeA,AsBlHA,AHEA,A5CdA,CAAA,MAAA,CAAA,KAAA,mB4D0M4B,AAAC,IACrB,GpBjJY,QoBiJR,C5DxMZ,AIuDmB,AqB4EnB,Af5CA,AiDuLA,A9BhPA,AjCgDA,CAAA,A+DgMA,A9BhPA,AJqGc,Af5Cd,A8BhCoB,MAAA,CoBiJkB,CDsEtC,A9BhPA,A+B0KuC,AhE1HvC,AI9EA,A4DyMU,CDqEV,A/DhMA,AkB1DA,AeUA,C7B9BA,A2D8QA,A/DhM6C,AkB1D7C,ClB0D8C,A+DgM9C,A7C1PA,AdpBA,A6B8BA,A+B2KU,C/B3KV,AfVA,AdpBA,A2D8QA,ACrEU,OAAA,CAAA,YAAgB,CAAU,CAAE,A/B1KtC,AjCgDA,AkB1DA,A6C0PA,C/DhMA,AiChDA,A8BgPA,A3D9QA,CcoBA,AeUA,A8BgPA,A3D9QA,mNuF3IyD,C9CmKzD,A8CnK0D,AvFwB1D,AsCTA,8FiDNiD,UAAU,iFAgBlC,kGAM8B,CnFsEvD,AqBiEA,IrBjEA,IJsCA,EAAA,gB4D4MU,EAAY,OAEZ,CADK,CACG,IAAA,CAAA,KAAA,SAAqB,CAAC,ChEzHxC,AkBxDA,A6CuPA,A3D5QA,C2D4QA,A/D/LA,AI7EA,AcqBA,K8CwLc,EACJ,GAAA,EAAA,IAA8B,C5DnMxC,AU4FA,OAAA,OkDyGsC,C5DpMD,AJ2EA,AciBrC,A+BqGA,A3B9KA,G8CiL0C,CAAC,IAAI,CAAC,iBAErC,IAAA,CAAA,AAAM,gBACe,CAAC,ClDvGjC,AesCA,AlBsJA,AWwTsC,AtBtgBtC,mBgE0H0B,EAAS,C1C6YnC,AwBtmBA,MAAA,EAAA,IAAA,uBkB2NY,AAAc,OAAd,G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","ignoreList":[0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,97,98,99,100,101,103,104,106]}